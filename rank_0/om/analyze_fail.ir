# 1.This file shows the parsed IR info when graph evaluating failed to help find the problem.
# 2.You can search the last `------------------------>` to the node which is inferred failed.
# 3.Refer to https://www.mindspore.cn/search?inputValue=analyze_fail.ir to get more instructions.
# ===============================================================================

subgraph attr:
training : 0
subgraph instance: fastreid_modeling_backbones_meta_dynamic_router_resnet_ResNet_construct.6 : 0x55f1d8ddd600
# In file /home/yuming/ACL-DGReID-mindspore/fastreid/modeling/backbones/meta_dynamic_router_resnet.py:437/    def construct(self, x, epoch, opt=None):/
subgraph @fastreid_modeling_backbones_meta_dynamic_router_resnet_ResNet_construct.6(%para1_x, %para2_epoch, %para3_NL_1_idx, %para4_router1.fc_classifier.weight, %para5_conv1.weight, %para6_router1.fc2.weight, %para7_router1.fc1.weight, %para8_layer2.0.conv3.weight, %para9_layer2.1.conv3.weight, %para10_layer2.2.conv3.weight, %para11_layer3.0.conv3.weight, %para12_layer3.1.conv3.weight, %para13_layer3.2.conv3.weight, %para14_layer3.3.conv3.weight, %para15_layer3.4.conv3.weight, %para16_layer4.0.conv3.weight, %para17_layer4.1.conv3.weight, %para18_layer2.0.conv2.weight, %para19_layer2.1.conv2.weight, %para20_layer2.2.conv2.weight, %para21_layer3.0.conv2.weight, %para22_layer3.1.conv2.weight, %para23_layer3.2.conv2.weight, %para24_layer3.3.conv2.weight, %para25_layer3.4.conv2.weight, %para26_layer4.0.conv2.weight, %para27_layer4.1.conv2.weight, %para28_router2.fc_classifier.weight, %para29_meta_fuse1.gate, %para30_bn1.gamma, %para31_bn1.beta, %para32_layer1.0.conv3.weight, %para33_layer1.1.conv3.weight, %para34_layer2.0.conv1.weight, %para35_layer2.1.conv1.weight, %para36_layer2.2.conv1.weight, %para37_layer3.0.conv1.weight, %para38_layer3.1.conv1.weight, %para39_layer3.2.conv1.weight, %para40_layer3.3.conv1.weight, %para41_layer3.4.conv1.weight, %para42_layer4.0.conv1.weight, %para43_layer4.1.conv1.weight, %para44_router2.fc2.weight, %para45_layer1.0.conv2.weight, %para46_layer1.1.conv2.weight, %para47_router2.fc1.weight, %para48_meta_se1.fc2.weight, %para49_bn1.moving_mean, %para50_bn1.moving_variance, %para51_layer1.0.conv1.weight, %para52_layer1.1.conv1.weight, %para53_meta_se1.fc1.weight, %para54_adaptor1_base.conv3.weight, %para55_layer2.0.bn3.gamma, %para56_layer2.0.bn3.beta, %para57_layer2.1.bn3.gamma, %para58_layer2.1.bn3.beta, %para59_layer2.2.bn3.gamma, %para60_layer2.2.bn3.beta, %para61_layer3.0.bn3.gamma, %para62_layer3.0.bn3.beta, %para63_layer3.1.bn3.gamma, %para64_layer3.1.bn3.beta, %para65_layer3.2.bn3.gamma, %para66_layer3.2.bn3.beta, %para67_layer3.3.bn3.gamma, %para68_layer3.3.bn3.beta, %para69_layer3.4.bn3.gamma, %para70_layer3.4.bn3.beta, %para71_layer4.0.bn3.gamma, %para72_layer4.0.bn3.beta, %para73_layer4.1.bn3.gamma, %para74_layer4.1.bn3.beta, %para75_router3.fc_classifier.weight, %para76_meta_fuse2.gate, %para77_router4.fc_classifier.weight, %para78_meta_fuse3.gate, %para79_adaptor1_base.conv2.weight, %para80_layer2.0.bn2.gamma, %para81_layer2.0.bn2.beta, %para82_layer2.1.bn2.gamma, %para83_layer2.1.bn2.beta, %para84_layer2.2.bn2.gamma, %para85_layer2.2.bn2.beta, %para86_layer3.0.bn2.gamma, %para87_layer3.0.bn2.beta, %para88_layer3.1.bn2.gamma, %para89_layer3.1.bn2.beta, %para90_layer3.2.bn2.gamma, %para91_layer3.2.bn2.beta, %para92_layer3.3.bn2.gamma, %para93_layer3.3.bn2.beta, %para94_layer3.4.bn2.gamma, %para95_layer3.4.bn2.beta, %para96_layer4.0.bn2.gamma, %para97_layer4.0.bn2.beta, %para98_layer4.1.bn2.gamma, %para99_layer4.1.bn2.beta, %para100_invariant_norm1.gamma, %para101_invariant_norm1.beta, %para102_specific_norm1.gamma, %para103_specific_norm1.beta, %para104_adaptor1_sub.conv3.weight, %para105_adaptor1_base.conv1.weight, %para106_router3.fc2.weight, %para107_router4.fc2.weight, %para108_layer1.0.bn3.gamma, %para109_layer1.0.bn3.beta, %para110_layer1.1.bn3.gamma, %para111_layer1.1.bn3.beta, %para112_layer2.0.bn3.moving_mean, %para113_layer2.0.bn3.moving_variance, %para114_layer2.1.bn3.moving_mean, %para115_layer2.1.bn3.moving_variance, %para116_layer2.2.bn3.moving_mean, %para117_layer2.2.bn3.moving_variance, %para118_layer3.0.bn3.moving_mean, %para119_layer3.0.bn3.moving_variance, %para120_layer3.1.bn3.moving_mean, %para121_layer3.1.bn3.moving_variance, %para122_layer3.2.bn3.moving_mean, %para123_layer3.2.bn3.moving_variance, %para124_layer3.3.bn3.moving_mean, %para125_layer3.3.bn3.moving_variance, %para126_layer3.4.bn3.moving_mean, %para127_layer3.4.bn3.moving_variance, %para128_layer4.0.bn3.moving_mean, %para129_layer4.0.bn3.moving_variance, %para130_layer4.0.bn1.gamma, %para131_layer4.0.bn1.beta, %para132_layer4.1.bn3.moving_mean, %para133_layer4.1.bn3.moving_variance, %para134_layer4.1.bn1.gamma, %para135_layer4.1.bn1.beta, %para136_adaptor2_sub.conv3.weight, %para137_adaptor3_sub.conv3.weight, %para138_adaptor4_sub.conv3.weight, %para139_adaptor1_sub.conv2.weight, %para140_adaptor2_base.conv3.weight, %para141_adaptor3_base.conv3.weight, %para142_adaptor4_base.conv3.weight, %para143_router3.fc1.weight, %para144_meta_se2.fc2.weight, %para145_router4.fc1.weight, %para146_meta_se3.fc2.weight, %para147_layer1.0.bn2.gamma, %para148_layer1.0.bn2.beta, %para149_layer1.1.bn2.gamma, %para150_layer1.1.bn2.beta, %para151_layer2.0.bn2.moving_mean, %para152_layer2.0.bn2.moving_variance, %para153_layer2.1.bn2.moving_mean, %para154_layer2.1.bn2.moving_variance, %para155_layer2.2.bn2.moving_mean, %para156_layer2.2.bn2.moving_variance, %para157_layer3.0.bn2.moving_mean, %para158_layer3.0.bn2.moving_variance, %para159_layer3.1.bn2.moving_mean, %para160_layer3.1.bn2.moving_variance, %para161_layer3.2.bn2.moving_mean, %para162_layer3.2.bn2.moving_variance, %para163_layer3.3.bn2.moving_mean, %para164_layer3.3.bn2.moving_variance, %para165_layer3.4.bn2.moving_mean, %para166_layer3.4.bn2.moving_variance, %para167_layer4.0.bn2.moving_mean, %para168_layer4.0.bn2.moving_variance, %para169_layer4.1.bn2.moving_mean, %para170_layer4.1.bn2.moving_variance, %para171_adaptor2_sub.conv2.weight, %para172_adaptor3_sub.conv2.weight, %para173_adaptor4_sub.conv2.weight, %para174_invariant_norm1.moving_mean, %para175_invariant_norm1.moving_variance, %para176_specific_norm1.moving_mean, %para177_specific_norm1.moving_variance, %para178_adaptor1_sub.conv1.weight, %para179_adaptor2_base.conv2.weight, %para180_meta_se2.fc1.weight, %para181_adaptor3_base.conv2.weight, %para182_meta_se3.fc1.weight, %para183_adaptor4_base.conv2.weight, %para184_layer1.0.bn3.moving_mean, %para185_layer1.0.bn3.moving_variance, %para186_layer1.1.bn3.moving_mean, %para187_layer1.1.bn3.moving_variance, %para188_layer4.0.bn1.moving_mean, %para189_layer4.0.bn1.moving_variance, %para190_layer4.1.bn1.moving_mean, %para191_layer4.1.bn1.moving_variance, %para192_adaptor2_sub.conv1.weight, %para193_adaptor3_sub.conv1.weight, %para194_adaptor4_sub.conv1.weight, %para195_adaptor2_base.conv1.weight, %para196_adaptor3_base.conv1.weight, %para197_adaptor4_base.conv1.weight, %para198_layer1.0.bn2.moving_mean, %para199_layer1.0.bn2.moving_variance, %para200_layer1.1.bn2.moving_mean, %para201_layer1.1.bn2.moving_variance, %para202_meta_fuse4.gate, %para203_adaptor1_base.bn3.gamma, %para204_adaptor1_base.bn3.beta, %para205_invariant_norm2.gamma, %para206_invariant_norm2.beta, %para207_specific_norm2.gamma, %para208_specific_norm2.beta, %para209_invariant_norm3.gamma, %para210_invariant_norm3.beta, %para211_specific_norm3.gamma, %para212_specific_norm3.beta, %para213_layer2.0.bn1.BN.gamma, %para214_layer2.0.bn1.BN.beta, %para215_layer2.1.bn1.BN.gamma, %para216_layer2.1.bn1.BN.beta, %para217_layer2.2.bn1.BN.gamma, %para218_layer2.2.bn1.BN.beta, %para219_layer3.0.bn1.BN.gamma, %para220_layer3.0.bn1.BN.beta, %para221_layer3.1.bn1.BN.gamma, %para222_layer3.1.bn1.BN.beta, %para223_layer3.2.bn1.BN.gamma, %para224_layer3.2.bn1.BN.beta, %para225_layer3.3.bn1.BN.gamma, %para226_layer3.3.bn1.BN.beta, %para227_layer3.4.bn1.BN.gamma, %para228_layer3.4.bn1.BN.beta, %para229_adaptor1_base.bn2.gamma, %para230_adaptor1_base.bn2.beta, %para231_layer2.0.bn1.IN.gamma, %para232_layer2.0.bn1.IN.beta, %para233_layer2.1.bn1.IN.gamma, %para234_layer2.1.bn1.IN.beta, %para235_layer2.2.bn1.IN.gamma, %para236_layer2.2.bn1.IN.beta, %para237_layer3.0.bn1.IN.gamma, %para238_layer3.0.bn1.IN.beta, %para239_layer3.1.bn1.IN.gamma, %para240_layer3.1.bn1.IN.beta, %para241_layer3.2.bn1.IN.gamma, %para242_layer3.2.bn1.IN.beta, %para243_layer3.3.bn1.IN.gamma, %para244_layer3.3.bn1.IN.beta, %para245_layer3.4.bn1.IN.gamma, %para246_layer3.4.bn1.IN.beta, %para247_adaptor1_sub.bn3.gamma, %para248_adaptor1_sub.bn3.beta, %para249_adaptor1_base.bn1.gamma, %para250_adaptor1_base.bn1.beta, %para251_adaptor2_sub.bn3.gamma, %para252_adaptor2_sub.bn3.beta, %para253_adaptor3_sub.bn3.gamma, %para254_adaptor3_sub.bn3.beta, %para255_adaptor4_sub.bn3.gamma, %para256_adaptor4_sub.bn3.beta, %para257_meta_se4.fc2.weight, %para258_adaptor1_sub.bn2.gamma, %para259_adaptor1_sub.bn2.beta, %para260_adaptor2_base.bn3.gamma, %para261_adaptor2_base.bn3.beta, %para262_invariant_norm2.moving_mean, %para263_invariant_norm2.moving_variance, %para264_specific_norm2.moving_mean, %para265_specific_norm2.moving_variance, %para266_adaptor3_base.bn3.gamma, %para267_adaptor3_base.bn3.beta, %para268_invariant_norm3.moving_mean, %para269_invariant_norm3.moving_variance, %para270_specific_norm3.moving_mean, %para271_specific_norm3.moving_variance, %para272_adaptor4_base.bn3.gamma, %para273_adaptor4_base.bn3.beta, %para274_layer1.0.bn1.BN.gamma, %para275_layer1.0.bn1.BN.beta, %para276_layer1.1.bn1.BN.gamma, %para277_layer1.1.bn1.BN.beta, %para278_layer2.0.bn1.BN.moving_mean, %para279_layer2.0.bn1.BN.moving_variance, %para280_layer2.1.bn1.BN.moving_mean, %para281_layer2.1.bn1.BN.moving_variance, %para282_layer2.2.bn1.BN.moving_mean, %para283_layer2.2.bn1.BN.moving_variance, %para284_layer3.0.bn1.BN.moving_mean, %para285_layer3.0.bn1.BN.moving_variance, %para286_layer3.1.bn1.BN.moving_mean, %para287_layer3.1.bn1.BN.moving_variance, %para288_layer3.2.bn1.BN.moving_mean, %para289_layer3.2.bn1.BN.moving_variance, %para290_layer3.3.bn1.BN.moving_mean, %para291_layer3.3.bn1.BN.moving_variance, %para292_layer3.4.bn1.BN.moving_mean, %para293_layer3.4.bn1.BN.moving_variance, %para294_meta_se4.fc1.weight, %para295_adaptor2_sub.bn2.gamma, %para296_adaptor2_sub.bn2.beta, %para297_adaptor3_sub.bn2.gamma, %para298_adaptor3_sub.bn2.beta, %para299_adaptor4_sub.bn2.gamma, %para300_adaptor4_sub.bn2.beta, %para301_layer1.0.bn1.IN.gamma, %para302_layer1.0.bn1.IN.beta, %para303_layer1.1.bn1.IN.gamma, %para304_layer1.1.bn1.IN.beta, %para305_adaptor1_sub.bn3.moving_mean, %para306_adaptor1_sub.bn3.moving_variance, %para307_adaptor2_base.bn2.gamma, %para308_adaptor2_base.bn2.beta, %para309_adaptor3_base.bn2.gamma, %para310_adaptor3_base.bn2.beta, %para311_adaptor4_base.bn2.gamma, %para312_adaptor4_base.bn2.beta, %para313_adaptor2_sub.bn3.moving_mean, %para314_adaptor2_sub.bn3.moving_variance, %para315_adaptor3_sub.bn3.moving_mean, %para316_adaptor3_sub.bn3.moving_variance, %para317_adaptor4_sub.bn3.moving_mean, %para318_adaptor4_sub.bn3.moving_variance, %para319_adaptor1_sub.bn2.moving_mean, %para320_adaptor1_sub.bn2.moving_variance, %para321_adaptor2_base.bn1.gamma, %para322_adaptor2_base.bn1.beta, %para323_adaptor3_base.bn1.gamma, %para324_adaptor3_base.bn1.beta, %para325_adaptor4_base.bn1.gamma, %para326_adaptor4_base.bn1.beta, %para327_layer1.0.bn1.BN.moving_mean, %para328_layer1.0.bn1.BN.moving_variance, %para329_layer1.1.bn1.BN.moving_mean, %para330_layer1.1.bn1.BN.moving_variance, %para331_adaptor2_sub.bn2.moving_mean, %para332_adaptor2_sub.bn2.moving_variance, %para333_adaptor3_sub.bn2.moving_mean, %para334_adaptor3_sub.bn2.moving_variance, %para335_adaptor4_sub.bn2.moving_mean, %para336_adaptor4_sub.bn2.moving_variance, %para337_invariant_norm4.gamma, %para338_invariant_norm4.beta, %para339_specific_norm4.gamma, %para340_specific_norm4.beta, %para341_map4.gamma, %para342_map4.beta, %para343_map3.gamma, %para344_map3.beta, %para345_map2.gamma, %para346_map2.beta, %para347_invariant_norm4.moving_mean, %para348_invariant_norm4.moving_variance, %para349_specific_norm4.moving_mean, %para350_specific_norm4.moving_variance, %para351_adaptor1_sub.bn1.BN.gamma, %para352_adaptor1_sub.bn1.BN.beta, %para353_map1.gamma, %para354_map1.beta, %para355_map4.moving_mean, %para356_map4.moving_variance, %para357_adaptor1_sub.bn1.IN.gamma, %para358_adaptor1_sub.bn1.IN.beta, %para359_adaptor2_sub.bn1.BN.gamma, %para360_adaptor2_sub.bn1.BN.beta, %para361_adaptor3_sub.bn1.BN.gamma, %para362_adaptor3_sub.bn1.BN.beta, %para363_adaptor4_sub.bn1.BN.gamma, %para364_adaptor4_sub.bn1.BN.beta, %para365_map3.moving_mean, %para366_map3.moving_variance, %para367_adaptor2_sub.bn1.IN.gamma, %para368_adaptor2_sub.bn1.IN.beta, %para369_adaptor3_sub.bn1.IN.gamma, %para370_adaptor3_sub.bn1.IN.beta, %para371_adaptor4_sub.bn1.IN.gamma, %para372_adaptor4_sub.bn1.IN.beta, %para373_map2.moving_mean, %para374_map2.moving_variance, %para375_adaptor1_sub.bn1.BN.moving_mean, %para376_adaptor1_sub.bn1.BN.moving_variance, %para377_map1.moving_mean, %para378_map1.moving_variance, %para379_adaptor2_sub.bn1.BN.moving_mean, %para380_adaptor2_sub.bn1.BN.moving_variance, %para381_adaptor3_sub.bn1.BN.moving_mean, %para382_adaptor3_sub.bn1.BN.moving_variance, %para383_adaptor4_sub.bn1.BN.moving_mean, %para384_adaptor4_sub.bn1.BN.moving_variance) {
  %1([CNode]25) = call @print_.24(I64(4))
      : (<Int64, NoShape>) -> (<Tensor[Int32], (1)>)
      #scope: (Default)
      # In file /home/yuming/ACL-DGReID-mindspore/fastreid/modeling/backbones/meta_dynamic_router_resnet.py:441/        print(4)/
  %2([CNode]26) = StopGradient(%1)
      : (<Tensor[Int32], (1)>) -> (<Tensor[Int32], (1)>)
      #scope: (Default)
  %3([CNode]27) = S-Prim-inner_len(%para3_NL_1_idx)
      : (<Ref[Tensor[Int64]], (1)>) -> (<Int64, NoShape>)
      #scope: (Default)
      # In file /home/yuming/ACL-DGReID-mindspore/fastreid/modeling/backbones/meta_dynamic_router_resnet.py:453/        if len(self.NL_1_idx) == 0:/
  %4([CNode]28) = S-Prim-equal(%3, I64(0))
      : (<Int64, NoShape>, <Int64, NoShape>) -> (<Bool, NoShape>)
      #scope: (Default)
      # In file /home/yuming/ACL-DGReID-mindspore/fastreid/modeling/backbones/meta_dynamic_router_resnet.py:453/        if len(self.NL_1_idx) == 0:/
  %5([CNode]29) = Cond(%4, Bool(0))
      : (<Bool, NoShape>, <Bool, NoShape>) -> (<Bool, NoShape>)
      #scope: (Default)
      # In file /home/yuming/ACL-DGReID-mindspore/fastreid/modeling/backbones/meta_dynamic_router_resnet.py:453/        if len(self.NL_1_idx) == 0:/
  %6([CNode]30) = Switch(%5, call @✓fastreid_modeling_backbones_meta_dynamic_router_resnet_ResNet_construct.31, call @✗fastreid_modeling_backbones_meta_dynamic_router_resnet_ResNet_construct.7)
      : (<Bool, NoShape>, <Func, NoShape>, <Func, NoShape>) -> (<Func, NoShape>)
      #scope: (Default)
      # In file /home/yuming/ACL-DGReID-mindspore/fastreid/modeling/backbones/meta_dynamic_router_resnet.py:453/        if len(self.NL_1_idx) == 0:/

#------------------------> 0
  %7([CNode]32) = %6()
      #scope: (Default)
      # In file /home/yuming/ACL-DGReID-mindspore/fastreid/modeling/backbones/meta_dynamic_router_resnet.py:453/        if len(self.NL_1_idx) == 0:/
  %8([CNode]33) = Depend[side_effect_propagate: I64(1)](%7, %2)
      : (<null>, <Tensor[Int32], (1)>) -> (<null>)
      #scope: (Default)
      # In file /home/yuming/ACL-DGReID-mindspore/fastreid/modeling/backbones/meta_dynamic_router_resnet.py:453/        if len(self.NL_1_idx) == 0:/
  Return(%8)
      : (<null>)
      #scope: (Default)
      # In file /home/yuming/ACL-DGReID-mindspore/fastreid/modeling/backbones/meta_dynamic_router_resnet.py:453/        if len(self.NL_1_idx) == 0:/
}
# Order:
#   1: @fastreid_modeling_backbones_meta_dynamic_router_resnet_ResNet_construct.6:[CNode]25{[0]: ValueNode<FuncGraph> print_.24, [1]: ValueNode<Int64Imm> 4}
#   2: @fastreid_modeling_backbones_meta_dynamic_router_resnet_ResNet_construct.6:x{[0]: ValueNode<FuncGraph> fastreid_modeling_ops_MetaConv2d_construct.34, [1]: x, [2]: ValueNode<None> None}
#   3: @fastreid_modeling_backbones_meta_dynamic_router_resnet_ResNet_construct.6:x{[0]: ValueNode<FuncGraph> fastreid_modeling_ops_MetaBNNorm_construct.35, [1]: x, [2]: ValueNode<None> None}
#   4: @fastreid_modeling_backbones_meta_dynamic_router_resnet_ResNet_construct.6:x{[0]: ValueNode<FuncGraph> mindspore_nn_layer_activation_ReLU_construct.36, [1]: x}
#   5: @fastreid_modeling_backbones_meta_dynamic_router_resnet_ResNet_construct.6:x{[0]: ValueNode<FuncGraph> mindspore_nn_layer_pooling_MaxPool2d_construct.37, [1]: x}
#   6: @fastreid_modeling_backbones_meta_dynamic_router_resnet_ResNet_construct.6:[CNode]27{[0]: ValueNode<DoSignaturePrimitive> S-Prim-inner_len, [1]: NL_1_idx}
#   7: @fastreid_modeling_backbones_meta_dynamic_router_resnet_ResNet_construct.6:[CNode]28{[0]: ValueNode<DoSignaturePrimitive> S-Prim-equal, [1]: [CNode]27, [2]: ValueNode<Int64Imm> 0}
#   8: @fastreid_modeling_backbones_meta_dynamic_router_resnet_ResNet_construct.6:[CNode]29{[0]: ValueNode<Primitive> Cond, [1]: [CNode]28, [2]: ValueNode<BoolImm> false}
#   9: @fastreid_modeling_backbones_meta_dynamic_router_resnet_ResNet_construct.6:[CNode]30{[0]: ValueNode<Primitive> Switch, [1]: [CNode]29, [2]: ValueNode<FuncGraph> ✓fastreid_modeling_backbones_meta_dynamic_router_resnet_ResNet_construct.31, [3]: ValueNode<FuncGraph> ✗fastreid_modeling_backbones_meta_dynamic_router_resnet_ResNet_construct.7}
#  10: @fastreid_modeling_backbones_meta_dynamic_router_resnet_ResNet_construct.6:[CNode]32{[0]: [CNode]30}
#  11: @fastreid_modeling_backbones_meta_dynamic_router_resnet_ResNet_construct.6:[CNode]38{[0]: ValueNode<Primitive> Return, [1]: [CNode]33}


subgraph attr:
training : 0
subgraph instance: ✗fastreid_modeling_backbones_meta_dynamic_router_resnet_ResNet_construct.7 : 0x55f1bd9ca1e0
# In file /home/yuming/ACL-DGReID-mindspore/fastreid/modeling/backbones/meta_dynamic_router_resnet.py:453/        if len(self.NL_1_idx) == 0:/
subgraph @✗fastreid_modeling_backbones_meta_dynamic_router_resnet_ResNet_construct.7 parent: [subgraph @fastreid_modeling_backbones_meta_dynamic_router_resnet_ResNet_construct.6]() {

#------------------------> 1
  %1([CNode]39) = call @↓fastreid_modeling_backbones_meta_dynamic_router_resnet_ResNet_construct.8()
      #scope: (Default)
  Return(%1)
      : (<null>)
      #scope: (Default)
      # In file /home/yuming/ACL-DGReID-mindspore/fastreid/modeling/backbones/meta_dynamic_router_resnet.py:453/        if len(self.NL_1_idx) == 0:/
}
# Order:
#   1: @✗fastreid_modeling_backbones_meta_dynamic_router_resnet_ResNet_construct.7:[CNode]40{[0]: ValueNode<Primitive> Return, [1]: [CNode]39}
#   2: @✗fastreid_modeling_backbones_meta_dynamic_router_resnet_ResNet_construct.7:[CNode]39{[0]: ValueNode<FuncGraph> ↓fastreid_modeling_backbones_meta_dynamic_router_resnet_ResNet_construct.8}


subgraph attr:
after_block : 1
training : 0
subgraph instance: ↓fastreid_modeling_backbones_meta_dynamic_router_resnet_ResNet_construct.8 : 0x55f1b94212b0
# In file /home/yuming/ACL-DGReID-mindspore/fastreid/modeling/backbones/meta_dynamic_router_resnet.py:453/        if len(self.NL_1_idx) == 0:/
subgraph @↓fastreid_modeling_backbones_meta_dynamic_router_resnet_ResNet_construct.8 parent: [subgraph @fastreid_modeling_backbones_meta_dynamic_router_resnet_ResNet_construct.6]() {
  %1(x) = $(fastreid_modeling_backbones_meta_dynamic_router_resnet_ResNet_construct.6):call @fastreid_modeling_ops_MetaConv2d_construct.34(%para1_x, None)
      : (<Tensor[Float32], (8, 3, 16, 16)>, <None, NoShape>) -> (<Tensor[Float32], (8, 64, 8, 8)>)
      #scope: (Default)
      # In file /home/yuming/ACL-DGReID-mindspore/fastreid/modeling/backbones/meta_dynamic_router_resnet.py:443/        x = self.conv1(x, opt)/

#------------------------> 2
  %2(x) = $(fastreid_modeling_backbones_meta_dynamic_router_resnet_ResNet_construct.6):call @fastreid_modeling_ops_MetaBNNorm_construct.35(%1, None)
      : (<Tensor[Float32], (8, 64, 8, 8)>, <None, NoShape>) -> (<null>)
      #scope: (Default)
      # In file /home/yuming/ACL-DGReID-mindspore/fastreid/modeling/backbones/meta_dynamic_router_resnet.py:444/        x = self.bn1(x, opt)/
  %3(x) = $(fastreid_modeling_backbones_meta_dynamic_router_resnet_ResNet_construct.6):call @mindspore_nn_layer_activation_ReLU_construct.36(%2)
      : (<null>) -> (<null>)
      #scope: (Default)
      # In file /home/yuming/ACL-DGReID-mindspore/fastreid/modeling/backbones/meta_dynamic_router_resnet.py:445/        x = self.relu(x)/
  %4(x) = $(fastreid_modeling_backbones_meta_dynamic_router_resnet_ResNet_construct.6):call @mindspore_nn_layer_pooling_MaxPool2d_construct.37(%3)
      : (<null>) -> (<null>)
      #scope: (Default)
      # In file /home/yuming/ACL-DGReID-mindspore/fastreid/modeling/backbones/meta_dynamic_router_resnet.py:446/        x = self.maxpool(x)/
  %5(x) = call @mindspore_nn_layer_container_SequentialCell_construct.41(%4)
      : (<null>) -> (<null>)
      #scope: (Default)
      # In file /home/yuming/ACL-DGReID-mindspore/fastreid/modeling/backbones/meta_dynamic_router_resnet.py:456/        x = self.layer1(x)/
  %6([CNode]43) = call @fastreid_modeling_backbones_meta_dynamic_router_resnet_HyperRouter_construct.42(%5, None)
      : (<null>, <None, NoShape>) -> (<null>)
      #scope: (Default)
      # In file /home/yuming/ACL-DGReID-mindspore/fastreid/modeling/backbones/meta_dynamic_router_resnet.py:469/        weight, domain_cls_logit = self.router1(x, opt)/
  %7(domain_cls_logit) = S-Prim-getitem(%6, I64(1))
      : (<null>, <null>) -> (<null>)
      #scope: (Default)
      # In file /home/yuming/ACL-DGReID-mindspore/fastreid/modeling/backbones/meta_dynamic_router_resnet.py:469/        weight, domain_cls_logit = self.router1(x, opt)/
  %8([CNode]44) = StopGradient(%7)
      : (<null>) -> (<null>)
      #scope: (Default)
  %9([CNode]45) = S-Prim-inner_len(%para3_NL_1_idx)
      : (<Ref[Tensor[Int64]], (1)>) -> (<null>)
      #scope: (Default)
      # In file /home/yuming/ACL-DGReID-mindspore/fastreid/modeling/backbones/meta_dynamic_router_resnet.py:484/        if len(self.NL_2_idx) == 0:/
  %10([CNode]46) = S-Prim-equal(%9, I64(0))
      : (<null>, <null>) -> (<null>)
      #scope: (Default)
      # In file /home/yuming/ACL-DGReID-mindspore/fastreid/modeling/backbones/meta_dynamic_router_resnet.py:484/        if len(self.NL_2_idx) == 0:/
  %11([CNode]47) = Cond(%10, Bool(0))
      : (<null>, <null>) -> (<null>)
      #scope: (Default)
      # In file /home/yuming/ACL-DGReID-mindspore/fastreid/modeling/backbones/meta_dynamic_router_resnet.py:484/        if len(self.NL_2_idx) == 0:/
  %12([CNode]48) = Switch(%11, call @✓↓fastreid_modeling_backbones_meta_dynamic_router_resnet_ResNet_construct.49, call @✗↓fastreid_modeling_backbones_meta_dynamic_router_resnet_ResNet_construct.50)
      : (<null>, <null>, <null>) -> (<null>)
      #scope: (Default)
      # In file /home/yuming/ACL-DGReID-mindspore/fastreid/modeling/backbones/meta_dynamic_router_resnet.py:484/        if len(self.NL_2_idx) == 0:/
  %13([CNode]51) = %12()
      #scope: (Default)
      # In file /home/yuming/ACL-DGReID-mindspore/fastreid/modeling/backbones/meta_dynamic_router_resnet.py:484/        if len(self.NL_2_idx) == 0:/
  %14([CNode]52) = Depend[side_effect_propagate: I64(1)](%13, %8)
      : (<null>, <null>) -> (<null>)
      #scope: (Default)
      # In file /home/yuming/ACL-DGReID-mindspore/fastreid/modeling/backbones/meta_dynamic_router_resnet.py:484/        if len(self.NL_2_idx) == 0:/
  Return(%14)
      : (<null>)
      #scope: (Default)
      # In file /home/yuming/ACL-DGReID-mindspore/fastreid/modeling/backbones/meta_dynamic_router_resnet.py:484/        if len(self.NL_2_idx) == 0:/
}
# Order:
#   1: @↓fastreid_modeling_backbones_meta_dynamic_router_resnet_ResNet_construct.8:x{[0]: ValueNode<FuncGraph> mindspore_nn_layer_container_SequentialCell_construct.41, [1]: x}
#   2: @↓fastreid_modeling_backbones_meta_dynamic_router_resnet_ResNet_construct.8:x_invariant{[0]: ValueNode<FuncGraph> fastreid_modeling_backbones_meta_dynamic_router_resnet_Bottleneck_construct.53, [1]: x, [2]: ValueNode<None> None}
#   3: @↓fastreid_modeling_backbones_meta_dynamic_router_resnet_ResNet_construct.8:[CNode]54{[0]: ValueNode<Primitive> getattr, [1]: x_invariant, [2]: ValueNode<StringImm> shape}
#   4: @↓fastreid_modeling_backbones_meta_dynamic_router_resnet_ResNet_construct.8:N{[0]: ValueNode<DoSignaturePrimitive> S-Prim-getitem, [1]: [CNode]54, [2]: ValueNode<Int64Imm> 0}
#   5: @↓fastreid_modeling_backbones_meta_dynamic_router_resnet_ResNet_construct.8:C{[0]: ValueNode<DoSignaturePrimitive> S-Prim-getitem, [1]: [CNode]54, [2]: ValueNode<Int64Imm> 1}
#   6: @↓fastreid_modeling_backbones_meta_dynamic_router_resnet_ResNet_construct.8:H{[0]: ValueNode<DoSignaturePrimitive> S-Prim-getitem, [1]: [CNode]54, [2]: ValueNode<Int64Imm> 2}
#   7: @↓fastreid_modeling_backbones_meta_dynamic_router_resnet_ResNet_construct.8:W{[0]: ValueNode<DoSignaturePrimitive> S-Prim-getitem, [1]: [CNode]54, [2]: ValueNode<Int64Imm> 3}
#   8: @↓fastreid_modeling_backbones_meta_dynamic_router_resnet_ResNet_construct.8:[CNode]55{[0]: ValueNode<Primitive> getattr, [1]: x, [2]: ValueNode<StringImm> tile}
#   9: @↓fastreid_modeling_backbones_meta_dynamic_router_resnet_ResNet_construct.8:[CNode]56{[0]: ValueNode<DoSignaturePrimitive> S-Prim-MakeTuple, [1]: ValueNode<Int64Imm> 1, [2]: ValueNode<Int64Imm> 4, [3]: ValueNode<Int64Imm> 1, [4]: ValueNode<Int64Imm> 1}
#  10: @↓fastreid_modeling_backbones_meta_dynamic_router_resnet_ResNet_construct.8:[CNode]57{[0]: [CNode]55, [1]: [CNode]56}
#  11: @↓fastreid_modeling_backbones_meta_dynamic_router_resnet_ResNet_construct.8:[CNode]58{[0]: ValueNode<FuncGraph> fastreid_modeling_backbones_meta_dynamic_router_resnet_Bottleneck2_construct.59, [1]: [CNode]57, [2]: ValueNode<None> None}
#  12: @↓fastreid_modeling_backbones_meta_dynamic_router_resnet_ResNet_construct.8:[CNode]60{[0]: ValueNode<Primitive> getattr, [1]: [CNode]58, [2]: ValueNode<StringImm> reshape}
#  13: @↓fastreid_modeling_backbones_meta_dynamic_router_resnet_ResNet_construct.8:x_specific{[0]: [CNode]60, [1]: N, [2]: ValueNode<Int64Imm> 4, [3]: C, [4]: H, [5]: W}
#  14: @↓fastreid_modeling_backbones_meta_dynamic_router_resnet_ResNet_construct.8:[CNode]43{[0]: ValueNode<FuncGraph> fastreid_modeling_backbones_meta_dynamic_router_resnet_HyperRouter_construct.42, [1]: x, [2]: ValueNode<None> None}
#  15: @↓fastreid_modeling_backbones_meta_dynamic_router_resnet_ResNet_construct.8:weight{[0]: ValueNode<DoSignaturePrimitive> S-Prim-getitem, [1]: [CNode]43, [2]: ValueNode<Int64Imm> 0}
#  16: @↓fastreid_modeling_backbones_meta_dynamic_router_resnet_ResNet_construct.8:domain_cls_logit{[0]: ValueNode<DoSignaturePrimitive> S-Prim-getitem, [1]: [CNode]43, [2]: ValueNode<Int64Imm> 1}
#  17: @↓fastreid_modeling_backbones_meta_dynamic_router_resnet_ResNet_construct.8:[CNode]61{[0]: ValueNode<Primitive> getattr, [1]: ValueNode<ValueList> [], [2]: ValueNode<StringImm> append}
#  18: @↓fastreid_modeling_backbones_meta_dynamic_router_resnet_ResNet_construct.8:weights{[0]: [CNode]61, [1]: weight}
#  19: @↓fastreid_modeling_backbones_meta_dynamic_router_resnet_ResNet_construct.8:[CNode]62{[0]: ValueNode<Primitive> getattr, [1]: weight, [2]: ValueNode<StringImm> reshape}
#  20: @↓fastreid_modeling_backbones_meta_dynamic_router_resnet_ResNet_construct.8:[CNode]63{[0]: ValueNode<DoSignaturePrimitive> S-Prim-negative, [1]: ValueNode<Int64Imm> 1}
#  21: @↓fastreid_modeling_backbones_meta_dynamic_router_resnet_ResNet_construct.8:[CNode]64{[0]: [CNode]62, [1]: [CNode]63, [2]: ValueNode<Int64Imm> 4, [3]: ValueNode<Int64Imm> 1, [4]: ValueNode<Int64Imm> 1, [5]: ValueNode<Int64Imm> 1}
#  22: @↓fastreid_modeling_backbones_meta_dynamic_router_resnet_ResNet_construct.8:[CNode]65{[0]: ValueNode<DoSignaturePrimitive> S-Prim-mul, [1]: x_specific, [2]: [CNode]64}
#  23: @↓fastreid_modeling_backbones_meta_dynamic_router_resnet_ResNet_construct.8:[CNode]66{[0]: ValueNode<Primitive> getattr, [1]: [CNode]65, [2]: ValueNode<StringImm> sum}
#  24: @↓fastreid_modeling_backbones_meta_dynamic_router_resnet_ResNet_construct.8:x_specific{[0]: [CNode]66, [1]: ValueNode<Int64Imm> 1}
#  25: @↓fastreid_modeling_backbones_meta_dynamic_router_resnet_ResNet_construct.8:x_invariant{[0]: ValueNode<FuncGraph> fastreid_modeling_ops_MetaBNNorm_construct.67, [1]: x_invariant, [2]: ValueNode<None> None}
#  26: @↓fastreid_modeling_backbones_meta_dynamic_router_resnet_ResNet_construct.8:x_specific{[0]: ValueNode<FuncGraph> fastreid_modeling_ops_MetaBNNorm_construct.68, [1]: x_specific, [2]: ValueNode<None> None}
#  27: @↓fastreid_modeling_backbones_meta_dynamic_router_resnet_ResNet_construct.8:x{[0]: ValueNode<FuncGraph> fastreid_modeling_ops_MetaGate_construct.69, [1]: x_invariant, [2]: x_specific, [3]: ValueNode<None> None}
#  28: @↓fastreid_modeling_backbones_meta_dynamic_router_resnet_ResNet_construct.8:x{[0]: ValueNode<FuncGraph> fastreid_modeling_backbones_meta_dynamic_router_resnet_MetaSELayer_construct.70, [1]: x, [2]: ValueNode<None> None}
#  29: @↓fastreid_modeling_backbones_meta_dynamic_router_resnet_ResNet_construct.8:[CNode]71{[0]: ValueNode<FuncGraph> mindspore_nn_layer_pooling_AdaptiveAvgPool2d_construct.72, [1]: x}
#  30: @↓fastreid_modeling_backbones_meta_dynamic_router_resnet_ResNet_construct.8:temp{[0]: ValueNode<FuncGraph> fastreid_modeling_ops_MetaBNNorm_construct.73, [1]: [CNode]71, [2]: ValueNode<None> None}
#  31: @↓fastreid_modeling_backbones_meta_dynamic_router_resnet_ResNet_construct.8:[CNode]74{[0]: ValueNode<DoSignaturePrimitive> S-Prim-MakeTuple, [1]: ValueNode<StringImm> axis}
#  32: @↓fastreid_modeling_backbones_meta_dynamic_router_resnet_ResNet_construct.8:[CNode]75{[0]: ValueNode<DoSignaturePrimitive> S-Prim-MakeTuple, [1]: ValueNode<Int64Imm> 1}
#  33: @↓fastreid_modeling_backbones_meta_dynamic_router_resnet_ResNet_construct.8:[CNode]76{[0]: ValueNode<DoSignaturePrimitive> S-Prim-make_dict, [1]: [CNode]74, [2]: [CNode]75}
#  34: @↓fastreid_modeling_backbones_meta_dynamic_router_resnet_ResNet_construct.8:l2_normalize{[0]: ValueNode<UnpackCall> MetaFuncGraph-unpack_call.77, [1]: ValueNode<ClassType> class 'mindspore.ops.operations.nn_ops.L2Normalize', [2]: [CNode]76}
#  35: @↓fastreid_modeling_backbones_meta_dynamic_router_resnet_ResNet_construct.8:x_normalized{[0]: l2_normalize, [1]: temp}
#  36: @↓fastreid_modeling_backbones_meta_dynamic_router_resnet_ResNet_construct.8:[CNode]78{[0]: ValueNode<Primitive> getattr, [1]: ValueNode<ValueList> [], [2]: ValueNode<StringImm> append}
#  37: @↓fastreid_modeling_backbones_meta_dynamic_router_resnet_ResNet_construct.8:[CNode]79{[0]: ValueNode<DoSignaturePrimitive> S-Prim-MakeTuple, [1]: ValueNode<Ellipsis> Ellipsis, [2]: ValueNode<Int64Imm> 0, [3]: ValueNode<Int64Imm> 0}
#  38: @↓fastreid_modeling_backbones_meta_dynamic_router_resnet_ResNet_construct.8:[CNode]80{[0]: ValueNode<DoSignaturePrimitive> S-Prim-getitem, [1]: x_normalized, [2]: [CNode]79}
#  39: @↓fastreid_modeling_backbones_meta_dynamic_router_resnet_ResNet_construct.8:out_features{[0]: [CNode]78, [1]: [CNode]80}
#  40: @↓fastreid_modeling_backbones_meta_dynamic_router_resnet_ResNet_construct.8:[CNode]45{[0]: ValueNode<DoSignaturePrimitive> S-Prim-inner_len, [1]: NL_1_idx}
#  41: @↓fastreid_modeling_backbones_meta_dynamic_router_resnet_ResNet_construct.8:[CNode]46{[0]: ValueNode<DoSignaturePrimitive> S-Prim-equal, [1]: [CNode]45, [2]: ValueNode<Int64Imm> 0}
#  42: @↓fastreid_modeling_backbones_meta_dynamic_router_resnet_ResNet_construct.8:[CNode]47{[0]: ValueNode<Primitive> Cond, [1]: [CNode]46, [2]: ValueNode<BoolImm> false}
#  43: @↓fastreid_modeling_backbones_meta_dynamic_router_resnet_ResNet_construct.8:[CNode]48{[0]: ValueNode<Primitive> Switch, [1]: [CNode]47, [2]: ValueNode<FuncGraph> ✓↓fastreid_modeling_backbones_meta_dynamic_router_resnet_ResNet_construct.49, [3]: ValueNode<FuncGraph> ✗↓fastreid_modeling_backbones_meta_dynamic_router_resnet_ResNet_construct.50}
#  44: @↓fastreid_modeling_backbones_meta_dynamic_router_resnet_ResNet_construct.8:[CNode]51{[0]: [CNode]48}
#  45: @↓fastreid_modeling_backbones_meta_dynamic_router_resnet_ResNet_construct.8:[CNode]81{[0]: ValueNode<Primitive> Return, [1]: [CNode]52}


subgraph attr:
training : 0
subgraph instance: fastreid_modeling_ops_MetaBNNorm_construct.9 : 0x55f1da7fba40
# In file /home/yuming/ACL-DGReID-mindspore/fastreid/modeling/ops.py:220/    def construct(self, inputs, opt = None, reserve = False):/
subgraph @fastreid_modeling_ops_MetaBNNorm_construct.9 parent: [subgraph @fastreid_modeling_backbones_meta_dynamic_router_resnet_ResNet_construct.6](%para385_inputs, %para386_opt) {

#------------------------> 3
  %1([CNode]83) = call @L-fastreid_modeling_ops_MetaBNNorm_construct.82(%para385_inputs, %para386_opt, Bool(0), %para30_bn1.gamma, %para31_bn1.beta, %para49_bn1.moving_mean, %para50_bn1.moving_variance)
      : (<Tensor[Float32], (8, 64, 8, 8)>, <None, NoShape>, <Bool, NoShape>, <Ref[Tensor[Float32]], (64)>, <Ref[Tensor[Float32]], (64)>, <Ref[Tensor[Float32]], (64)>, <Ref[Tensor[Float32]], (64)>) -> (<null>)
      #scope: (Default)
  Return(%1)
      : (<null>)
      #scope: (Default/bn1-MetaBNNorm)
      # In file /home/yuming/ACL-DGReID-mindspore/fastreid/modeling/ops.py:221/        if inputs.dim() != 4:/
}
# Order:
#   1: @fastreid_modeling_ops_MetaBNNorm_construct.9:[CNode]83{[0]: ValueNode<FuncGraph> L-fastreid_modeling_ops_MetaBNNorm_construct.82, [1]: inputs, [2]: opt, [3]: ValueNode<BoolImm> false, [4]: bn1.gamma, [5]: bn1.beta, [6]: bn1.moving_mean, [7]: bn1.moving_variance}
#   2: @fastreid_modeling_ops_MetaBNNorm_construct.9:[CNode]84{[0]: ValueNode<Primitive> Return, [1]: [CNode]83}


subgraph attr:
training : 0
subgraph instance: L-fastreid_modeling_ops_MetaBNNorm_construct.10 : 0x55f1d80de1e0
# In file /home/yuming/ACL-DGReID-mindspore/fastreid/modeling/ops.py:220/    def construct(self, inputs, opt = None, reserve = False):/
subgraph @L-fastreid_modeling_ops_MetaBNNorm_construct.10(%para387_inputs, %para388_opt, %para389_reserve, %para390_, %para391_, %para392_, %para393_) {
  %1([CNode]85) = getattr(%para387_inputs, "dim")
      : (<Tensor[Float32], (8, 64, 8, 8)>, <String, NoShape>) -> (<Func, NoShape>)
      #scope: (Default/bn1-MetaBNNorm)
      # In file /home/yuming/ACL-DGReID-mindspore/fastreid/modeling/ops.py:221/        if inputs.dim() != 4:/
  %2([CNode]86) = %1()
      #scope: (Default/bn1-MetaBNNorm)
      # In file /home/yuming/ACL-DGReID-mindspore/fastreid/modeling/ops.py:221/        if inputs.dim() != 4:/
  %3([CNode]87) = S-Prim-not_equal(%2, I64(4))
      : (<Int64, NoShape>, <Int64, NoShape>) -> (<Bool, NoShape>)
      #scope: (Default/bn1-MetaBNNorm)
      # In file /home/yuming/ACL-DGReID-mindspore/fastreid/modeling/ops.py:221/        if inputs.dim() != 4:/
  %4([CNode]88) = Cond(%3, Bool(0))
      : (<Bool, NoShape>, <Bool, NoShape>) -> (<Bool, NoShape>)
      #scope: (Default/bn1-MetaBNNorm)
      # In file /home/yuming/ACL-DGReID-mindspore/fastreid/modeling/ops.py:221/        if inputs.dim() != 4:/
  %5([CNode]89) = Switch(%4, call @L-✓fastreid_modeling_ops_MetaBNNorm_construct.90, call @L-✗fastreid_modeling_ops_MetaBNNorm_construct.11)
      : (<Bool, NoShape>, <Func, NoShape>, <Func, NoShape>) -> (<Func, NoShape>)
      #scope: (Default/bn1-MetaBNNorm)
      # In file /home/yuming/ACL-DGReID-mindspore/fastreid/modeling/ops.py:221/        if inputs.dim() != 4:/

#------------------------> 4
  %6([CNode]91) = %5()
      #scope: (Default/bn1-MetaBNNorm)
      # In file /home/yuming/ACL-DGReID-mindspore/fastreid/modeling/ops.py:221/        if inputs.dim() != 4:/
  Return(%6)
      : (<null>)
      #scope: (Default/bn1-MetaBNNorm)
      # In file /home/yuming/ACL-DGReID-mindspore/fastreid/modeling/ops.py:221/        if inputs.dim() != 4:/
}
# Order:
#   1: @L-fastreid_modeling_ops_MetaBNNorm_construct.10:[CNode]85{[0]: ValueNode<Primitive> getattr, [1]: inputs, [2]: ValueNode<StringImm> dim}
#   2: @L-fastreid_modeling_ops_MetaBNNorm_construct.10:[CNode]86{[0]: [CNode]85}
#   3: @L-fastreid_modeling_ops_MetaBNNorm_construct.10:[CNode]87{[0]: ValueNode<DoSignaturePrimitive> S-Prim-not_equal, [1]: [CNode]86, [2]: ValueNode<Int64Imm> 4}
#   4: @L-fastreid_modeling_ops_MetaBNNorm_construct.10:[CNode]88{[0]: ValueNode<Primitive> Cond, [1]: [CNode]87, [2]: ValueNode<BoolImm> false}
#   5: @L-fastreid_modeling_ops_MetaBNNorm_construct.10:[CNode]89{[0]: ValueNode<Primitive> Switch, [1]: [CNode]88, [2]: ValueNode<FuncGraph> L-✓fastreid_modeling_ops_MetaBNNorm_construct.90, [3]: ValueNode<FuncGraph> L-✗fastreid_modeling_ops_MetaBNNorm_construct.11}
#   6: @L-fastreid_modeling_ops_MetaBNNorm_construct.10:[CNode]91{[0]: [CNode]89}
#   7: @L-fastreid_modeling_ops_MetaBNNorm_construct.10:[CNode]84{[0]: ValueNode<Primitive> Return, [1]: [CNode]91}
#   8: @L-fastreid_modeling_ops_MetaBNNorm_construct.10:[CNode]92{[0]: ValueNode<Primitive> resolve, [1]: ValueNode<NameSpace> ClassMember: 'Namespace:fastreid.modeling.ops..<MetaBNNorm::139659263711488>', [2]: ValueNode<Symbol> w_step_size}
#   9: @L-fastreid_modeling_ops_MetaBNNorm_construct.10:[CNode]93{[0]: ValueNode<Primitive> resolve, [1]: ValueNode<NameSpace> ClassMember: 'Namespace:fastreid.modeling.ops..<MetaBNNorm::139659263711488>', [2]: ValueNode<Symbol> b_step_size}


subgraph attr:
training : 0
subgraph instance: L-✗fastreid_modeling_ops_MetaBNNorm_construct.11 : 0x55f1d7e27d80
# In file /home/yuming/ACL-DGReID-mindspore/fastreid/modeling/ops.py:221/        if inputs.dim() != 4:/
subgraph @L-✗fastreid_modeling_ops_MetaBNNorm_construct.11 parent: [subgraph @L-fastreid_modeling_ops_MetaBNNorm_construct.10]() {

#------------------------> 5
  %1([CNode]94) = call @L-↓fastreid_modeling_ops_MetaBNNorm_construct.12()
      #scope: (Default/bn1-MetaBNNorm)
      # In file /home/yuming/ACL-DGReID-mindspore/fastreid/modeling/ops.py:221/        if inputs.dim() != 4:/
  Return(%1)
      : (<null>)
      #scope: (Default/bn1-MetaBNNorm)
      # In file /home/yuming/ACL-DGReID-mindspore/fastreid/modeling/ops.py:221/        if inputs.dim() != 4:/
}
# Order:
#   1: @L-✗fastreid_modeling_ops_MetaBNNorm_construct.11:[CNode]94{[0]: ValueNode<FuncGraph> L-↓fastreid_modeling_ops_MetaBNNorm_construct.12}
#   2: @L-✗fastreid_modeling_ops_MetaBNNorm_construct.11:[CNode]95{[0]: ValueNode<Primitive> Return, [1]: [CNode]94}


subgraph attr:
after_block : 1
training : 0
subgraph instance: L-↓fastreid_modeling_ops_MetaBNNorm_construct.12 : 0x55f1da5d0b40
# In file /home/yuming/ACL-DGReID-mindspore/fastreid/modeling/ops.py:221/        if inputs.dim() != 4:/
subgraph @L-↓fastreid_modeling_ops_MetaBNNorm_construct.12 parent: [subgraph @L-fastreid_modeling_ops_MetaBNNorm_construct.10]() {
  %1([CNode]96) = S-Prim-not_equal(%para388_opt, None)
      : (<None, NoShape>, <None, NoShape>) -> (<Bool, NoShape>)
      #scope: (Default/bn1-MetaBNNorm)
      # In file /home/yuming/ACL-DGReID-mindspore/fastreid/modeling/ops.py:223/        if opt != None and opt['meta']:/
  %2([CNode]97) = Cond(%1, Bool(0))
      : (<Bool, NoShape>, <Bool, NoShape>) -> (<Bool, NoShape>)
      #scope: (Default/bn1-MetaBNNorm)
      # In file /home/yuming/ACL-DGReID-mindspore/fastreid/modeling/ops.py:223/        if opt != None and opt['meta']:/
  %3([CNode]98) = Switch(%2, call @L-↰↓fastreid_modeling_ops_MetaBNNorm_construct.99, call @L-↱↓fastreid_modeling_ops_MetaBNNorm_construct.100)
      : (<Bool, NoShape>, <Func, NoShape>, <Func, NoShape>) -> (<Func, NoShape>)
      #scope: (Default/bn1-MetaBNNorm)
      # In file /home/yuming/ACL-DGReID-mindspore/fastreid/modeling/ops.py:223/        if opt != None and opt['meta']:/
  %4([CNode]101) = %3()
      #scope: (Default/bn1-MetaBNNorm)
      # In file /home/yuming/ACL-DGReID-mindspore/fastreid/modeling/ops.py:223/        if opt != None and opt['meta']:/
  %5([CNode]102) = Cond(%4, Bool(0))
      : (<Bool, NoShape>, <Bool, NoShape>) -> (<Bool, NoShape>)
      #scope: (Default/bn1-MetaBNNorm)
      # In file /home/yuming/ACL-DGReID-mindspore/fastreid/modeling/ops.py:223/        if opt != None and opt['meta']:/
  %6([CNode]103) = Switch(%5, call @L-✓↓fastreid_modeling_ops_MetaBNNorm_construct.104, call @L-✗↓fastreid_modeling_ops_MetaBNNorm_construct.13)
      : (<Bool, NoShape>, <Func, NoShape>, <Func, NoShape>) -> (<Func, NoShape>)
      #scope: (Default/bn1-MetaBNNorm)
      # In file /home/yuming/ACL-DGReID-mindspore/fastreid/modeling/ops.py:223/        if opt != None and opt['meta']:/

#------------------------> 6
  %7([CNode]105) = %6()
      #scope: (Default/bn1-MetaBNNorm)
      # In file /home/yuming/ACL-DGReID-mindspore/fastreid/modeling/ops.py:223/        if opt != None and opt['meta']:/
  Return(%7)
      : (<null>)
      #scope: (Default/bn1-MetaBNNorm)
      # In file /home/yuming/ACL-DGReID-mindspore/fastreid/modeling/ops.py:223/        if opt != None and opt['meta']:/
}
# Order:
#   1: @L-↓fastreid_modeling_ops_MetaBNNorm_construct.12:[CNode]96{[0]: ValueNode<DoSignaturePrimitive> S-Prim-not_equal, [1]: opt, [2]: ValueNode<None> None}
#   2: @L-↓fastreid_modeling_ops_MetaBNNorm_construct.12:[CNode]97{[0]: ValueNode<Primitive> Cond, [1]: [CNode]96, [2]: ValueNode<BoolImm> false}
#   3: @L-↓fastreid_modeling_ops_MetaBNNorm_construct.12:[CNode]98{[0]: ValueNode<Primitive> Switch, [1]: [CNode]97, [2]: ValueNode<FuncGraph> L-↰↓fastreid_modeling_ops_MetaBNNorm_construct.99, [3]: ValueNode<FuncGraph> L-↱↓fastreid_modeling_ops_MetaBNNorm_construct.100}
#   4: @L-↓fastreid_modeling_ops_MetaBNNorm_construct.12:[CNode]101{[0]: [CNode]98}
#   5: @L-↓fastreid_modeling_ops_MetaBNNorm_construct.12:[CNode]102{[0]: ValueNode<Primitive> Cond, [1]: [CNode]101, [2]: ValueNode<BoolImm> false}
#   6: @L-↓fastreid_modeling_ops_MetaBNNorm_construct.12:[CNode]103{[0]: ValueNode<Primitive> Switch, [1]: [CNode]102, [2]: ValueNode<FuncGraph> L-✓↓fastreid_modeling_ops_MetaBNNorm_construct.104, [3]: ValueNode<FuncGraph> L-✗↓fastreid_modeling_ops_MetaBNNorm_construct.13}
#   7: @L-↓fastreid_modeling_ops_MetaBNNorm_construct.12:[CNode]105{[0]: [CNode]103}
#   8: @L-↓fastreid_modeling_ops_MetaBNNorm_construct.12:[CNode]106{[0]: ValueNode<Primitive> Return, [1]: [CNode]105}


subgraph attr:
training : 0
subgraph instance: L-✗↓fastreid_modeling_ops_MetaBNNorm_construct.13 : 0x55f1da1e1740
# In file /home/yuming/ACL-DGReID-mindspore/fastreid/modeling/ops.py:223/        if opt != None and opt['meta']:/
subgraph @L-✗↓fastreid_modeling_ops_MetaBNNorm_construct.13 parent: [subgraph @L-fastreid_modeling_ops_MetaBNNorm_construct.10]() {

#------------------------> 7
  %1([CNode]107) = call @L-↓↓fastreid_modeling_ops_MetaBNNorm_construct.14(Bool(0))
      : (<Bool, NoShape>) -> (<null>)
      #scope: (Default)
      # In file /home/yuming/ACL-DGReID-mindspore/fastreid/modeling/backbones/meta_dynamic_router_resnet.py:444/        x = self.bn1(x, opt)/
  Return(%1)
      : (<null>)
      #scope: (Default/bn1-MetaBNNorm)
      # In file /home/yuming/ACL-DGReID-mindspore/fastreid/modeling/ops.py:226/            use_meta_learning = False/
}
# Order:
#   1: @L-✗↓fastreid_modeling_ops_MetaBNNorm_construct.13:[CNode]108{[0]: ValueNode<Primitive> Return, [1]: [CNode]107}
#   2: @L-✗↓fastreid_modeling_ops_MetaBNNorm_construct.13:[CNode]107{[0]: ValueNode<FuncGraph> L-↓↓fastreid_modeling_ops_MetaBNNorm_construct.14, [1]: ValueNode<BoolImm> false}


subgraph attr:
after_block : 1
training : 0
subgraph instance: L-↓↓fastreid_modeling_ops_MetaBNNorm_construct.14 : 0x55f1da9699f0
# In file /home/yuming/ACL-DGReID-mindspore/fastreid/modeling/ops.py:223/        if opt != None and opt['meta']:/
subgraph @L-↓↓fastreid_modeling_ops_MetaBNNorm_construct.14 parent: [subgraph @L-fastreid_modeling_ops_MetaBNNorm_construct.10](%para394_) {
  %1([CNode]109) = Cond(Bool(0), Bool(0))
      : (<Bool, NoShape>, <Bool, NoShape>) -> (<Bool, NoShape>)
      #scope: (Default/bn1-MetaBNNorm)
      # In file /home/yuming/ACL-DGReID-mindspore/fastreid/modeling/ops.py:228/        if self.training:/
  %2([CNode]110) = Switch(%1, call @L-✓↓↓fastreid_modeling_ops_MetaBNNorm_construct.111, call @L-✗↓↓fastreid_modeling_ops_MetaBNNorm_construct.112)
      : (<Bool, NoShape>, <Func, NoShape>, <Func, NoShape>) -> (<Func, NoShape>)
      #scope: (Default/bn1-MetaBNNorm)
      # In file /home/yuming/ACL-DGReID-mindspore/fastreid/modeling/ops.py:228/        if self.training:/
  %3([CNode]113) = %2()
      #scope: (Default/bn1-MetaBNNorm)
      # In file /home/yuming/ACL-DGReID-mindspore/fastreid/modeling/ops.py:228/        if self.training:/

#------------------------> 8
  %4([CNode]114) = call @L-↓↓↓fastreid_modeling_ops_MetaBNNorm_construct.15(%3)
      : (<String, NoShape>) -> (<null>)
      #scope: (Default)
      # In file /home/yuming/ACL-DGReID-mindspore/fastreid/modeling/backbones/meta_dynamic_router_resnet.py:444/        x = self.bn1(x, opt)/
  Return(%4)
      : (<null>)
      #scope: (Default/bn1-MetaBNNorm)
      # In file /home/yuming/ACL-DGReID-mindspore/fastreid/modeling/ops.py:228/        if self.training:/
}
# Order:
#   1: @L-↓↓fastreid_modeling_ops_MetaBNNorm_construct.14:[CNode]109{[0]: ValueNode<Primitive> Cond, [1]: ValueNode<BoolImm> false, [2]: ValueNode<BoolImm> false}
#   2: @L-↓↓fastreid_modeling_ops_MetaBNNorm_construct.14:[CNode]110{[0]: ValueNode<Primitive> Switch, [1]: [CNode]109, [2]: ValueNode<FuncGraph> L-✓↓↓fastreid_modeling_ops_MetaBNNorm_construct.111, [3]: ValueNode<FuncGraph> L-✗↓↓fastreid_modeling_ops_MetaBNNorm_construct.112}
#   3: @L-↓↓fastreid_modeling_ops_MetaBNNorm_construct.14:[CNode]113{[0]: [CNode]110}
#   4: @L-↓↓fastreid_modeling_ops_MetaBNNorm_construct.14:[CNode]114{[0]: ValueNode<FuncGraph> L-↓↓↓fastreid_modeling_ops_MetaBNNorm_construct.15, [1]: [CNode]113}
#   5: @L-↓↓fastreid_modeling_ops_MetaBNNorm_construct.14:[CNode]115{[0]: ValueNode<Primitive> Return, [1]: [CNode]114}


subgraph attr:
after_block : 1
training : 0
subgraph instance: L-↓↓↓fastreid_modeling_ops_MetaBNNorm_construct.15 : 0x55f1d79b5810
# In file /home/yuming/ACL-DGReID-mindspore/fastreid/modeling/ops.py:228/        if self.training:/
subgraph @L-↓↓↓fastreid_modeling_ops_MetaBNNorm_construct.15 parent: [subgraph @L-↓↓fastreid_modeling_ops_MetaBNNorm_construct.14](%para395_) {
  %1([CNode]116) = Cond(%para394_фuse_meta_learning, Bool(0))
      : (<Bool, NoShape>, <Bool, NoShape>) -> (<Bool, NoShape>)
      #scope: (Default/bn1-MetaBNNorm)
      # In file /home/yuming/ACL-DGReID-mindspore/fastreid/modeling/ops.py:236/        if use_meta_learning and self.affine:/
  %2([CNode]117) = Switch(%1, call @L-↰↓↓↓fastreid_modeling_ops_MetaBNNorm_construct.118, call @L-↱↓↓↓fastreid_modeling_ops_MetaBNNorm_construct.119)
      : (<Bool, NoShape>, <Func, NoShape>, <Func, NoShape>) -> (<Func, NoShape>)
      #scope: (Default/bn1-MetaBNNorm)
      # In file /home/yuming/ACL-DGReID-mindspore/fastreid/modeling/ops.py:236/        if use_meta_learning and self.affine:/
  %3([CNode]120) = %2()
      #scope: (Default/bn1-MetaBNNorm)
      # In file /home/yuming/ACL-DGReID-mindspore/fastreid/modeling/ops.py:236/        if use_meta_learning and self.affine:/
  %4([CNode]121) = Cond(%3, Bool(0))
      : (<Bool, NoShape>, <Bool, NoShape>) -> (<Bool, NoShape>)
      #scope: (Default/bn1-MetaBNNorm)
      # In file /home/yuming/ACL-DGReID-mindspore/fastreid/modeling/ops.py:236/        if use_meta_learning and self.affine:/
  %5([CNode]122) = Switch(%4, call @L-✓↓↓↓fastreid_modeling_ops_MetaBNNorm_construct.123, call @L-✗↓↓↓fastreid_modeling_ops_MetaBNNorm_construct.124)
      : (<Bool, NoShape>, <Func, NoShape>, <Func, NoShape>) -> (<Func, NoShape>)
      #scope: (Default/bn1-MetaBNNorm)
      # In file /home/yuming/ACL-DGReID-mindspore/fastreid/modeling/ops.py:236/        if use_meta_learning and self.affine:/
  %6([CNode]125) = %5()
      #scope: (Default/bn1-MetaBNNorm)
      # In file /home/yuming/ACL-DGReID-mindspore/fastreid/modeling/ops.py:236/        if use_meta_learning and self.affine:/
  %7([CNode]126) = TupleGetItem(%6, I64(0))
      : (<Tuple[Ref[Tensor[Float32]]*2], TupleShape((64), (64))>, <Int64, NoShape>) -> (<Ref[Tensor[Float32]], (64)>)
      #scope: (Default)
      # In file /home/yuming/ACL-DGReID-mindspore/fastreid/modeling/backbones/meta_dynamic_router_resnet.py:444/        x = self.bn1(x, opt)/
  %8([CNode]127) = TupleGetItem(%6, I64(1))
      : (<Tuple[Ref[Tensor[Float32]]*2], TupleShape((64), (64))>, <Int64, NoShape>) -> (<Ref[Tensor[Float32]], (64)>)
      #scope: (Default)
      # In file /home/yuming/ACL-DGReID-mindspore/fastreid/modeling/backbones/meta_dynamic_router_resnet.py:444/        x = self.bn1(x, opt)/

#------------------------> 9
  %9([CNode]128) = call @L-↓↓↓↓fastreid_modeling_ops_MetaBNNorm_construct.16(%7, %8)
      : (<Ref[Tensor[Float32]], (64)>, <Ref[Tensor[Float32]], (64)>) -> (<null>)
      #scope: (Default)
      # In file /home/yuming/ACL-DGReID-mindspore/fastreid/modeling/backbones/meta_dynamic_router_resnet.py:444/        x = self.bn1(x, opt)/
  Return(%9)
      : (<null>)
      #scope: (Default/bn1-MetaBNNorm)
      # In file /home/yuming/ACL-DGReID-mindspore/fastreid/modeling/ops.py:236/        if use_meta_learning and self.affine:/
}
# Order:
#   1: @L-↓↓↓fastreid_modeling_ops_MetaBNNorm_construct.15:[CNode]116{[0]: ValueNode<Primitive> Cond, [1]: фuse_meta_learning, [2]: ValueNode<BoolImm> false}
#   2: @L-↓↓↓fastreid_modeling_ops_MetaBNNorm_construct.15:[CNode]117{[0]: ValueNode<Primitive> Switch, [1]: [CNode]116, [2]: ValueNode<FuncGraph> L-↰↓↓↓fastreid_modeling_ops_MetaBNNorm_construct.118, [3]: ValueNode<FuncGraph> L-↱↓↓↓fastreid_modeling_ops_MetaBNNorm_construct.119}
#   3: @L-↓↓↓fastreid_modeling_ops_MetaBNNorm_construct.15:[CNode]120{[0]: [CNode]117}
#   4: @L-↓↓↓fastreid_modeling_ops_MetaBNNorm_construct.15:[CNode]121{[0]: ValueNode<Primitive> Cond, [1]: [CNode]120, [2]: ValueNode<BoolImm> false}
#   5: @L-↓↓↓fastreid_modeling_ops_MetaBNNorm_construct.15:[CNode]122{[0]: ValueNode<Primitive> Switch, [1]: [CNode]121, [2]: ValueNode<FuncGraph> L-✓↓↓↓fastreid_modeling_ops_MetaBNNorm_construct.123, [3]: ValueNode<FuncGraph> L-✗↓↓↓fastreid_modeling_ops_MetaBNNorm_construct.124}
#   6: @L-↓↓↓fastreid_modeling_ops_MetaBNNorm_construct.15:[CNode]125{[0]: [CNode]122}
#   7: @L-↓↓↓fastreid_modeling_ops_MetaBNNorm_construct.15:[CNode]128{[0]: ValueNode<FuncGraph> L-↓↓↓↓fastreid_modeling_ops_MetaBNNorm_construct.16, [1]: [CNode]126, [2]: [CNode]127}
#   8: @L-↓↓↓fastreid_modeling_ops_MetaBNNorm_construct.15:[CNode]129{[0]: ValueNode<Primitive> Return, [1]: [CNode]128}
#   9: @L-↓↓↓fastreid_modeling_ops_MetaBNNorm_construct.15:[CNode]126{[0]: ValueNode<Primitive> TupleGetItem, [1]: [CNode]125, [2]: ValueNode<Int64Imm> 0}
#  10: @L-↓↓↓fastreid_modeling_ops_MetaBNNorm_construct.15:[CNode]127{[0]: ValueNode<Primitive> TupleGetItem, [1]: [CNode]125, [2]: ValueNode<Int64Imm> 1}


subgraph attr:
after_block : 1
training : 0
subgraph instance: L-↓↓↓↓fastreid_modeling_ops_MetaBNNorm_construct.16 : 0x55f1dab1f410
# In file /home/yuming/ACL-DGReID-mindspore/fastreid/modeling/ops.py:236/        if use_meta_learning and self.affine:/
subgraph @L-↓↓↓↓fastreid_modeling_ops_MetaBNNorm_construct.16 parent: [subgraph @L-↓↓↓fastreid_modeling_ops_MetaBNNorm_construct.15](%para396_, %para397_) {
  %1([CNode]130) = S-Prim-equal(%para395_фnorm_type, "general")
      : (<String, NoShape>, <String, NoShape>) -> (<Bool, NoShape>)
      #scope: (Default/bn1-MetaBNNorm)
      # In file /home/yuming/ACL-DGReID-mindspore/fastreid/modeling/ops.py:247/        if norm_type == "general": # update, but not apply running_mean/var/
  %2([CNode]131) = Cond(%1, Bool(0))
      : (<Bool, NoShape>, <Bool, NoShape>) -> (<Bool, NoShape>)
      #scope: (Default/bn1-MetaBNNorm)
      # In file /home/yuming/ACL-DGReID-mindspore/fastreid/modeling/ops.py:247/        if norm_type == "general": # update, but not apply running_mean/var/
  %3([CNode]132) = Switch(%2, call @L-✓↓↓↓↓fastreid_modeling_ops_MetaBNNorm_construct.133, call @L-✗↓↓↓↓fastreid_modeling_ops_MetaBNNorm_construct.17)
      : (<Bool, NoShape>, <Func, NoShape>, <Func, NoShape>) -> (<Func, NoShape>)
      #scope: (Default/bn1-MetaBNNorm)
      # In file /home/yuming/ACL-DGReID-mindspore/fastreid/modeling/ops.py:247/        if norm_type == "general": # update, but not apply running_mean/var/

#------------------------> 10
  %4([CNode]134) = %3()
      #scope: (Default/bn1-MetaBNNorm)
      # In file /home/yuming/ACL-DGReID-mindspore/fastreid/modeling/ops.py:247/        if norm_type == "general": # update, but not apply running_mean/var/
  %5([CNode]136) = call @L-↓↓↓↓↓fastreid_modeling_ops_MetaBNNorm_construct.135(%4)
      : (<null>) -> (<null>)
      #scope: (Default)
      # In file /home/yuming/ACL-DGReID-mindspore/fastreid/modeling/backbones/meta_dynamic_router_resnet.py:444/        x = self.bn1(x, opt)/
  Return(%5)
      : (<null>)
      #scope: (Default/bn1-MetaBNNorm)
      # In file /home/yuming/ACL-DGReID-mindspore/fastreid/modeling/ops.py:247/        if norm_type == "general": # update, but not apply running_mean/var/
}
# Order:
#   1: @L-↓↓↓↓fastreid_modeling_ops_MetaBNNorm_construct.16:[CNode]130{[0]: ValueNode<DoSignaturePrimitive> S-Prim-equal, [1]: фnorm_type, [2]: ValueNode<StringImm> general}
#   2: @L-↓↓↓↓fastreid_modeling_ops_MetaBNNorm_construct.16:[CNode]131{[0]: ValueNode<Primitive> Cond, [1]: [CNode]130, [2]: ValueNode<BoolImm> false}
#   3: @L-↓↓↓↓fastreid_modeling_ops_MetaBNNorm_construct.16:[CNode]132{[0]: ValueNode<Primitive> Switch, [1]: [CNode]131, [2]: ValueNode<FuncGraph> L-✓↓↓↓↓fastreid_modeling_ops_MetaBNNorm_construct.133, [3]: ValueNode<FuncGraph> L-✗↓↓↓↓fastreid_modeling_ops_MetaBNNorm_construct.17}
#   4: @L-↓↓↓↓fastreid_modeling_ops_MetaBNNorm_construct.16:[CNode]134{[0]: [CNode]132}
#   5: @L-↓↓↓↓fastreid_modeling_ops_MetaBNNorm_construct.16:[CNode]136{[0]: ValueNode<FuncGraph> L-↓↓↓↓↓fastreid_modeling_ops_MetaBNNorm_construct.135, [1]: [CNode]134}
#   6: @L-↓↓↓↓fastreid_modeling_ops_MetaBNNorm_construct.16:[CNode]137{[0]: ValueNode<Primitive> Return, [1]: [CNode]136}


subgraph attr:
training : 0
subgraph instance: L-✗↓↓↓↓fastreid_modeling_ops_MetaBNNorm_construct.17 : 0x55f1da9e9e40
# In file /home/yuming/ACL-DGReID-mindspore/fastreid/modeling/ops.py:247/        if norm_type == "general": # update, but not apply running_mean/var/
subgraph @L-✗↓↓↓↓fastreid_modeling_ops_MetaBNNorm_construct.17 parent: [subgraph @L-↓↓↓↓fastreid_modeling_ops_MetaBNNorm_construct.16]() {
  %1([CNode]138) = S-Prim-equal(%para395_фnorm_type, "hold")
      : (<String, NoShape>, <String, NoShape>) -> (<Bool, NoShape>)
      #scope: (Default/bn1-MetaBNNorm)
      # In file /home/yuming/ACL-DGReID-mindspore/fastreid/modeling/ops.py:255/        elif norm_type == "hold": # not update, not apply running_mean/var/
  %2([CNode]139) = Cond(%1, Bool(0))
      : (<Bool, NoShape>, <Bool, NoShape>) -> (<Bool, NoShape>)
      #scope: (Default/bn1-MetaBNNorm)
      # In file /home/yuming/ACL-DGReID-mindspore/fastreid/modeling/ops.py:255/        elif norm_type == "hold": # not update, not apply running_mean/var/
  %3([CNode]140) = Switch(%2, call @L-✓✗↓↓↓↓fastreid_modeling_ops_MetaBNNorm_construct.141, call @L-✗✗↓↓↓↓fastreid_modeling_ops_MetaBNNorm_construct.18)
      : (<Bool, NoShape>, <Func, NoShape>, <Func, NoShape>) -> (<Func, NoShape>)
      #scope: (Default/bn1-MetaBNNorm)
      # In file /home/yuming/ACL-DGReID-mindspore/fastreid/modeling/ops.py:255/        elif norm_type == "hold": # not update, not apply running_mean/var/

#------------------------> 11
  %4([CNode]142) = %3()
      #scope: (Default/bn1-MetaBNNorm)
      # In file /home/yuming/ACL-DGReID-mindspore/fastreid/modeling/ops.py:255/        elif norm_type == "hold": # not update, not apply running_mean/var/
  %5([CNode]144) = call @L-↓✗↓↓↓↓fastreid_modeling_ops_MetaBNNorm_construct.143(%4)
      : (<null>) -> (<null>)
      #scope: (Default)
      # In file /home/yuming/ACL-DGReID-mindspore/fastreid/modeling/backbones/meta_dynamic_router_resnet.py:444/        x = self.bn1(x, opt)/
  Return(%5)
      : (<null>)
      #scope: (Default/bn1-MetaBNNorm)
      # In file /home/yuming/ACL-DGReID-mindspore/fastreid/modeling/ops.py:255/        elif norm_type == "hold": # not update, not apply running_mean/var/
}
# Order:
#   1: @L-✗↓↓↓↓fastreid_modeling_ops_MetaBNNorm_construct.17:[CNode]138{[0]: ValueNode<DoSignaturePrimitive> S-Prim-equal, [1]: фnorm_type, [2]: ValueNode<StringImm> hold}
#   2: @L-✗↓↓↓↓fastreid_modeling_ops_MetaBNNorm_construct.17:[CNode]139{[0]: ValueNode<Primitive> Cond, [1]: [CNode]138, [2]: ValueNode<BoolImm> false}
#   3: @L-✗↓↓↓↓fastreid_modeling_ops_MetaBNNorm_construct.17:[CNode]140{[0]: ValueNode<Primitive> Switch, [1]: [CNode]139, [2]: ValueNode<FuncGraph> L-✓✗↓↓↓↓fastreid_modeling_ops_MetaBNNorm_construct.141, [3]: ValueNode<FuncGraph> L-✗✗↓↓↓↓fastreid_modeling_ops_MetaBNNorm_construct.18}
#   4: @L-✗↓↓↓↓fastreid_modeling_ops_MetaBNNorm_construct.17:[CNode]142{[0]: [CNode]140}
#   5: @L-✗↓↓↓↓fastreid_modeling_ops_MetaBNNorm_construct.17:[CNode]144{[0]: ValueNode<FuncGraph> L-↓✗↓↓↓↓fastreid_modeling_ops_MetaBNNorm_construct.143, [1]: [CNode]142}
#   6: @L-✗↓↓↓↓fastreid_modeling_ops_MetaBNNorm_construct.17:[CNode]145{[0]: ValueNode<Primitive> Return, [1]: [CNode]144}


subgraph attr:
training : 0
subgraph instance: L-✗✗↓↓↓↓fastreid_modeling_ops_MetaBNNorm_construct.18 : 0x55f1da98fc00
# In file /home/yuming/ACL-DGReID-mindspore/fastreid/modeling/ops.py:255/        elif norm_type == "hold": # not update, not apply running_mean/var/
subgraph @L-✗✗↓↓↓↓fastreid_modeling_ops_MetaBNNorm_construct.18 parent: [subgraph @L-↓↓↓↓fastreid_modeling_ops_MetaBNNorm_construct.16]() {
  %1([CNode]146) = S-Prim-equal(%para395_фnorm_type, "eval")
      : (<String, NoShape>, <String, NoShape>) -> (<Bool, NoShape>)
      #scope: (Default/bn1-MetaBNNorm)
      # In file /home/yuming/ACL-DGReID-mindspore/fastreid/modeling/ops.py:263/        elif norm_type == "eval": # fix and apply running_mean/var,/
  %2([CNode]147) = Cond(%1, Bool(0))
      : (<Bool, NoShape>, <Bool, NoShape>) -> (<Bool, NoShape>)
      #scope: (Default/bn1-MetaBNNorm)
      # In file /home/yuming/ACL-DGReID-mindspore/fastreid/modeling/ops.py:263/        elif norm_type == "eval": # fix and apply running_mean/var,/
  %3([CNode]148) = Switch(%2, call @L-✓✗✗↓↓↓↓fastreid_modeling_ops_MetaBNNorm_construct.19, call @L-✗✗✗↓↓↓↓fastreid_modeling_ops_MetaBNNorm_construct.149)
      : (<Bool, NoShape>, <Func, NoShape>, <Func, NoShape>) -> (<Func, NoShape>)
      #scope: (Default/bn1-MetaBNNorm)
      # In file /home/yuming/ACL-DGReID-mindspore/fastreid/modeling/ops.py:263/        elif norm_type == "eval": # fix and apply running_mean/var,/

#------------------------> 12
  %4([CNode]150) = %3()
      #scope: (Default/bn1-MetaBNNorm)
      # In file /home/yuming/ACL-DGReID-mindspore/fastreid/modeling/ops.py:263/        elif norm_type == "eval": # fix and apply running_mean/var,/
  %5([CNode]152) = call @L-↓✗✗↓↓↓↓fastreid_modeling_ops_MetaBNNorm_construct.151(%4)
      : (<null>) -> (<null>)
      #scope: (Default)
      # In file /home/yuming/ACL-DGReID-mindspore/fastreid/modeling/backbones/meta_dynamic_router_resnet.py:444/        x = self.bn1(x, opt)/
  Return(%5)
      : (<null>)
      #scope: (Default/bn1-MetaBNNorm)
      # In file /home/yuming/ACL-DGReID-mindspore/fastreid/modeling/ops.py:263/        elif norm_type == "eval": # fix and apply running_mean/var,/
}
# Order:
#   1: @L-✗✗↓↓↓↓fastreid_modeling_ops_MetaBNNorm_construct.18:[CNode]146{[0]: ValueNode<DoSignaturePrimitive> S-Prim-equal, [1]: фnorm_type, [2]: ValueNode<StringImm> eval}
#   2: @L-✗✗↓↓↓↓fastreid_modeling_ops_MetaBNNorm_construct.18:[CNode]147{[0]: ValueNode<Primitive> Cond, [1]: [CNode]146, [2]: ValueNode<BoolImm> false}
#   3: @L-✗✗↓↓↓↓fastreid_modeling_ops_MetaBNNorm_construct.18:[CNode]148{[0]: ValueNode<Primitive> Switch, [1]: [CNode]147, [2]: ValueNode<FuncGraph> L-✓✗✗↓↓↓↓fastreid_modeling_ops_MetaBNNorm_construct.19, [3]: ValueNode<FuncGraph> L-✗✗✗↓↓↓↓fastreid_modeling_ops_MetaBNNorm_construct.149}
#   4: @L-✗✗↓↓↓↓fastreid_modeling_ops_MetaBNNorm_construct.18:[CNode]150{[0]: [CNode]148}
#   5: @L-✗✗↓↓↓↓fastreid_modeling_ops_MetaBNNorm_construct.18:[CNode]152{[0]: ValueNode<FuncGraph> L-↓✗✗↓↓↓↓fastreid_modeling_ops_MetaBNNorm_construct.151, [1]: [CNode]150}
#   6: @L-✗✗↓↓↓↓fastreid_modeling_ops_MetaBNNorm_construct.18:[CNode]153{[0]: ValueNode<Primitive> Return, [1]: [CNode]152}


subgraph attr:
training : 0
subgraph instance: L-✓✗✗↓↓↓↓fastreid_modeling_ops_MetaBNNorm_construct.19 : 0x55f1dae0c730
# In file /home/yuming/ACL-DGReID-mindspore/fastreid/modeling/ops.py:263/        elif norm_type == "eval": # fix and apply running_mean/var,/
subgraph @L-✓✗✗↓↓↓↓fastreid_modeling_ops_MetaBNNorm_construct.19 parent: [subgraph @L-↓↓↓↓fastreid_modeling_ops_MetaBNNorm_construct.16]() {
  %1([CNode]154) = S-Prim-MakeTuple(I64(64))
      : (<Int64, NoShape>) -> (<Tuple[Int64], TupleShape(NoShape)>)
      #scope: (Default/bn1-MetaBNNorm)
      # In file /home/yuming/ACL-DGReID-mindspore/fastreid/modeling/ops.py:264/            bn = nn.BatchNorm2d(self.num_features, eps=self.eps, momentum=self.momentum, affine=self.affine, gamma_init=self.gamma_init, beta_init=self.beta_init, moving_mean_init=self.moving_mean, moving_var_init=self.moving_variance, use_batch_statistics=False)/
  %2([CNode]155) = S-Prim-MakeTuple("eps", "momentum", "affine", "gamma_init", "beta_init", "moving_mean_init", "moving_var_init", "use_batch_statistics")
      : (<String, NoShape>, <String, NoShape>, <String, NoShape>, <String, NoShape>, <String, NoShape>, <String, NoShape>, <String, NoShape>, <String, NoShape>) -> (<Tuple[String*8], TupleShape(NoShape, NoShape, NoShape, NoShape, NoShape, NoShape, NoShape, NoShape)>)
      #scope: (Default/bn1-MetaBNNorm)
      # In file /home/yuming/ACL-DGReID-mindspore/fastreid/modeling/ops.py:264/            bn = nn.BatchNorm2d(self.num_features, eps=self.eps, momentum=self.momentum, affine=self.affine, gamma_init=self.gamma_init, beta_init=self.beta_init, moving_mean_init=self.moving_mean, moving_var_init=self.moving_variance, use_batch_statistics=False)/
  %3([CNode]156) = S-Prim-MakeTuple(F32(1e-05), F32(0.9), Bool(1), "ones", "zeros", %para392_L-bn1.moving_mean, %para393_L-bn1.moving_variance, Bool(0))
      : (<Float32, NoShape>, <Float32, NoShape>, <Bool, NoShape>, <String, NoShape>, <String, NoShape>, <Ref[Tensor[Float32]], (64)>, <Ref[Tensor[Float32]], (64)>, <Bool, NoShape>) -> (<Tuple[Float32*2,Bool,String*2,Ref[Tensor[Float32]]*2,Bool], TupleShape(NoShape, NoShape, NoShape, NoShape, NoShape, (64), (64), NoShape)>)
      #scope: (Default/bn1-MetaBNNorm)
      # In file /home/yuming/ACL-DGReID-mindspore/fastreid/modeling/ops.py:264/            bn = nn.BatchNorm2d(self.num_features, eps=self.eps, momentum=self.momentum, affine=self.affine, gamma_init=self.gamma_init, beta_init=self.beta_init, moving_mean_init=self.moving_mean, moving_var_init=self.moving_variance, use_batch_statistics=False)/
  %4([CNode]157) = S-Prim-make_dict(%2, %3)
      : (<Tuple[String*8], TupleShape(NoShape, NoShape, NoShape, NoShape, NoShape, NoShape, NoShape, NoShape)>, <Tuple[Float32*2,Bool,String*2,Ref[Tensor[Float32]]*2,Bool], TupleShape(NoShape, NoShape, NoShape, NoShape, NoShape, (64), (64), NoShape)>) -> (<Dictionary[[eps,momentum,affine,gamma_init,beta_init,moving_mean_init,moving_var_init,use_batch_statistics,],[Float32*2,Bool,String*2,Ref[Tensor[Float32]]*2,Bool]], NoShape>)
      #scope: (Default/bn1-MetaBNNorm)
      # In file /home/yuming/ACL-DGReID-mindspore/fastreid/modeling/ops.py:264/            bn = nn.BatchNorm2d(self.num_features, eps=self.eps, momentum=self.momentum, affine=self.affine, gamma_init=self.gamma_init, beta_init=self.beta_init, moving_mean_init=self.moving_mean, moving_var_init=self.moving_variance, use_batch_statistics=False)/

#------------------------> 13
  %5(bn) = UnpackCall-unpack_call(ClassType, %1, %4)
      : (<Func, NoShape>, <Tuple[Int64], TupleShape(NoShape)>, <Dictionary[[eps,momentum,affine,gamma_init,beta_init,moving_mean_init,moving_var_init,use_batch_statistics,],[Float32*2,Bool,String*2,Ref[Tensor[Float32]]*2,Bool]], NoShape>) -> (<null>)
      #scope: (Default/bn1-MetaBNNorm)
      # In file /home/yuming/ACL-DGReID-mindspore/fastreid/modeling/ops.py:264/            bn = nn.BatchNorm2d(self.num_features, eps=self.eps, momentum=self.momentum, affine=self.affine, gamma_init=self.gamma_init, beta_init=self.beta_init, moving_mean_init=self.moving_mean, moving_var_init=self.moving_variance, use_batch_statistics=False)/
  %6(result) = %5(%para387_inputs)
      : (<Tensor[Float32], (8, 64, 8, 8)>) -> (<null>)
      #scope: (Default/bn1-MetaBNNorm)
      # In file /home/yuming/ACL-DGReID-mindspore/fastreid/modeling/ops.py:267/            result = bn(inputs)/
  %7([CNode]158) = setattr[side_effect_io: Bool(1)](%5, "gamma", %para396_фupdated_gamma)
      : (<null>, <null>, <Ref[Tensor[Float32]], (64)>) -> (<null>)
      #scope: (Default/bn1-MetaBNNorm)
      # In file /home/yuming/ACL-DGReID-mindspore/fastreid/modeling/ops.py:265/            bn.gamma = updated_gamma/
  %8([CNode]159) = setattr[side_effect_io: Bool(1)](%5, "beta", %para397_фupdated_beta)
      : (<null>, <null>, <Ref[Tensor[Float32]], (64)>) -> (<null>)
      #scope: (Default/bn1-MetaBNNorm)
      # In file /home/yuming/ACL-DGReID-mindspore/fastreid/modeling/ops.py:266/            bn.beta = updated_beta/
  %9([CNode]160) = MakeTuple(%7, %8)
      : (<null>, <null>) -> (<null>)
      #scope: (Default/bn1-MetaBNNorm)
      # In file /home/yuming/ACL-DGReID-mindspore/fastreid/modeling/backbones/meta_dynamic_router_resnet.py:444/        x = self.bn1(x, opt)/
  %10([CNode]161) = StopGradient(%9)
      : (<null>) -> (<null>)
      #scope: (Default/bn1-MetaBNNorm)
      # In file /home/yuming/ACL-DGReID-mindspore/fastreid/modeling/backbones/meta_dynamic_router_resnet.py:444/        x = self.bn1(x, opt)/
  %11([CNode]162) = Depend[side_effect_propagate: I64(1)](%6, %10)
      : (<null>, <null>) -> (<null>)
      #scope: (Default)
      # In file /home/yuming/ACL-DGReID-mindspore/fastreid/modeling/backbones/meta_dynamic_router_resnet.py:444/        x = self.bn1(x, opt)/
  Return(%11)
      : (<null>)
      #scope: (Default/bn1-MetaBNNorm)
      # In file /home/yuming/ACL-DGReID-mindspore/fastreid/modeling/ops.py:264/            bn = nn.BatchNorm2d(self.num_features, eps=self.eps, momentum=self.momentum, affine=self.affine, gamma_init=self.gamma_init, beta_init=self.beta_init, moving_mean_init=self.moving_mean, moving_var_init=self.moving_variance, use_batch_statistics=False)/
}
# Order:
#   1: @L-✓✗✗↓↓↓↓fastreid_modeling_ops_MetaBNNorm_construct.19:[CNode]154{[0]: ValueNode<DoSignaturePrimitive> S-Prim-MakeTuple, [1]: ValueNode<Int64Imm> 64}
#   2: @L-✓✗✗↓↓↓↓fastreid_modeling_ops_MetaBNNorm_construct.19:[CNode]155{[0]: ValueNode<DoSignaturePrimitive> S-Prim-MakeTuple, [1]: ValueNode<StringImm> eps, [2]: ValueNode<StringImm> momentum, [3]: ValueNode<StringImm> affine, [4]: ValueNode<StringImm> gamma_init, [5]: ValueNode<StringImm> beta_init, [6]: ValueNode<StringImm> moving_mean_init, [7]: ValueNode<StringImm> moving_var_init, [8]: ValueNode<StringImm> use_batch_statistics}
#   3: @L-✓✗✗↓↓↓↓fastreid_modeling_ops_MetaBNNorm_construct.19:[CNode]156{[0]: ValueNode<DoSignaturePrimitive> S-Prim-MakeTuple, [1]: ValueNode<FP32Imm> 1e-05, [2]: ValueNode<FP32Imm> 0.9, [3]: ValueNode<BoolImm> true, [4]: ValueNode<StringImm> ones, [5]: ValueNode<StringImm> zeros, [6]: L-bn1.moving_mean, [7]: L-bn1.moving_variance, [8]: ValueNode<BoolImm> false}
#   4: @L-✓✗✗↓↓↓↓fastreid_modeling_ops_MetaBNNorm_construct.19:[CNode]157{[0]: ValueNode<DoSignaturePrimitive> S-Prim-make_dict, [1]: [CNode]155, [2]: [CNode]156}
#   5: @L-✓✗✗↓↓↓↓fastreid_modeling_ops_MetaBNNorm_construct.19:bn{[0]: ValueNode<UnpackCall> MetaFuncGraph-unpack_call.163, [1]: ValueNode<ClassType> class 'mindspore.nn.layer.normalization.BatchNorm2d', [2]: [CNode]154, [3]: [CNode]157}
#   6: @L-✓✗✗↓↓↓↓fastreid_modeling_ops_MetaBNNorm_construct.19:[CNode]158{[0]: ValueNode<Primitive> setattr, [1]: bn, [2]: ValueNode<StringImm> gamma, [3]: фupdated_gamma}
#   7: @L-✓✗✗↓↓↓↓fastreid_modeling_ops_MetaBNNorm_construct.19:[CNode]159{[0]: ValueNode<Primitive> setattr, [1]: bn, [2]: ValueNode<StringImm> beta, [3]: фupdated_beta}
#   8: @L-✓✗✗↓↓↓↓fastreid_modeling_ops_MetaBNNorm_construct.19:result{[0]: bn, [1]: inputs}
#   9: @L-✓✗✗↓↓↓↓fastreid_modeling_ops_MetaBNNorm_construct.19:[CNode]164{[0]: ValueNode<Primitive> Return, [1]: [CNode]162}


subgraph attr:
core : 1
subgraph instance: UnpackCall.20 : 0x55f1da84a250
# In file /home/yuming/ACL-DGReID-mindspore/fastreid/modeling/ops.py:264/            bn = nn.BatchNorm2d(self.num_features, eps=self.eps, momentum=self.momentum, affine=self.affine, gamma_init=self.gamma_init, beta_init=self.beta_init, moving_mean_init=self.moving_mean, moving_var_init=self.moving_variance, use_batch_statistics=False)/
subgraph @UnpackCall.20(%para398_, %para399_, %para400_) {
  %1(bn) = TupleGetItem(%para399_22, I64(0))
      : (<Tuple[Int64], TupleShape(NoShape)>, <Int64, NoShape>) -> (<Int64, NoShape>)
      #scope: (Default/bn1-MetaBNNorm)
      # In file /home/yuming/ACL-DGReID-mindspore/fastreid/modeling/ops.py:264/            bn = nn.BatchNorm2d(self.num_features, eps=self.eps, momentum=self.momentum, affine=self.affine, gamma_init=self.gamma_init, beta_init=self.beta_init, moving_mean_init=self.moving_mean, moving_var_init=self.moving_variance, use_batch_statistics=False)/
  %2(bn) = dict_getitem(%para400_23, "eps")
      : (<Dictionary[[eps,momentum,affine,gamma_init,beta_init,moving_mean_init,moving_var_init,use_batch_statistics,],[Float32*2,Bool,String*2,Ref[Tensor[Float32]]*2,Bool]], NoShape>, <String, NoShape>) -> (<Float32, NoShape>)
      #scope: (Default/bn1-MetaBNNorm)
      # In file /home/yuming/ACL-DGReID-mindspore/fastreid/modeling/ops.py:264/            bn = nn.BatchNorm2d(self.num_features, eps=self.eps, momentum=self.momentum, affine=self.affine, gamma_init=self.gamma_init, beta_init=self.beta_init, moving_mean_init=self.moving_mean, moving_var_init=self.moving_variance, use_batch_statistics=False)/
  %3(bn) = make_keyword_arg("eps", %2)
      : (<String, NoShape>, <Float32, NoShape>) -> (<Keyword[key : eps, value : Float32], NoShape>)
      #scope: (Default/bn1-MetaBNNorm)
      # In file /home/yuming/ACL-DGReID-mindspore/fastreid/modeling/ops.py:264/            bn = nn.BatchNorm2d(self.num_features, eps=self.eps, momentum=self.momentum, affine=self.affine, gamma_init=self.gamma_init, beta_init=self.beta_init, moving_mean_init=self.moving_mean, moving_var_init=self.moving_variance, use_batch_statistics=False)/
  %4(bn) = dict_getitem(%para400_23, "momentum")
      : (<Dictionary[[eps,momentum,affine,gamma_init,beta_init,moving_mean_init,moving_var_init,use_batch_statistics,],[Float32*2,Bool,String*2,Ref[Tensor[Float32]]*2,Bool]], NoShape>, <String, NoShape>) -> (<Float32, NoShape>)
      #scope: (Default/bn1-MetaBNNorm)
      # In file /home/yuming/ACL-DGReID-mindspore/fastreid/modeling/ops.py:264/            bn = nn.BatchNorm2d(self.num_features, eps=self.eps, momentum=self.momentum, affine=self.affine, gamma_init=self.gamma_init, beta_init=self.beta_init, moving_mean_init=self.moving_mean, moving_var_init=self.moving_variance, use_batch_statistics=False)/
  %5(bn) = make_keyword_arg("momentum", %4)
      : (<String, NoShape>, <Float32, NoShape>) -> (<Keyword[key : momentum, value : Float32], NoShape>)
      #scope: (Default/bn1-MetaBNNorm)
      # In file /home/yuming/ACL-DGReID-mindspore/fastreid/modeling/ops.py:264/            bn = nn.BatchNorm2d(self.num_features, eps=self.eps, momentum=self.momentum, affine=self.affine, gamma_init=self.gamma_init, beta_init=self.beta_init, moving_mean_init=self.moving_mean, moving_var_init=self.moving_variance, use_batch_statistics=False)/
  %6(bn) = dict_getitem(%para400_23, "affine")
      : (<Dictionary[[eps,momentum,affine,gamma_init,beta_init,moving_mean_init,moving_var_init,use_batch_statistics,],[Float32*2,Bool,String*2,Ref[Tensor[Float32]]*2,Bool]], NoShape>, <String, NoShape>) -> (<Bool, NoShape>)
      #scope: (Default/bn1-MetaBNNorm)
      # In file /home/yuming/ACL-DGReID-mindspore/fastreid/modeling/ops.py:264/            bn = nn.BatchNorm2d(self.num_features, eps=self.eps, momentum=self.momentum, affine=self.affine, gamma_init=self.gamma_init, beta_init=self.beta_init, moving_mean_init=self.moving_mean, moving_var_init=self.moving_variance, use_batch_statistics=False)/
  %7(bn) = make_keyword_arg("affine", %6)
      : (<String, NoShape>, <Bool, NoShape>) -> (<Keyword[key : affine, value : Bool], NoShape>)
      #scope: (Default/bn1-MetaBNNorm)
      # In file /home/yuming/ACL-DGReID-mindspore/fastreid/modeling/ops.py:264/            bn = nn.BatchNorm2d(self.num_features, eps=self.eps, momentum=self.momentum, affine=self.affine, gamma_init=self.gamma_init, beta_init=self.beta_init, moving_mean_init=self.moving_mean, moving_var_init=self.moving_variance, use_batch_statistics=False)/
  %8(bn) = dict_getitem(%para400_23, "gamma_init")
      : (<Dictionary[[eps,momentum,affine,gamma_init,beta_init,moving_mean_init,moving_var_init,use_batch_statistics,],[Float32*2,Bool,String*2,Ref[Tensor[Float32]]*2,Bool]], NoShape>, <String, NoShape>) -> (<String, NoShape>)
      #scope: (Default/bn1-MetaBNNorm)
      # In file /home/yuming/ACL-DGReID-mindspore/fastreid/modeling/ops.py:264/            bn = nn.BatchNorm2d(self.num_features, eps=self.eps, momentum=self.momentum, affine=self.affine, gamma_init=self.gamma_init, beta_init=self.beta_init, moving_mean_init=self.moving_mean, moving_var_init=self.moving_variance, use_batch_statistics=False)/
  %9(bn) = make_keyword_arg("gamma_init", %8)
      : (<String, NoShape>, <String, NoShape>) -> (<Keyword[key : gamma_init, value : String], NoShape>)
      #scope: (Default/bn1-MetaBNNorm)
      # In file /home/yuming/ACL-DGReID-mindspore/fastreid/modeling/ops.py:264/            bn = nn.BatchNorm2d(self.num_features, eps=self.eps, momentum=self.momentum, affine=self.affine, gamma_init=self.gamma_init, beta_init=self.beta_init, moving_mean_init=self.moving_mean, moving_var_init=self.moving_variance, use_batch_statistics=False)/
  %10(bn) = dict_getitem(%para400_23, "beta_init")
      : (<Dictionary[[eps,momentum,affine,gamma_init,beta_init,moving_mean_init,moving_var_init,use_batch_statistics,],[Float32*2,Bool,String*2,Ref[Tensor[Float32]]*2,Bool]], NoShape>, <String, NoShape>) -> (<String, NoShape>)
      #scope: (Default/bn1-MetaBNNorm)
      # In file /home/yuming/ACL-DGReID-mindspore/fastreid/modeling/ops.py:264/            bn = nn.BatchNorm2d(self.num_features, eps=self.eps, momentum=self.momentum, affine=self.affine, gamma_init=self.gamma_init, beta_init=self.beta_init, moving_mean_init=self.moving_mean, moving_var_init=self.moving_variance, use_batch_statistics=False)/
  %11(bn) = make_keyword_arg("beta_init", %10)
      : (<String, NoShape>, <String, NoShape>) -> (<Keyword[key : beta_init, value : String], NoShape>)
      #scope: (Default/bn1-MetaBNNorm)
      # In file /home/yuming/ACL-DGReID-mindspore/fastreid/modeling/ops.py:264/            bn = nn.BatchNorm2d(self.num_features, eps=self.eps, momentum=self.momentum, affine=self.affine, gamma_init=self.gamma_init, beta_init=self.beta_init, moving_mean_init=self.moving_mean, moving_var_init=self.moving_variance, use_batch_statistics=False)/
  %12(bn) = dict_getitem(%para400_23, "moving_mean_init")
      : (<Dictionary[[eps,momentum,affine,gamma_init,beta_init,moving_mean_init,moving_var_init,use_batch_statistics,],[Float32*2,Bool,String*2,Ref[Tensor[Float32]]*2,Bool]], NoShape>, <String, NoShape>) -> (<Ref[Tensor[Float32]], (64)>)
      #scope: (Default/bn1-MetaBNNorm)
      # In file /home/yuming/ACL-DGReID-mindspore/fastreid/modeling/ops.py:264/            bn = nn.BatchNorm2d(self.num_features, eps=self.eps, momentum=self.momentum, affine=self.affine, gamma_init=self.gamma_init, beta_init=self.beta_init, moving_mean_init=self.moving_mean, moving_var_init=self.moving_variance, use_batch_statistics=False)/
  %13(bn) = make_keyword_arg("moving_mean_init", %12)
      : (<String, NoShape>, <Ref[Tensor[Float32]], (64)>) -> (<Keyword[key : moving_mean_init, value : Ref[Tensor[Float32]]], NoShape>)
      #scope: (Default/bn1-MetaBNNorm)
      # In file /home/yuming/ACL-DGReID-mindspore/fastreid/modeling/ops.py:264/            bn = nn.BatchNorm2d(self.num_features, eps=self.eps, momentum=self.momentum, affine=self.affine, gamma_init=self.gamma_init, beta_init=self.beta_init, moving_mean_init=self.moving_mean, moving_var_init=self.moving_variance, use_batch_statistics=False)/
  %14(bn) = dict_getitem(%para400_23, "moving_var_init")
      : (<Dictionary[[eps,momentum,affine,gamma_init,beta_init,moving_mean_init,moving_var_init,use_batch_statistics,],[Float32*2,Bool,String*2,Ref[Tensor[Float32]]*2,Bool]], NoShape>, <String, NoShape>) -> (<Ref[Tensor[Float32]], (64)>)
      #scope: (Default/bn1-MetaBNNorm)
      # In file /home/yuming/ACL-DGReID-mindspore/fastreid/modeling/ops.py:264/            bn = nn.BatchNorm2d(self.num_features, eps=self.eps, momentum=self.momentum, affine=self.affine, gamma_init=self.gamma_init, beta_init=self.beta_init, moving_mean_init=self.moving_mean, moving_var_init=self.moving_variance, use_batch_statistics=False)/
  %15(bn) = make_keyword_arg("moving_var_init", %14)
      : (<String, NoShape>, <Ref[Tensor[Float32]], (64)>) -> (<Keyword[key : moving_var_init, value : Ref[Tensor[Float32]]], NoShape>)
      #scope: (Default/bn1-MetaBNNorm)
      # In file /home/yuming/ACL-DGReID-mindspore/fastreid/modeling/ops.py:264/            bn = nn.BatchNorm2d(self.num_features, eps=self.eps, momentum=self.momentum, affine=self.affine, gamma_init=self.gamma_init, beta_init=self.beta_init, moving_mean_init=self.moving_mean, moving_var_init=self.moving_variance, use_batch_statistics=False)/
  %16(bn) = dict_getitem(%para400_23, "use_batch_statistics")
      : (<Dictionary[[eps,momentum,affine,gamma_init,beta_init,moving_mean_init,moving_var_init,use_batch_statistics,],[Float32*2,Bool,String*2,Ref[Tensor[Float32]]*2,Bool]], NoShape>, <String, NoShape>) -> (<Bool, NoShape>)
      #scope: (Default/bn1-MetaBNNorm)
      # In file /home/yuming/ACL-DGReID-mindspore/fastreid/modeling/ops.py:264/            bn = nn.BatchNorm2d(self.num_features, eps=self.eps, momentum=self.momentum, affine=self.affine, gamma_init=self.gamma_init, beta_init=self.beta_init, moving_mean_init=self.moving_mean, moving_var_init=self.moving_variance, use_batch_statistics=False)/
  %17(bn) = make_keyword_arg("use_batch_statistics", %16)
      : (<String, NoShape>, <Bool, NoShape>) -> (<Keyword[key : use_batch_statistics, value : Bool], NoShape>)
      #scope: (Default/bn1-MetaBNNorm)
      # In file /home/yuming/ACL-DGReID-mindspore/fastreid/modeling/ops.py:264/            bn = nn.BatchNorm2d(self.num_features, eps=self.eps, momentum=self.momentum, affine=self.affine, gamma_init=self.gamma_init, beta_init=self.beta_init, moving_mean_init=self.moving_mean, moving_var_init=self.moving_variance, use_batch_statistics=False)/

#------------------------> 14
  %18(bn) = %para398_21(%1, %3, %5, %7, %9, %11, %13, %15, %17)
      : (<Int64, NoShape>, <Keyword[key : eps, value : Float32], NoShape>, <Keyword[key : momentum, value : Float32], NoShape>, <Keyword[key : affine, value : Bool], NoShape>, <Keyword[key : gamma_init, value : String], NoShape>, <Keyword[key : beta_init, value : String], NoShape>, <Keyword[key : moving_mean_init, value : Ref[Tensor[Float32]]], NoShape>, <Keyword[key : moving_var_init, value : Ref[Tensor[Float32]]], NoShape>, <Keyword[key : use_batch_statistics, value : Bool], NoShape>) -> (<null>)
      #scope: (Default/bn1-MetaBNNorm)
      # In file /home/yuming/ACL-DGReID-mindspore/fastreid/modeling/ops.py:264/            bn = nn.BatchNorm2d(self.num_features, eps=self.eps, momentum=self.momentum, affine=self.affine, gamma_init=self.gamma_init, beta_init=self.beta_init, moving_mean_init=self.moving_mean, moving_var_init=self.moving_variance, use_batch_statistics=False)/
  Return(%18)
      : (<null>)
      #scope: (Default/bn1-MetaBNNorm)
      # In file /home/yuming/ACL-DGReID-mindspore/fastreid/modeling/ops.py:264/            bn = nn.BatchNorm2d(self.num_features, eps=self.eps, momentum=self.momentum, affine=self.affine, gamma_init=self.gamma_init, beta_init=self.beta_init, moving_mean_init=self.moving_mean, moving_var_init=self.moving_variance, use_batch_statistics=False)/
}
# Order:
#   1: @UnpackCall.20:bn{[0]: 21, [1]: bn, [2]: bn, [3]: bn, [4]: bn, [5]: bn, [6]: bn, [7]: bn, [8]: bn, [9]: bn}
#   2: @UnpackCall.20:bn{[0]: ValueNode<Primitive> Return, [1]: bn}


#===============================================================================
# num of function graphs in stack: 15
