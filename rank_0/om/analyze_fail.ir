# 1.This file shows the parsed IR info when graph evaluating failed to help find the problem.
# 2.You can search the last `------------------------>` to the node which is inferred failed.
# 3.Refer to https://www.mindspore.cn/search?inputValue=analyze_fail.ir to get more instructions.
# ===============================================================================

subgraph attr:
training : 0
subgraph instance: fastreid_modeling_backbones_meta_dynamic_router_resnet_ResNet_construct.83 : 0x9c58e0c0
# In file /home/yuming/ACL-DGReID-mindspore/fastreid/modeling/backbones/meta_dynamic_router_resnet.py:460/    def construct(self, x, epoch, opt=-1):/
subgraph @fastreid_modeling_backbones_meta_dynamic_router_resnet_ResNet_construct.83(%para1_x, %para2_epoch, %para3_NL_1_idx, %para4_conv1.weight, %para5_router1.fc_classifier.weight, %para6_router1.fc2.weight, %para7_router1.fc1.weight, %para8_bn1.gamma, %para9_bn1.beta, %para10_bn1.moving_mean, %para11_bn1.moving_variance, %para12_router2.fc_classifier.weight, %para13_meta_fuse1.gate, %para14_router2.fc2.weight, %para15_router2.fc1.weight, %para16_meta_se1.fc2.weight, %para17_router3.fc_classifier.weight, %para18_meta_fuse2.gate, %para19_meta_se1.fc1.weight, %para20_router3.fc2.weight, %para21_meta_fuse4.gate, %para22_router4.fc_classifier.weight, %para23_meta_fuse3.gate, %para24_router3.fc1.weight, %para25_meta_se2.fc2.weight, %para26_layer1.0.conv3.weight, %para27_layer1.1.conv3.weight, %para28_invariant_norm1.gamma, %para29_invariant_norm1.beta, %para30_invariant_norm1.moving_mean, %para31_invariant_norm1.moving_variance, %para32_specific_norm1.gamma, %para33_specific_norm1.beta, %para34_specific_norm1.moving_mean, %para35_specific_norm1.moving_variance, %para36_meta_se2.fc1.weight, %para37_adaptor1_base.conv3.weight, %para38_adaptor1_sub.conv3.weight, %para39_router4.fc2.weight, %para40_layer1.0.conv2.weight, %para41_layer1.1.conv2.weight, %para42_adaptor2_sub.conv3.weight, %para43_adaptor3_sub.conv3.weight, %para44_adaptor4_sub.conv3.weight, %para45_meta_se4.fc2.weight, %para46_adaptor1_base.conv2.weight, %para47_adaptor1_sub.conv2.weight, %para48_router4.fc1.weight, %para49_meta_se3.fc2.weight, %para50_layer1.0.conv1.weight, %para51_layer1.1.conv1.weight, %para52_meta_se4.fc1.weight, %para53_adaptor2_sub.conv2.weight, %para54_adaptor3_sub.conv2.weight, %para55_meta_se3.fc1.weight, %para56_adaptor4_sub.conv2.weight, %para57_layer2.0.conv3.weight, %para58_layer2.1.conv3.weight, %para59_layer2.2.conv3.weight, %para60_adaptor1_base.conv1.weight, %para61_adaptor1_sub.conv1.weight, %para62_invariant_norm2.gamma, %para63_invariant_norm2.beta, %para64_invariant_norm2.moving_mean, %para65_invariant_norm2.moving_variance, %para66_specific_norm2.gamma, %para67_specific_norm2.beta, %para68_specific_norm2.moving_mean, %para69_specific_norm2.moving_variance, %para70_adaptor2_base.conv3.weight, %para71_adaptor2_sub.conv1.weight, %para72_adaptor3_sub.conv1.weight, %para73_adaptor3_base.conv3.weight, %para74_adaptor4_sub.conv1.weight, %para75_adaptor4_base.conv3.weight, %para76_layer2.0.conv2.weight, %para77_layer2.1.conv2.weight, %para78_layer2.2.conv2.weight, %para79_adaptor2_base.conv2.weight, %para80_adaptor3_base.conv2.weight, %para81_adaptor4_base.conv2.weight, %para82_invariant_norm4.gamma, %para83_invariant_norm4.beta, %para84_invariant_norm4.moving_mean, %para85_invariant_norm4.moving_variance, %para86_specific_norm4.gamma, %para87_specific_norm4.beta, %para88_specific_norm4.moving_mean, %para89_specific_norm4.moving_variance, %para90_layer2.0.conv1.weight, %para91_layer2.1.conv1.weight, %para92_layer2.2.conv1.weight, %para93_invariant_norm3.gamma, %para94_invariant_norm3.beta, %para95_invariant_norm3.moving_mean, %para96_invariant_norm3.moving_variance, %para97_specific_norm3.gamma, %para98_specific_norm3.beta, %para99_specific_norm3.moving_mean, %para100_specific_norm3.moving_variance, %para101_layer1.0.bn3.gamma, %para102_layer1.0.bn3.beta, %para103_layer1.0.bn3.moving_mean, %para104_layer1.0.bn3.moving_variance, %para105_layer1.1.bn3.gamma, %para106_layer1.1.bn3.beta, %para107_layer1.1.bn3.moving_mean, %para108_layer1.1.bn3.moving_variance, %para109_map4.gamma, %para110_map4.beta, %para111_map4.moving_mean, %para112_map4.moving_variance, %para113_adaptor1_base.bn3.moving_mean, %para114_adaptor1_base.bn3.moving_variance, %para115_layer3.0.conv3.weight, %para116_layer3.1.conv3.weight, %para117_layer3.2.conv3.weight, %para118_layer3.3.conv3.weight, %para119_layer3.4.conv3.weight, %para120_adaptor2_base.conv1.weight, %para121_adaptor1_sub.bn3.gamma, %para122_adaptor1_sub.bn3.beta, %para123_adaptor1_sub.bn3.moving_mean, %para124_adaptor1_sub.bn3.moving_variance, %para125_adaptor3_base.conv1.weight, %para126_adaptor4_base.conv1.weight, %para127_map3.gamma, %para128_map3.beta, %para129_map3.moving_mean, %para130_map3.moving_variance, %para131_adaptor1_base.bn3.gamma, %para132_adaptor1_base.bn3.beta, %para133_layer1.0.bn2.gamma, %para134_layer1.0.bn2.beta, %para135_layer1.0.bn2.moving_mean, %para136_layer1.0.bn2.moving_variance, %para137_layer1.1.bn2.gamma, %para138_layer1.1.bn2.beta, %para139_layer1.1.bn2.moving_mean, %para140_layer1.1.bn2.moving_variance, %para141_adaptor1_base.bn2.moving_mean, %para142_adaptor1_base.bn2.moving_variance, %para143_adaptor2_sub.bn3.gamma, %para144_adaptor2_sub.bn3.beta, %para145_adaptor2_sub.bn3.moving_mean, %para146_adaptor2_sub.bn3.moving_variance, %para147_adaptor3_sub.bn3.gamma, %para148_adaptor3_sub.bn3.beta, %para149_adaptor3_sub.bn3.moving_mean, %para150_adaptor3_sub.bn3.moving_variance, %para151_adaptor4_sub.bn3.gamma, %para152_adaptor4_sub.bn3.beta, %para153_adaptor4_sub.bn3.moving_mean, %para154_adaptor4_sub.bn3.moving_variance, %para155_map2.gamma, %para156_map2.beta, %para157_map2.moving_mean, %para158_map2.moving_variance, %para159_layer3.0.conv2.weight, %para160_layer3.1.conv2.weight, %para161_layer3.2.conv2.weight, %para162_layer3.3.conv2.weight, %para163_layer3.4.conv2.weight, %para164_adaptor1_sub.bn2.gamma, %para165_adaptor1_sub.bn2.beta, %para166_adaptor1_sub.bn2.moving_mean, %para167_adaptor1_sub.bn2.moving_variance, %para168_adaptor1_base.bn2.gamma, %para169_adaptor1_base.bn2.beta, %para170_map1.gamma, %para171_map1.beta, %para172_map1.moving_mean, %para173_map1.moving_variance, %para174_adaptor1_base.bn1.moving_mean, %para175_adaptor1_base.bn1.moving_variance, %para176_adaptor2_sub.bn2.gamma, %para177_adaptor2_sub.bn2.beta, %para178_adaptor2_sub.bn2.moving_mean, %para179_adaptor2_sub.bn2.moving_variance, %para180_adaptor3_sub.bn2.gamma, %para181_adaptor3_sub.bn2.beta, %para182_adaptor3_sub.bn2.moving_mean, %para183_adaptor3_sub.bn2.moving_variance, %para184_layer4.0.conv3.weight, %para185_layer4.1.conv3.weight, %para186_adaptor4_sub.bn2.gamma, %para187_adaptor4_sub.bn2.beta, %para188_adaptor4_sub.bn2.moving_mean, %para189_adaptor4_sub.bn2.moving_variance, %para190_layer3.0.conv1.weight, %para191_layer3.1.conv1.weight, %para192_layer3.2.conv1.weight, %para193_layer3.3.conv1.weight, %para194_layer3.4.conv1.weight, %para195_layer2.0.bn3.gamma, %para196_layer2.0.bn3.beta, %para197_layer2.0.bn3.moving_mean, %para198_layer2.0.bn3.moving_variance, %para199_layer2.1.bn3.gamma, %para200_layer2.1.bn3.beta, %para201_layer2.1.bn3.moving_mean, %para202_layer2.1.bn3.moving_variance, %para203_layer2.2.bn3.gamma, %para204_layer2.2.bn3.beta, %para205_layer2.2.bn3.moving_mean, %para206_layer2.2.bn3.moving_variance, %para207_adaptor2_base.bn3.moving_mean, %para208_adaptor2_base.bn3.moving_variance, %para209_adaptor1_base.bn1.gamma, %para210_adaptor1_base.bn1.beta, %para211_adaptor3_base.bn3.moving_mean, %para212_adaptor3_base.bn3.moving_variance, %para213_adaptor4_base.bn3.moving_mean, %para214_adaptor4_base.bn3.moving_variance, %para215_layer4.0.conv2.weight, %para216_layer4.1.conv2.weight, %para217_adaptor2_base.bn3.gamma, %para218_adaptor2_base.bn3.beta, %para219_layer2.0.bn2.gamma, %para220_layer2.0.bn2.beta, %para221_layer2.0.bn2.moving_mean, %para222_layer2.0.bn2.moving_variance, %para223_layer2.1.bn2.gamma, %para224_layer2.1.bn2.beta, %para225_layer2.1.bn2.moving_mean, %para226_layer2.1.bn2.moving_variance, %para227_layer2.2.bn2.gamma, %para228_layer2.2.bn2.beta, %para229_layer2.2.bn2.moving_mean, %para230_layer2.2.bn2.moving_variance, %para231_adaptor3_base.bn3.gamma, %para232_adaptor3_base.bn3.beta, %para233_adaptor4_base.bn3.gamma, %para234_adaptor4_base.bn3.beta, %para235_adaptor2_base.bn2.moving_mean, %para236_adaptor2_base.bn2.moving_variance, %para237_adaptor3_base.bn2.moving_mean, %para238_adaptor3_base.bn2.moving_variance, %para239_adaptor4_base.bn2.moving_mean, %para240_adaptor4_base.bn2.moving_variance, %para241_layer4.0.conv1.weight, %para242_layer4.1.conv1.weight, %para243_adaptor2_base.bn2.gamma, %para244_adaptor2_base.bn2.beta, %para245_adaptor3_base.bn2.gamma, %para246_adaptor3_base.bn2.beta, %para247_adaptor4_base.bn2.gamma, %para248_adaptor4_base.bn2.beta, %para249_adaptor2_base.bn1.moving_mean, %para250_adaptor2_base.bn1.moving_variance, %para251_adaptor3_base.bn1.moving_mean, %para252_adaptor3_base.bn1.moving_variance, %para253_adaptor4_base.bn1.moving_mean, %para254_adaptor4_base.bn1.moving_variance, %para255_layer3.0.bn3.gamma, %para256_layer3.0.bn3.beta, %para257_layer3.0.bn3.moving_mean, %para258_layer3.0.bn3.moving_variance, %para259_layer3.1.bn3.gamma, %para260_layer3.1.bn3.beta, %para261_layer3.1.bn3.moving_mean, %para262_layer3.1.bn3.moving_variance, %para263_layer3.2.bn3.gamma, %para264_layer3.2.bn3.beta, %para265_layer3.2.bn3.moving_mean, %para266_layer3.2.bn3.moving_variance, %para267_layer3.3.bn3.gamma, %para268_layer3.3.bn3.beta, %para269_layer3.3.bn3.moving_mean, %para270_layer3.3.bn3.moving_variance, %para271_layer3.4.bn3.gamma, %para272_layer3.4.bn3.beta, %para273_layer3.4.bn3.moving_mean, %para274_layer3.4.bn3.moving_variance, %para275_adaptor2_base.bn1.gamma, %para276_adaptor2_base.bn1.beta, %para277_adaptor3_base.bn1.gamma, %para278_adaptor3_base.bn1.beta, %para279_adaptor4_base.bn1.gamma, %para280_adaptor4_base.bn1.beta, %para281_layer1.0.bn1.IN.moving_mean, %para282_layer1.0.bn1.IN.moving_variance, %para283_layer1.1.bn1.IN.moving_mean, %para284_layer1.1.bn1.IN.moving_variance, %para285_layer1.0.bn1.BN.gamma, %para286_layer1.0.bn1.BN.beta, %para287_layer1.0.bn1.BN.moving_mean, %para288_layer1.0.bn1.BN.moving_variance, %para289_layer1.1.bn1.BN.gamma, %para290_layer1.1.bn1.BN.beta, %para291_layer1.1.bn1.BN.moving_mean, %para292_layer1.1.bn1.BN.moving_variance, %para293_layer3.0.bn2.gamma, %para294_layer3.0.bn2.beta, %para295_layer3.0.bn2.moving_mean, %para296_layer3.0.bn2.moving_variance, %para297_layer3.1.bn2.gamma, %para298_layer3.1.bn2.beta, %para299_layer3.1.bn2.moving_mean, %para300_layer3.1.bn2.moving_variance, %para301_layer3.2.bn2.gamma, %para302_layer3.2.bn2.beta, %para303_layer3.2.bn2.moving_mean, %para304_layer3.2.bn2.moving_variance, %para305_layer3.3.bn2.gamma, %para306_layer3.3.bn2.beta, %para307_layer3.3.bn2.moving_mean, %para308_layer3.3.bn2.moving_variance, %para309_layer3.4.bn2.gamma, %para310_layer3.4.bn2.beta, %para311_layer3.4.bn2.moving_mean, %para312_layer3.4.bn2.moving_variance, %para313_adaptor1_sub.bn1.IN.moving_mean, %para314_adaptor1_sub.bn1.IN.moving_variance, %para315_layer1.0.bn1.IN.gamma, %para316_layer1.0.bn1.IN.beta, %para317_layer1.1.bn1.IN.gamma, %para318_layer1.1.bn1.IN.beta, %para319_adaptor1_sub.bn1.BN.gamma, %para320_adaptor1_sub.bn1.BN.beta, %para321_adaptor1_sub.bn1.BN.moving_mean, %para322_adaptor1_sub.bn1.BN.moving_variance, %para323_adaptor1_sub.bn1.IN.gamma, %para324_adaptor1_sub.bn1.IN.beta, %para325_adaptor2_sub.bn1.IN.moving_mean, %para326_adaptor2_sub.bn1.IN.moving_variance, %para327_adaptor3_sub.bn1.IN.moving_mean, %para328_adaptor3_sub.bn1.IN.moving_variance, %para329_layer4.0.bn3.gamma, %para330_layer4.0.bn3.beta, %para331_layer4.0.bn3.moving_mean, %para332_layer4.0.bn3.moving_variance, %para333_layer4.1.bn3.gamma, %para334_layer4.1.bn3.beta, %para335_layer4.1.bn3.moving_mean, %para336_layer4.1.bn3.moving_variance, %para337_adaptor4_sub.bn1.IN.moving_mean, %para338_adaptor4_sub.bn1.IN.moving_variance, %para339_adaptor2_sub.bn1.BN.gamma, %para340_adaptor2_sub.bn1.BN.beta, %para341_adaptor2_sub.bn1.BN.moving_mean, %para342_adaptor2_sub.bn1.BN.moving_variance, %para343_adaptor3_sub.bn1.BN.gamma, %para344_adaptor3_sub.bn1.BN.beta, %para345_adaptor3_sub.bn1.BN.moving_mean, %para346_adaptor3_sub.bn1.BN.moving_variance, %para347_adaptor4_sub.bn1.BN.gamma, %para348_adaptor4_sub.bn1.BN.beta, %para349_adaptor4_sub.bn1.BN.moving_mean, %para350_adaptor4_sub.bn1.BN.moving_variance, %para351_adaptor2_sub.bn1.IN.gamma, %para352_adaptor2_sub.bn1.IN.beta, %para353_adaptor3_sub.bn1.IN.gamma, %para354_adaptor3_sub.bn1.IN.beta, %para355_adaptor4_sub.bn1.IN.gamma, %para356_adaptor4_sub.bn1.IN.beta, %para357_layer4.0.bn2.gamma, %para358_layer4.0.bn2.beta, %para359_layer4.0.bn2.moving_mean, %para360_layer4.0.bn2.moving_variance, %para361_layer4.1.bn2.gamma, %para362_layer4.1.bn2.beta, %para363_layer4.1.bn2.moving_mean, %para364_layer4.1.bn2.moving_variance, %para365_layer2.0.bn1.IN.moving_mean, %para366_layer2.0.bn1.IN.moving_variance, %para367_layer2.1.bn1.IN.moving_mean, %para368_layer2.1.bn1.IN.moving_variance, %para369_layer2.2.bn1.IN.moving_mean, %para370_layer2.2.bn1.IN.moving_variance, %para371_layer2.0.bn1.BN.gamma, %para372_layer2.0.bn1.BN.beta, %para373_layer2.0.bn1.BN.moving_mean, %para374_layer2.0.bn1.BN.moving_variance, %para375_layer2.1.bn1.BN.gamma, %para376_layer2.1.bn1.BN.beta, %para377_layer2.1.bn1.BN.moving_mean, %para378_layer2.1.bn1.BN.moving_variance, %para379_layer2.2.bn1.BN.gamma, %para380_layer2.2.bn1.BN.beta, %para381_layer2.2.bn1.BN.moving_mean, %para382_layer2.2.bn1.BN.moving_variance, %para383_layer2.0.bn1.IN.gamma, %para384_layer2.0.bn1.IN.beta, %para385_layer2.1.bn1.IN.gamma, %para386_layer2.1.bn1.IN.beta, %para387_layer2.2.bn1.IN.gamma, %para388_layer2.2.bn1.IN.beta, %para389_layer4.0.bn1.gamma, %para390_layer4.0.bn1.beta, %para391_layer4.0.bn1.moving_mean, %para392_layer4.0.bn1.moving_variance, %para393_layer4.1.bn1.gamma, %para394_layer4.1.bn1.beta, %para395_layer4.1.bn1.moving_mean, %para396_layer4.1.bn1.moving_variance, %para397_layer3.0.bn1.IN.moving_mean, %para398_layer3.0.bn1.IN.moving_variance, %para399_layer3.1.bn1.IN.moving_mean, %para400_layer3.1.bn1.IN.moving_variance, %para401_layer3.2.bn1.IN.moving_mean, %para402_layer3.2.bn1.IN.moving_variance, %para403_layer3.3.bn1.IN.moving_mean, %para404_layer3.3.bn1.IN.moving_variance, %para405_layer3.4.bn1.IN.moving_mean, %para406_layer3.4.bn1.IN.moving_variance, %para407_layer3.0.bn1.BN.gamma, %para408_layer3.0.bn1.BN.beta, %para409_layer3.0.bn1.BN.moving_mean, %para410_layer3.0.bn1.BN.moving_variance, %para411_layer3.1.bn1.BN.gamma, %para412_layer3.1.bn1.BN.beta, %para413_layer3.1.bn1.BN.moving_mean, %para414_layer3.1.bn1.BN.moving_variance, %para415_layer3.2.bn1.BN.gamma, %para416_layer3.2.bn1.BN.beta, %para417_layer3.2.bn1.BN.moving_mean, %para418_layer3.2.bn1.BN.moving_variance, %para419_layer3.3.bn1.BN.gamma, %para420_layer3.3.bn1.BN.beta, %para421_layer3.3.bn1.BN.moving_mean, %para422_layer3.3.bn1.BN.moving_variance, %para423_layer3.4.bn1.BN.gamma, %para424_layer3.4.bn1.BN.beta, %para425_layer3.4.bn1.BN.moving_mean, %para426_layer3.4.bn1.BN.moving_variance, %para427_layer3.0.bn1.IN.gamma, %para428_layer3.0.bn1.IN.beta, %para429_layer3.1.bn1.IN.gamma, %para430_layer3.1.bn1.IN.beta, %para431_layer3.2.bn1.IN.gamma, %para432_layer3.2.bn1.IN.beta, %para433_layer3.3.bn1.IN.gamma, %para434_layer3.3.bn1.IN.beta, %para435_layer3.4.bn1.IN.gamma, %para436_layer3.4.bn1.IN.beta, %para437_layer1.0.downsample.0.weight, %para438_layer1.0.downsample.1.gamma, %para439_layer1.0.downsample.1.beta, %para440_layer1.0.downsample.1.moving_mean, %para441_layer1.0.downsample.1.moving_variance) {
  %1([CNode]103) = call @print_.102(I64(4))
      : (<Int64, NoShape>) -> (<Tensor[Int32], (1)>)
      #scope: (Default)
      # In file /home/yuming/ACL-DGReID-mindspore/fastreid/modeling/backbones/meta_dynamic_router_resnet.py:464/        print(4)/
  %2([CNode]104) = getattr(%para1_x, "shape")
      : (<Tensor[Float32], (8, 3, 16, 16)>, <String, NoShape>) -> (<Tuple[Int64*4], TupleShape(NoShape, NoShape, NoShape, NoShape)>)
      #scope: (Default)
      # In file /home/yuming/ACL-DGReID-mindspore/fastreid/modeling/backbones/meta_dynamic_router_resnet.py:0/
  %3([CNode]105) = JoinedStr("ndim ", %2)
      : (<String, NoShape>, <Tuple[Int64*4], TupleShape(NoShape, NoShape, NoShape, NoShape)>) -> (<String, NoShape>)
      #scope: (Default)
      # In file /home/yuming/ACL-DGReID-mindspore/fastreid/modeling/backbones/meta_dynamic_router_resnet.py:466/        print(f"ndim {x.shape}")/
  %4([CNode]106) = call @print_.102(%3)
      : (<String, NoShape>) -> (<Tensor[Int32], (1)>)
      #scope: (Default)
      # In file /home/yuming/ACL-DGReID-mindspore/fastreid/modeling/backbones/meta_dynamic_router_resnet.py:466/        print(f"ndim {x.shape}")/
  %5([CNode]107) = S-Prim-MakeTuple("x")
      : (<String, NoShape>) -> (<Tuple[String], TupleShape(NoShape)>)
      #scope: (Default)
      # In file /home/yuming/ACL-DGReID-mindspore/fastreid/modeling/backbones/meta_dynamic_router_resnet.py:467/        print("x type", type(x), x)/
  %6([CNode]108) = S-Prim-MakeTuple(%para1_x)
      : (<Tensor[Float32], (8, 3, 16, 16)>) -> (<Tuple[Tensor[Float32]], TupleShape((8, 3, 16, 16))>)
      #scope: (Default)
      # In file /home/yuming/ACL-DGReID-mindspore/fastreid/modeling/backbones/meta_dynamic_router_resnet.py:467/        print("x type", type(x), x)/
  %7([CNode]109) = S-Prim-make_dict(%5, %6)
      : (<Tuple[String], TupleShape(NoShape)>, <Tuple[Tensor[Float32]], TupleShape((8, 3, 16, 16))>) -> (<Dictionary[[x,],[Tensor[Float32]]], NoShape>)
      #scope: (Default)
      # In file /home/yuming/ACL-DGReID-mindspore/fastreid/modeling/backbones/meta_dynamic_router_resnet.py:467/        print("x type", type(x), x)/
  %8([CNode]110) = PyInterpret[side_effect_io: Bool(1)](Script['print("x type", type(x), x)'], {"print": InterpretedObject, "type": ClassType}, %7)
      : (<String, NoShape>, <Dictionary[[print,type,],[External,TypeType]], NoShape>, <Dictionary[[x,],[Tensor[Float32]]], NoShape>) -> (<Any(Tensor)[Float32], (-2)>)
      #scope: (Default)
      # In file /home/yuming/ACL-DGReID-mindspore/fastreid/modeling/backbones/meta_dynamic_router_resnet.py:467/        print("x type", type(x), x)/
  %9([CNode]111) = S-Prim-MakeTuple("x")
      : (<String, NoShape>) -> (<Tuple[String], TupleShape(NoShape)>)
      #scope: (Default)
      # In file /home/yuming/ACL-DGReID-mindspore/fastreid/modeling/backbones/meta_dynamic_router_resnet.py:469/        print("x type", type(x), x)/
  %10(x) = call @fastreid_modeling_ops_MetaConv2d_construct.112(%para1_x)
      : (<Tensor[Float32], (8, 3, 16, 16)>) -> (<Tensor[Float32], (8, 64, 8, 8)>)
      #scope: (Default)
      # In file /home/yuming/ACL-DGReID-mindspore/fastreid/modeling/backbones/meta_dynamic_router_resnet.py:468/        x = self.conv1(x)/
  %11([CNode]113) = S-Prim-MakeTuple(%10)
      : (<Tensor[Float32], (8, 64, 8, 8)>) -> (<Tuple[Tensor[Float32]], TupleShape((8, 64, 8, 8))>)
      #scope: (Default)
      # In file /home/yuming/ACL-DGReID-mindspore/fastreid/modeling/backbones/meta_dynamic_router_resnet.py:469/        print("x type", type(x), x)/
  %12([CNode]114) = S-Prim-make_dict(%9, %11)
      : (<Tuple[String], TupleShape(NoShape)>, <Tuple[Tensor[Float32]], TupleShape((8, 64, 8, 8))>) -> (<Dictionary[[x,],[Tensor[Float32]]], NoShape>)
      #scope: (Default)
      # In file /home/yuming/ACL-DGReID-mindspore/fastreid/modeling/backbones/meta_dynamic_router_resnet.py:469/        print("x type", type(x), x)/
  %13([CNode]115) = PyInterpret[side_effect_io: Bool(1)](Script['print("x type", type(x), x)'], {"print": InterpretedObject, "type": ClassType, "self": InterpretedObject}, %12)
      : (<String, NoShape>, <Dictionary[[print,type,self,],[External,TypeType,External]], NoShape>, <Dictionary[[x,],[Tensor[Float32]]], NoShape>) -> (<Any(Tensor)[Float32], (-2)>)
      #scope: (Default)
      # In file /home/yuming/ACL-DGReID-mindspore/fastreid/modeling/backbones/meta_dynamic_router_resnet.py:469/        print("x type", type(x), x)/
  %14([CNode]116) = S-Prim-MakeTuple("x")
      : (<String, NoShape>) -> (<Tuple[String], TupleShape(NoShape)>)
      #scope: (Default)
      # In file /home/yuming/ACL-DGReID-mindspore/fastreid/modeling/backbones/meta_dynamic_router_resnet.py:471/        print("x type", type(x), x)/
  %15(x) = call @fastreid_modeling_ops_MetaBNNorm_construct.117(%10)
      : (<Tensor[Float32], (8, 64, 8, 8)>) -> (<Tensor[Float32], (8, 64, 8, 8)>)
      #scope: (Default)
      # In file /home/yuming/ACL-DGReID-mindspore/fastreid/modeling/backbones/meta_dynamic_router_resnet.py:470/        x = self.bn1(x)/
  %16([CNode]118) = S-Prim-MakeTuple(%15)
      : (<Tensor[Float32], (8, 64, 8, 8)>) -> (<Tuple[Tensor[Float32]], TupleShape((8, 64, 8, 8))>)
      #scope: (Default)
      # In file /home/yuming/ACL-DGReID-mindspore/fastreid/modeling/backbones/meta_dynamic_router_resnet.py:471/        print("x type", type(x), x)/
  %17([CNode]119) = S-Prim-make_dict(%14, %16)
      : (<Tuple[String], TupleShape(NoShape)>, <Tuple[Tensor[Float32]], TupleShape((8, 64, 8, 8))>) -> (<Dictionary[[x,],[Tensor[Float32]]], NoShape>)
      #scope: (Default)
      # In file /home/yuming/ACL-DGReID-mindspore/fastreid/modeling/backbones/meta_dynamic_router_resnet.py:471/        print("x type", type(x), x)/
  %18([CNode]120) = PyInterpret[side_effect_io: Bool(1)](Script['print("x type", type(x), x)'], {"print": InterpretedObject, "type": ClassType, "self": InterpretedObject}, %17)
      : (<String, NoShape>, <Dictionary[[print,type,self,],[External,TypeType,External]], NoShape>, <Dictionary[[x,],[Tensor[Float32]]], NoShape>) -> (<Any(Tensor)[Float32], (-2)>)
      #scope: (Default)
      # In file /home/yuming/ACL-DGReID-mindspore/fastreid/modeling/backbones/meta_dynamic_router_resnet.py:471/        print("x type", type(x), x)/
  %19([CNode]121) = S-Prim-MakeTuple("x")
      : (<String, NoShape>) -> (<Tuple[String], TupleShape(NoShape)>)
      #scope: (Default)
      # In file /home/yuming/ACL-DGReID-mindspore/fastreid/modeling/backbones/meta_dynamic_router_resnet.py:473/        print("x type", type(x))/
  %20(x) = call @mindspore_nn_layer_activation_ReLU_construct.122(%15)
      : (<Tensor[Float32], (8, 64, 8, 8)>) -> (<Tensor[Float32], (8, 64, 8, 8)>)
      #scope: (Default)
      # In file /home/yuming/ACL-DGReID-mindspore/fastreid/modeling/backbones/meta_dynamic_router_resnet.py:472/        x = self.relu(x)/
  %21([CNode]123) = S-Prim-MakeTuple(%20)
      : (<Tensor[Float32], (8, 64, 8, 8)>) -> (<Tuple[Tensor[Float32]], TupleShape((8, 64, 8, 8))>)
      #scope: (Default)
      # In file /home/yuming/ACL-DGReID-mindspore/fastreid/modeling/backbones/meta_dynamic_router_resnet.py:473/        print("x type", type(x))/
  %22([CNode]124) = S-Prim-make_dict(%19, %21)
      : (<Tuple[String], TupleShape(NoShape)>, <Tuple[Tensor[Float32]], TupleShape((8, 64, 8, 8))>) -> (<Dictionary[[x,],[Tensor[Float32]]], NoShape>)
      #scope: (Default)
      # In file /home/yuming/ACL-DGReID-mindspore/fastreid/modeling/backbones/meta_dynamic_router_resnet.py:473/        print("x type", type(x))/
  %23([CNode]125) = PyInterpret[side_effect_io: Bool(1)](Script['print("x type", type(x))'], {"print": InterpretedObject, "type": ClassType, "self": InterpretedObject}, %22)
      : (<String, NoShape>, <Dictionary[[print,type,self,],[External,TypeType,External]], NoShape>, <Dictionary[[x,],[Tensor[Float32]]], NoShape>) -> (<Any(Tensor)[Float32], (-2)>)
      #scope: (Default)
      # In file /home/yuming/ACL-DGReID-mindspore/fastreid/modeling/backbones/meta_dynamic_router_resnet.py:473/        print("x type", type(x))/
  %24([CNode]126) = S-Prim-MakeTuple("x")
      : (<String, NoShape>) -> (<Tuple[String], TupleShape(NoShape)>)
      #scope: (Default)
      # In file /home/yuming/ACL-DGReID-mindspore/fastreid/modeling/backbones/meta_dynamic_router_resnet.py:476/        print("x type", type(x))/
  %25([CNode]127) = S-Prim-MakeTuple("x")
      : (<String, NoShape>) -> (<Tuple[String], TupleShape(NoShape)>)
      #scope: (Default)
      # In file /home/yuming/ACL-DGReID-mindspore/fastreid/modeling/backbones/meta_dynamic_router_resnet.py:475/        x = mindspore.Tensor(x)/
  %26(x) = call @mindspore_nn_layer_pooling_MaxPool2d_construct.128(%20)
      : (<Tensor[Float32], (8, 64, 8, 8)>) -> (<Tensor[Float32], (8, 64, 4, 4)>)
      #scope: (Default)
      # In file /home/yuming/ACL-DGReID-mindspore/fastreid/modeling/backbones/meta_dynamic_router_resnet.py:474/        x = self.maxpool(x)/
  %27([CNode]129) = S-Prim-MakeTuple(%26)
      : (<Tensor[Float32], (8, 64, 4, 4)>) -> (<Tuple[Tensor[Float32]], TupleShape((8, 64, 4, 4))>)
      #scope: (Default)
      # In file /home/yuming/ACL-DGReID-mindspore/fastreid/modeling/backbones/meta_dynamic_router_resnet.py:475/        x = mindspore.Tensor(x)/
  %28([CNode]130) = S-Prim-make_dict(%25, %27)
      : (<Tuple[String], TupleShape(NoShape)>, <Tuple[Tensor[Float32]], TupleShape((8, 64, 4, 4))>) -> (<Dictionary[[x,],[Tensor[Float32]]], NoShape>)
      #scope: (Default)
      # In file /home/yuming/ACL-DGReID-mindspore/fastreid/modeling/backbones/meta_dynamic_router_resnet.py:475/        x = mindspore.Tensor(x)/
  %29(x) = PyInterpret[side_effect_io: Bool(1)](Script['mindspore.Tensor(x)'], {"print": InterpretedObject, "type": ClassType, "self": InterpretedObject, "mindspore": Module}, %28)
      : (<String, NoShape>, <Dictionary[[print,type,self,mindspore,],[External,TypeType,External*2]], NoShape>, <Dictionary[[x,],[Tensor[Float32]]], NoShape>) -> (<Any(Tensor)[Float32], (-2)>)
      #scope: (Default)
      # In file /home/yuming/ACL-DGReID-mindspore/fastreid/modeling/backbones/meta_dynamic_router_resnet.py:475/        x = mindspore.Tensor(x)/
  %30([CNode]131) = S-Prim-MakeTuple(%29)
      : (<Any(Tensor)[Float32], (-2)>) -> (<Tuple[Any(Tensor)[Float32]], TupleShape((-2))>)
      #scope: (Default)
      # In file /home/yuming/ACL-DGReID-mindspore/fastreid/modeling/backbones/meta_dynamic_router_resnet.py:476/        print("x type", type(x))/
  %31([CNode]132) = S-Prim-make_dict(%24, %30)
      : (<Tuple[String], TupleShape(NoShape)>, <Tuple[Any(Tensor)[Float32]], TupleShape((-2))>) -> (<Dictionary[[x,],[Any(Tensor)[Float32]]], NoShape>)
      #scope: (Default)
      # In file /home/yuming/ACL-DGReID-mindspore/fastreid/modeling/backbones/meta_dynamic_router_resnet.py:476/        print("x type", type(x))/
  %32([CNode]133) = PyInterpret[side_effect_io: Bool(1)](Script['type(x)'], {"print": InterpretedObject, "type": ClassType, "self": InterpretedObject, "mindspore": Module}, %31)
      : (<String, NoShape>, <Dictionary[[print,type,self,mindspore,],[External,TypeType,External*2]], NoShape>, <Dictionary[[x,],[Any(Tensor)[Float32]]], NoShape>) -> (<Any(Tensor)[Float32], (-2)>)
      #scope: (Default)
      # In file /home/yuming/ACL-DGReID-mindspore/fastreid/modeling/backbones/meta_dynamic_router_resnet.py:476/        print("x type", type(x))/
  %33([CNode]134) = call @print_.102("x type", %32)
      : (<String, NoShape>, <Any(Tensor)[Float32], (-2)>) -> (<Any(Tensor)[Float32], (-2)>)
      #scope: (Default)
      # In file /home/yuming/ACL-DGReID-mindspore/fastreid/modeling/backbones/meta_dynamic_router_resnet.py:476/        print("x type", type(x))/
  %34([CNode]135) = MakeTuple(%1, %4, %8, %13, %18, %23, %33)
      : (<Tensor[Int32], (1)>, <Tensor[Int32], (1)>, <Any(Tensor)[Float32], (-2)>, <Any(Tensor)[Float32], (-2)>, <Any(Tensor)[Float32], (-2)>, <Any(Tensor)[Float32], (-2)>, <Any(Tensor)[Float32], (-2)>) -> (<Tuple[Tensor[Int32]*2,Any(Tensor)[Float32]*5], TupleShape((1), (1), (-2), (-2), (-2), (-2), (-2))>)
      #scope: (Default)
  %35([CNode]136) = StopGradient(%34)
      : (<Tuple[Tensor[Int32]*2,Any(Tensor)[Float32]*5], TupleShape((1), (1), (-2), (-2), (-2), (-2), (-2))>) -> (<Tuple[Tensor[Int32]*2,Any(Tensor)[Float32]*5], TupleShape((1), (1), (-2), (-2), (-2), (-2), (-2))>)
      #scope: (Default)
  %36([CNode]137) = S-Prim-inner_len(%para3_NL_1_idx)
      : (<Ref[Tensor[Int64]], (1)>) -> (<Int64, NoShape>)
      #scope: (Default)
      # In file /home/yuming/ACL-DGReID-mindspore/fastreid/modeling/backbones/meta_dynamic_router_resnet.py:483/        if len(self.NL_1_idx) == 0:/
  %37([CNode]138) = S-Prim-equal(%36, I64(0))
      : (<Int64, NoShape>, <Int64, NoShape>) -> (<Bool, NoShape>)
      #scope: (Default)
      # In file /home/yuming/ACL-DGReID-mindspore/fastreid/modeling/backbones/meta_dynamic_router_resnet.py:483/        if len(self.NL_1_idx) == 0:/
  %38([CNode]139) = Cond(%37, Bool(0))
      : (<Bool, NoShape>, <Bool, NoShape>) -> (<Bool, NoShape>)
      #scope: (Default)
      # In file /home/yuming/ACL-DGReID-mindspore/fastreid/modeling/backbones/meta_dynamic_router_resnet.py:483/        if len(self.NL_1_idx) == 0:/
  %39([CNode]140) = Switch(%38, call @✓fastreid_modeling_backbones_meta_dynamic_router_resnet_ResNet_construct.141, call @✗fastreid_modeling_backbones_meta_dynamic_router_resnet_ResNet_construct.84)
      : (<Bool, NoShape>, <Func, NoShape>, <Func, NoShape>) -> (<Func, NoShape>)
      #scope: (Default)
      # In file /home/yuming/ACL-DGReID-mindspore/fastreid/modeling/backbones/meta_dynamic_router_resnet.py:483/        if len(self.NL_1_idx) == 0:/

#------------------------> 0
  %40([CNode]142) = %39()
      #scope: (Default)
      # In file /home/yuming/ACL-DGReID-mindspore/fastreid/modeling/backbones/meta_dynamic_router_resnet.py:483/        if len(self.NL_1_idx) == 0:/
  %41([CNode]143) = Depend[side_effect_propagate: I64(1)](%40, %35)
      : (<null>, <Tuple[Tensor[Int32]*2,Any(Tensor)[Float32]*5], TupleShape((1), (1), (-2), (-2), (-2), (-2), (-2))>) -> (<null>)
      #scope: (Default)
      # In file /home/yuming/ACL-DGReID-mindspore/fastreid/modeling/backbones/meta_dynamic_router_resnet.py:483/        if len(self.NL_1_idx) == 0:/
  Return(%41)
      : (<null>)
      #scope: (Default)
      # In file /home/yuming/ACL-DGReID-mindspore/fastreid/modeling/backbones/meta_dynamic_router_resnet.py:483/        if len(self.NL_1_idx) == 0:/
}
# Order:
#   1: @fastreid_modeling_backbones_meta_dynamic_router_resnet_ResNet_construct.83:[CNode]103{[0]: ValueNode<FuncGraph> print_.102, [1]: ValueNode<Int64Imm> 4}
#   2: @fastreid_modeling_backbones_meta_dynamic_router_resnet_ResNet_construct.83:[CNode]104{[0]: ValueNode<Primitive> getattr, [1]: x, [2]: ValueNode<StringImm> shape}
#   3: @fastreid_modeling_backbones_meta_dynamic_router_resnet_ResNet_construct.83:[CNode]105{[0]: ValueNode<Primitive> JoinedStr, [1]: ValueNode<StringImm> ndim , [2]: [CNode]104}
#   4: @fastreid_modeling_backbones_meta_dynamic_router_resnet_ResNet_construct.83:[CNode]106{[0]: ValueNode<FuncGraph> print_.102, [1]: [CNode]105}
#   5: @fastreid_modeling_backbones_meta_dynamic_router_resnet_ResNet_construct.83:[CNode]107{[0]: ValueNode<DoSignaturePrimitive> S-Prim-MakeTuple, [1]: ValueNode<StringImm> x}
#   6: @fastreid_modeling_backbones_meta_dynamic_router_resnet_ResNet_construct.83:[CNode]108{[0]: ValueNode<DoSignaturePrimitive> S-Prim-MakeTuple, [1]: x}
#   7: @fastreid_modeling_backbones_meta_dynamic_router_resnet_ResNet_construct.83:[CNode]109{[0]: ValueNode<DoSignaturePrimitive> S-Prim-make_dict, [1]: [CNode]107, [2]: [CNode]108}
#   8: @fastreid_modeling_backbones_meta_dynamic_router_resnet_ResNet_construct.83:[CNode]110{[0]: ValueNode<Primitive> PyInterpret, [1]: ValueNode<Script> 'print("x type", type(x), x)', [2]: ValueNode<ValueDictionary> {'print': PythonObject(type: <class 'builtin_function_or_method'>, value: <built-in function print>), 'type': class 'type'}, [3]: [CNode]109}
#   9: @fastreid_modeling_backbones_meta_dynamic_router_resnet_ResNet_construct.83:x{[0]: ValueNode<FuncGraph> fastreid_modeling_ops_MetaConv2d_construct.112, [1]: x}
#  10: @fastreid_modeling_backbones_meta_dynamic_router_resnet_ResNet_construct.83:[CNode]111{[0]: ValueNode<DoSignaturePrimitive> S-Prim-MakeTuple, [1]: ValueNode<StringImm> x}
#  11: @fastreid_modeling_backbones_meta_dynamic_router_resnet_ResNet_construct.83:[CNode]113{[0]: ValueNode<DoSignaturePrimitive> S-Prim-MakeTuple, [1]: x}
#  12: @fastreid_modeling_backbones_meta_dynamic_router_resnet_ResNet_construct.83:[CNode]114{[0]: ValueNode<DoSignaturePrimitive> S-Prim-make_dict, [1]: [CNode]111, [2]: [CNode]113}
#  13: @fastreid_modeling_backbones_meta_dynamic_router_resnet_ResNet_construct.83:[CNode]115{[0]: ValueNode<Primitive> PyInterpret, [1]: ValueNode<Script> 'print("x type", type(x), x)', [2]: ValueNode<ValueDictionary> {'print': PythonObject(type: <class 'builtin_function_or_method'>, value: <built-in function print>), 'type': class 'type', 'self': PythonObject(type: <class 'mindspore._extends.parse.namespace.ClassAttrNamespace'>, value: Namespace:fastreid.modeling.backbones.meta_dynamic_router_resnet..<ResNet::140555298141584>)}, [3]: [CNode]114}
#  14: @fastreid_modeling_backbones_meta_dynamic_router_resnet_ResNet_construct.83:x{[0]: ValueNode<FuncGraph> fastreid_modeling_ops_MetaBNNorm_construct.117, [1]: x}
#  15: @fastreid_modeling_backbones_meta_dynamic_router_resnet_ResNet_construct.83:[CNode]116{[0]: ValueNode<DoSignaturePrimitive> S-Prim-MakeTuple, [1]: ValueNode<StringImm> x}
#  16: @fastreid_modeling_backbones_meta_dynamic_router_resnet_ResNet_construct.83:[CNode]118{[0]: ValueNode<DoSignaturePrimitive> S-Prim-MakeTuple, [1]: x}
#  17: @fastreid_modeling_backbones_meta_dynamic_router_resnet_ResNet_construct.83:[CNode]119{[0]: ValueNode<DoSignaturePrimitive> S-Prim-make_dict, [1]: [CNode]116, [2]: [CNode]118}
#  18: @fastreid_modeling_backbones_meta_dynamic_router_resnet_ResNet_construct.83:[CNode]120{[0]: ValueNode<Primitive> PyInterpret, [1]: ValueNode<Script> 'print("x type", type(x), x)', [2]: ValueNode<ValueDictionary> {'print': PythonObject(type: <class 'builtin_function_or_method'>, value: <built-in function print>), 'type': class 'type', 'self': PythonObject(type: <class 'mindspore._extends.parse.namespace.ClassAttrNamespace'>, value: Namespace:fastreid.modeling.backbones.meta_dynamic_router_resnet..<ResNet::140555298141584>)}, [3]: [CNode]119}
#  19: @fastreid_modeling_backbones_meta_dynamic_router_resnet_ResNet_construct.83:x{[0]: ValueNode<FuncGraph> mindspore_nn_layer_activation_ReLU_construct.122, [1]: x}
#  20: @fastreid_modeling_backbones_meta_dynamic_router_resnet_ResNet_construct.83:[CNode]121{[0]: ValueNode<DoSignaturePrimitive> S-Prim-MakeTuple, [1]: ValueNode<StringImm> x}
#  21: @fastreid_modeling_backbones_meta_dynamic_router_resnet_ResNet_construct.83:[CNode]123{[0]: ValueNode<DoSignaturePrimitive> S-Prim-MakeTuple, [1]: x}
#  22: @fastreid_modeling_backbones_meta_dynamic_router_resnet_ResNet_construct.83:[CNode]124{[0]: ValueNode<DoSignaturePrimitive> S-Prim-make_dict, [1]: [CNode]121, [2]: [CNode]123}
#  23: @fastreid_modeling_backbones_meta_dynamic_router_resnet_ResNet_construct.83:[CNode]125{[0]: ValueNode<Primitive> PyInterpret, [1]: ValueNode<Script> 'print("x type", type(x))', [2]: ValueNode<ValueDictionary> {'print': PythonObject(type: <class 'builtin_function_or_method'>, value: <built-in function print>), 'type': class 'type', 'self': PythonObject(type: <class 'mindspore._extends.parse.namespace.ClassAttrNamespace'>, value: Namespace:fastreid.modeling.backbones.meta_dynamic_router_resnet..<ResNet::140555298141584>)}, [3]: [CNode]124}
#  24: @fastreid_modeling_backbones_meta_dynamic_router_resnet_ResNet_construct.83:x{[0]: ValueNode<FuncGraph> mindspore_nn_layer_pooling_MaxPool2d_construct.128, [1]: x}
#  25: @fastreid_modeling_backbones_meta_dynamic_router_resnet_ResNet_construct.83:[CNode]127{[0]: ValueNode<DoSignaturePrimitive> S-Prim-MakeTuple, [1]: ValueNode<StringImm> x}
#  26: @fastreid_modeling_backbones_meta_dynamic_router_resnet_ResNet_construct.83:[CNode]129{[0]: ValueNode<DoSignaturePrimitive> S-Prim-MakeTuple, [1]: x}
#  27: @fastreid_modeling_backbones_meta_dynamic_router_resnet_ResNet_construct.83:[CNode]130{[0]: ValueNode<DoSignaturePrimitive> S-Prim-make_dict, [1]: [CNode]127, [2]: [CNode]129}
#  28: @fastreid_modeling_backbones_meta_dynamic_router_resnet_ResNet_construct.83:x{[0]: ValueNode<Primitive> PyInterpret, [1]: ValueNode<Script> 'mindspore.Tensor(x)', [2]: ValueNode<ValueDictionary> {'print': PythonObject(type: <class 'builtin_function_or_method'>, value: <built-in function print>), 'type': class 'type', 'self': PythonObject(type: <class 'mindspore._extends.parse.namespace.ClassAttrNamespace'>, value: Namespace:fastreid.modeling.backbones.meta_dynamic_router_resnet..<ResNet::140555298141584>), 'mindspore': Module: 'Namespace:mindspore'}, [3]: [CNode]130}
#  29: @fastreid_modeling_backbones_meta_dynamic_router_resnet_ResNet_construct.83:[CNode]126{[0]: ValueNode<DoSignaturePrimitive> S-Prim-MakeTuple, [1]: ValueNode<StringImm> x}
#  30: @fastreid_modeling_backbones_meta_dynamic_router_resnet_ResNet_construct.83:[CNode]131{[0]: ValueNode<DoSignaturePrimitive> S-Prim-MakeTuple, [1]: x}
#  31: @fastreid_modeling_backbones_meta_dynamic_router_resnet_ResNet_construct.83:[CNode]132{[0]: ValueNode<DoSignaturePrimitive> S-Prim-make_dict, [1]: [CNode]126, [2]: [CNode]131}
#  32: @fastreid_modeling_backbones_meta_dynamic_router_resnet_ResNet_construct.83:[CNode]133{[0]: ValueNode<Primitive> PyInterpret, [1]: ValueNode<Script> 'type(x)', [2]: ValueNode<ValueDictionary> {'print': PythonObject(type: <class 'builtin_function_or_method'>, value: <built-in function print>), 'type': class 'type', 'self': PythonObject(type: <class 'mindspore._extends.parse.namespace.ClassAttrNamespace'>, value: Namespace:fastreid.modeling.backbones.meta_dynamic_router_resnet..<ResNet::140555298141584>), 'mindspore': Module: 'Namespace:mindspore'}, [3]: [CNode]132}
#  33: @fastreid_modeling_backbones_meta_dynamic_router_resnet_ResNet_construct.83:[CNode]134{[0]: ValueNode<FuncGraph> print_.102, [1]: ValueNode<StringImm> x type, [2]: [CNode]133}
#  34: @fastreid_modeling_backbones_meta_dynamic_router_resnet_ResNet_construct.83:[CNode]137{[0]: ValueNode<DoSignaturePrimitive> S-Prim-inner_len, [1]: NL_1_idx}
#  35: @fastreid_modeling_backbones_meta_dynamic_router_resnet_ResNet_construct.83:[CNode]138{[0]: ValueNode<DoSignaturePrimitive> S-Prim-equal, [1]: [CNode]137, [2]: ValueNode<Int64Imm> 0}
#  36: @fastreid_modeling_backbones_meta_dynamic_router_resnet_ResNet_construct.83:[CNode]139{[0]: ValueNode<Primitive> Cond, [1]: [CNode]138, [2]: ValueNode<BoolImm> false}
#  37: @fastreid_modeling_backbones_meta_dynamic_router_resnet_ResNet_construct.83:[CNode]140{[0]: ValueNode<Primitive> Switch, [1]: [CNode]139, [2]: ValueNode<FuncGraph> ✓fastreid_modeling_backbones_meta_dynamic_router_resnet_ResNet_construct.141, [3]: ValueNode<FuncGraph> ✗fastreid_modeling_backbones_meta_dynamic_router_resnet_ResNet_construct.84}
#  38: @fastreid_modeling_backbones_meta_dynamic_router_resnet_ResNet_construct.83:[CNode]142{[0]: [CNode]140}
#  39: @fastreid_modeling_backbones_meta_dynamic_router_resnet_ResNet_construct.83:[CNode]144{[0]: ValueNode<Primitive> Return, [1]: [CNode]143}


subgraph attr:
training : 0
subgraph instance: ✗fastreid_modeling_backbones_meta_dynamic_router_resnet_ResNet_construct.84 : 0x7095e770
# In file /home/yuming/ACL-DGReID-mindspore/fastreid/modeling/backbones/meta_dynamic_router_resnet.py:483/        if len(self.NL_1_idx) == 0:/
subgraph @✗fastreid_modeling_backbones_meta_dynamic_router_resnet_ResNet_construct.84 parent: [subgraph @fastreid_modeling_backbones_meta_dynamic_router_resnet_ResNet_construct.83]() {

#------------------------> 1
  %1([CNode]145) = call @↓fastreid_modeling_backbones_meta_dynamic_router_resnet_ResNet_construct.85()
      #scope: (Default)
  Return(%1)
      : (<null>)
      #scope: (Default)
      # In file /home/yuming/ACL-DGReID-mindspore/fastreid/modeling/backbones/meta_dynamic_router_resnet.py:483/        if len(self.NL_1_idx) == 0:/
}
# Order:
#   1: @✗fastreid_modeling_backbones_meta_dynamic_router_resnet_ResNet_construct.84:[CNode]146{[0]: ValueNode<Primitive> Return, [1]: [CNode]145}
#   2: @✗fastreid_modeling_backbones_meta_dynamic_router_resnet_ResNet_construct.84:[CNode]145{[0]: ValueNode<FuncGraph> ↓fastreid_modeling_backbones_meta_dynamic_router_resnet_ResNet_construct.85}


subgraph attr:
after_block : 1
training : 0
subgraph instance: ↓fastreid_modeling_backbones_meta_dynamic_router_resnet_ResNet_construct.85 : 0x7c16abd0
# In file /home/yuming/ACL-DGReID-mindspore/fastreid/modeling/backbones/meta_dynamic_router_resnet.py:483/        if len(self.NL_1_idx) == 0:/
subgraph @↓fastreid_modeling_backbones_meta_dynamic_router_resnet_ResNet_construct.85 parent: [subgraph @fastreid_modeling_backbones_meta_dynamic_router_resnet_ResNet_construct.83]() {
  %1([CNode]127) = $(fastreid_modeling_backbones_meta_dynamic_router_resnet_ResNet_construct.83):S-Prim-MakeTuple("x")
      : (<String, NoShape>) -> (<Tuple[String], TupleShape(NoShape)>)
      #scope: (Default)
      # In file /home/yuming/ACL-DGReID-mindspore/fastreid/modeling/backbones/meta_dynamic_router_resnet.py:475/        x = mindspore.Tensor(x)/
  %2(x) = $(fastreid_modeling_backbones_meta_dynamic_router_resnet_ResNet_construct.83):call @fastreid_modeling_ops_MetaConv2d_construct.112(%para1_x)
      : (<Tensor[Float32], (8, 3, 16, 16)>) -> (<Tensor[Float32], (8, 64, 8, 8)>)
      #scope: (Default)
      # In file /home/yuming/ACL-DGReID-mindspore/fastreid/modeling/backbones/meta_dynamic_router_resnet.py:468/        x = self.conv1(x)/
  %3(x) = $(fastreid_modeling_backbones_meta_dynamic_router_resnet_ResNet_construct.83):call @fastreid_modeling_ops_MetaBNNorm_construct.117(%2)
      : (<Tensor[Float32], (8, 64, 8, 8)>) -> (<Tensor[Float32], (8, 64, 8, 8)>)
      #scope: (Default)
      # In file /home/yuming/ACL-DGReID-mindspore/fastreid/modeling/backbones/meta_dynamic_router_resnet.py:470/        x = self.bn1(x)/
  %4(x) = $(fastreid_modeling_backbones_meta_dynamic_router_resnet_ResNet_construct.83):call @mindspore_nn_layer_activation_ReLU_construct.122(%3)
      : (<Tensor[Float32], (8, 64, 8, 8)>) -> (<Tensor[Float32], (8, 64, 8, 8)>)
      #scope: (Default)
      # In file /home/yuming/ACL-DGReID-mindspore/fastreid/modeling/backbones/meta_dynamic_router_resnet.py:472/        x = self.relu(x)/
  %5(x) = $(fastreid_modeling_backbones_meta_dynamic_router_resnet_ResNet_construct.83):call @mindspore_nn_layer_pooling_MaxPool2d_construct.128(%4)
      : (<Tensor[Float32], (8, 64, 8, 8)>) -> (<Tensor[Float32], (8, 64, 4, 4)>)
      #scope: (Default)
      # In file /home/yuming/ACL-DGReID-mindspore/fastreid/modeling/backbones/meta_dynamic_router_resnet.py:474/        x = self.maxpool(x)/
  %6([CNode]129) = $(fastreid_modeling_backbones_meta_dynamic_router_resnet_ResNet_construct.83):S-Prim-MakeTuple(%5)
      : (<Tensor[Float32], (8, 64, 4, 4)>) -> (<Tuple[Tensor[Float32]], TupleShape((8, 64, 4, 4))>)
      #scope: (Default)
      # In file /home/yuming/ACL-DGReID-mindspore/fastreid/modeling/backbones/meta_dynamic_router_resnet.py:475/        x = mindspore.Tensor(x)/
  %7([CNode]130) = $(fastreid_modeling_backbones_meta_dynamic_router_resnet_ResNet_construct.83):S-Prim-make_dict(%1, %6)
      : (<Tuple[String], TupleShape(NoShape)>, <Tuple[Tensor[Float32]], TupleShape((8, 64, 4, 4))>) -> (<Dictionary[[x,],[Tensor[Float32]]], NoShape>)
      #scope: (Default)
      # In file /home/yuming/ACL-DGReID-mindspore/fastreid/modeling/backbones/meta_dynamic_router_resnet.py:475/        x = mindspore.Tensor(x)/
  %8(x) = $(fastreid_modeling_backbones_meta_dynamic_router_resnet_ResNet_construct.83):PyInterpret[side_effect_io: Bool(1)](Script['mindspore.Tensor(x)'], {"print": InterpretedObject, "type": ClassType, "self": InterpretedObject, "mindspore": Module}, %7)
      : (<String, NoShape>, <Dictionary[[print,type,self,mindspore,],[External,TypeType,External*2]], NoShape>, <Dictionary[[x,],[Tensor[Float32]]], NoShape>) -> (<Any(Tensor)[Float32], (-2)>)
      #scope: (Default)
      # In file /home/yuming/ACL-DGReID-mindspore/fastreid/modeling/backbones/meta_dynamic_router_resnet.py:475/        x = mindspore.Tensor(x)/

#------------------------> 2
  %9(x) = call @mindspore_nn_layer_container_SequentialCell_construct.86(%8)
      : (<Any(Tensor)[Float32], (-2)>) -> (<null>)
      #scope: (Default)
      # In file /home/yuming/ACL-DGReID-mindspore/fastreid/modeling/backbones/meta_dynamic_router_resnet.py:486/        x = self.layer1(x)/
  %10([CNode]148) = call @fastreid_modeling_backbones_meta_dynamic_router_resnet_HyperRouter_construct.147(%9, None)
      : (<null>, <null>) -> (<null>)
      #scope: (Default)
      # In file /home/yuming/ACL-DGReID-mindspore/fastreid/modeling/backbones/meta_dynamic_router_resnet.py:499/        weight, domain_cls_logit = self.router1(x, opt)/
  %11(domain_cls_logit) = S-Prim-getitem(%10, I64(1))
      : (<null>, <null>) -> (<null>)
      #scope: (Default)
      # In file /home/yuming/ACL-DGReID-mindspore/fastreid/modeling/backbones/meta_dynamic_router_resnet.py:499/        weight, domain_cls_logit = self.router1(x, opt)/
  %12([CNode]149) = StopGradient(%11)
      : (<null>) -> (<null>)
      #scope: (Default)
  %13([CNode]150) = S-Prim-inner_len(%para3_NL_1_idx)
      : (<Ref[Tensor[Int64]], (1)>) -> (<null>)
      #scope: (Default)
      # In file /home/yuming/ACL-DGReID-mindspore/fastreid/modeling/backbones/meta_dynamic_router_resnet.py:514/        if len(self.NL_2_idx) == 0:/
  %14([CNode]151) = S-Prim-equal(%13, I64(0))
      : (<null>, <null>) -> (<null>)
      #scope: (Default)
      # In file /home/yuming/ACL-DGReID-mindspore/fastreid/modeling/backbones/meta_dynamic_router_resnet.py:514/        if len(self.NL_2_idx) == 0:/
  %15([CNode]152) = Cond(%14, Bool(0))
      : (<null>, <null>) -> (<null>)
      #scope: (Default)
      # In file /home/yuming/ACL-DGReID-mindspore/fastreid/modeling/backbones/meta_dynamic_router_resnet.py:514/        if len(self.NL_2_idx) == 0:/
  %16([CNode]153) = Switch(%15, call @✓↓fastreid_modeling_backbones_meta_dynamic_router_resnet_ResNet_construct.154, call @✗↓fastreid_modeling_backbones_meta_dynamic_router_resnet_ResNet_construct.155)
      : (<null>, <null>, <null>) -> (<null>)
      #scope: (Default)
      # In file /home/yuming/ACL-DGReID-mindspore/fastreid/modeling/backbones/meta_dynamic_router_resnet.py:514/        if len(self.NL_2_idx) == 0:/
  %17([CNode]156) = %16()
      #scope: (Default)
      # In file /home/yuming/ACL-DGReID-mindspore/fastreid/modeling/backbones/meta_dynamic_router_resnet.py:514/        if len(self.NL_2_idx) == 0:/
  %18([CNode]157) = Depend[side_effect_propagate: I64(1)](%17, %12)
      : (<null>, <null>) -> (<null>)
      #scope: (Default)
      # In file /home/yuming/ACL-DGReID-mindspore/fastreid/modeling/backbones/meta_dynamic_router_resnet.py:514/        if len(self.NL_2_idx) == 0:/
  Return(%18)
      : (<null>)
      #scope: (Default)
      # In file /home/yuming/ACL-DGReID-mindspore/fastreid/modeling/backbones/meta_dynamic_router_resnet.py:514/        if len(self.NL_2_idx) == 0:/
}
# Order:
#   1: @↓fastreid_modeling_backbones_meta_dynamic_router_resnet_ResNet_construct.85:x{[0]: ValueNode<FuncGraph> mindspore_nn_layer_container_SequentialCell_construct.86, [1]: x}
#   2: @↓fastreid_modeling_backbones_meta_dynamic_router_resnet_ResNet_construct.85:x_invariant{[0]: ValueNode<FuncGraph> fastreid_modeling_backbones_meta_dynamic_router_resnet_Bottleneck_construct.158, [1]: x, [2]: ValueNode<None> None}
#   3: @↓fastreid_modeling_backbones_meta_dynamic_router_resnet_ResNet_construct.85:[CNode]159{[0]: ValueNode<Primitive> getattr, [1]: x_invariant, [2]: ValueNode<StringImm> shape}
#   4: @↓fastreid_modeling_backbones_meta_dynamic_router_resnet_ResNet_construct.85:N{[0]: ValueNode<DoSignaturePrimitive> S-Prim-getitem, [1]: [CNode]159, [2]: ValueNode<Int64Imm> 0}
#   5: @↓fastreid_modeling_backbones_meta_dynamic_router_resnet_ResNet_construct.85:C{[0]: ValueNode<DoSignaturePrimitive> S-Prim-getitem, [1]: [CNode]159, [2]: ValueNode<Int64Imm> 1}
#   6: @↓fastreid_modeling_backbones_meta_dynamic_router_resnet_ResNet_construct.85:H{[0]: ValueNode<DoSignaturePrimitive> S-Prim-getitem, [1]: [CNode]159, [2]: ValueNode<Int64Imm> 2}
#   7: @↓fastreid_modeling_backbones_meta_dynamic_router_resnet_ResNet_construct.85:W{[0]: ValueNode<DoSignaturePrimitive> S-Prim-getitem, [1]: [CNode]159, [2]: ValueNode<Int64Imm> 3}
#   8: @↓fastreid_modeling_backbones_meta_dynamic_router_resnet_ResNet_construct.85:[CNode]160{[0]: ValueNode<Primitive> getattr, [1]: x, [2]: ValueNode<StringImm> tile}
#   9: @↓fastreid_modeling_backbones_meta_dynamic_router_resnet_ResNet_construct.85:[CNode]161{[0]: ValueNode<DoSignaturePrimitive> S-Prim-MakeTuple, [1]: ValueNode<Int64Imm> 1, [2]: ValueNode<Int64Imm> 4, [3]: ValueNode<Int64Imm> 1, [4]: ValueNode<Int64Imm> 1}
#  10: @↓fastreid_modeling_backbones_meta_dynamic_router_resnet_ResNet_construct.85:[CNode]162{[0]: [CNode]160, [1]: [CNode]161}
#  11: @↓fastreid_modeling_backbones_meta_dynamic_router_resnet_ResNet_construct.85:[CNode]163{[0]: ValueNode<FuncGraph> fastreid_modeling_backbones_meta_dynamic_router_resnet_Bottleneck2_construct.164, [1]: [CNode]162, [2]: ValueNode<None> None}
#  12: @↓fastreid_modeling_backbones_meta_dynamic_router_resnet_ResNet_construct.85:[CNode]165{[0]: ValueNode<Primitive> getattr, [1]: [CNode]163, [2]: ValueNode<StringImm> reshape}
#  13: @↓fastreid_modeling_backbones_meta_dynamic_router_resnet_ResNet_construct.85:x_specific{[0]: [CNode]165, [1]: N, [2]: ValueNode<Int64Imm> 4, [3]: C, [4]: H, [5]: W}
#  14: @↓fastreid_modeling_backbones_meta_dynamic_router_resnet_ResNet_construct.85:[CNode]148{[0]: ValueNode<FuncGraph> fastreid_modeling_backbones_meta_dynamic_router_resnet_HyperRouter_construct.147, [1]: x, [2]: ValueNode<None> None}
#  15: @↓fastreid_modeling_backbones_meta_dynamic_router_resnet_ResNet_construct.85:weight{[0]: ValueNode<DoSignaturePrimitive> S-Prim-getitem, [1]: [CNode]148, [2]: ValueNode<Int64Imm> 0}
#  16: @↓fastreid_modeling_backbones_meta_dynamic_router_resnet_ResNet_construct.85:domain_cls_logit{[0]: ValueNode<DoSignaturePrimitive> S-Prim-getitem, [1]: [CNode]148, [2]: ValueNode<Int64Imm> 1}
#  17: @↓fastreid_modeling_backbones_meta_dynamic_router_resnet_ResNet_construct.85:[CNode]166{[0]: ValueNode<Primitive> getattr, [1]: ValueNode<ValueList> [], [2]: ValueNode<StringImm> append}
#  18: @↓fastreid_modeling_backbones_meta_dynamic_router_resnet_ResNet_construct.85:weights{[0]: [CNode]166, [1]: weight}
#  19: @↓fastreid_modeling_backbones_meta_dynamic_router_resnet_ResNet_construct.85:[CNode]167{[0]: ValueNode<Primitive> getattr, [1]: weight, [2]: ValueNode<StringImm> reshape}
#  20: @↓fastreid_modeling_backbones_meta_dynamic_router_resnet_ResNet_construct.85:[CNode]168{[0]: ValueNode<DoSignaturePrimitive> S-Prim-negative, [1]: ValueNode<Int64Imm> 1}
#  21: @↓fastreid_modeling_backbones_meta_dynamic_router_resnet_ResNet_construct.85:[CNode]169{[0]: [CNode]167, [1]: [CNode]168, [2]: ValueNode<Int64Imm> 4, [3]: ValueNode<Int64Imm> 1, [4]: ValueNode<Int64Imm> 1, [5]: ValueNode<Int64Imm> 1}
#  22: @↓fastreid_modeling_backbones_meta_dynamic_router_resnet_ResNet_construct.85:[CNode]170{[0]: ValueNode<DoSignaturePrimitive> S-Prim-mul, [1]: x_specific, [2]: [CNode]169}
#  23: @↓fastreid_modeling_backbones_meta_dynamic_router_resnet_ResNet_construct.85:[CNode]171{[0]: ValueNode<Primitive> getattr, [1]: [CNode]170, [2]: ValueNode<StringImm> sum}
#  24: @↓fastreid_modeling_backbones_meta_dynamic_router_resnet_ResNet_construct.85:x_specific{[0]: [CNode]171, [1]: ValueNode<Int64Imm> 1}
#  25: @↓fastreid_modeling_backbones_meta_dynamic_router_resnet_ResNet_construct.85:x_invariant{[0]: ValueNode<FuncGraph> fastreid_modeling_ops_MetaBNNorm_construct.172, [1]: x_invariant}
#  26: @↓fastreid_modeling_backbones_meta_dynamic_router_resnet_ResNet_construct.85:x_specific{[0]: ValueNode<FuncGraph> fastreid_modeling_ops_MetaBNNorm_construct.173, [1]: x_specific}
#  27: @↓fastreid_modeling_backbones_meta_dynamic_router_resnet_ResNet_construct.85:x{[0]: ValueNode<FuncGraph> fastreid_modeling_ops_MetaGate_construct.174, [1]: x_invariant, [2]: x_specific, [3]: ValueNode<None> None}
#  28: @↓fastreid_modeling_backbones_meta_dynamic_router_resnet_ResNet_construct.85:x{[0]: ValueNode<FuncGraph> fastreid_modeling_backbones_meta_dynamic_router_resnet_MetaSELayer_construct.175, [1]: x, [2]: ValueNode<None> None}
#  29: @↓fastreid_modeling_backbones_meta_dynamic_router_resnet_ResNet_construct.85:[CNode]176{[0]: ValueNode<FuncGraph> mindspore_nn_layer_pooling_AdaptiveAvgPool2d_construct.177, [1]: x}
#  30: @↓fastreid_modeling_backbones_meta_dynamic_router_resnet_ResNet_construct.85:temp{[0]: ValueNode<FuncGraph> fastreid_modeling_ops_MetaBNNorm_construct.178, [1]: [CNode]176}
#  31: @↓fastreid_modeling_backbones_meta_dynamic_router_resnet_ResNet_construct.85:[CNode]179{[0]: ValueNode<DoSignaturePrimitive> S-Prim-MakeTuple, [1]: ValueNode<StringImm> axis}
#  32: @↓fastreid_modeling_backbones_meta_dynamic_router_resnet_ResNet_construct.85:[CNode]180{[0]: ValueNode<DoSignaturePrimitive> S-Prim-MakeTuple, [1]: ValueNode<Int64Imm> 1}
#  33: @↓fastreid_modeling_backbones_meta_dynamic_router_resnet_ResNet_construct.85:[CNode]181{[0]: ValueNode<DoSignaturePrimitive> S-Prim-make_dict, [1]: [CNode]179, [2]: [CNode]180}
#  34: @↓fastreid_modeling_backbones_meta_dynamic_router_resnet_ResNet_construct.85:l2_normalize{[0]: ValueNode<UnpackCall> MetaFuncGraph-unpack_call.182, [1]: ValueNode<ClassType> class 'mindspore.ops.operations.nn_ops.L2Normalize', [2]: [CNode]181}
#  35: @↓fastreid_modeling_backbones_meta_dynamic_router_resnet_ResNet_construct.85:x_normalized{[0]: l2_normalize, [1]: temp}
#  36: @↓fastreid_modeling_backbones_meta_dynamic_router_resnet_ResNet_construct.85:[CNode]183{[0]: ValueNode<Primitive> getattr, [1]: ValueNode<ValueList> [], [2]: ValueNode<StringImm> append}
#  37: @↓fastreid_modeling_backbones_meta_dynamic_router_resnet_ResNet_construct.85:[CNode]184{[0]: ValueNode<DoSignaturePrimitive> S-Prim-MakeTuple, [1]: ValueNode<Ellipsis> Ellipsis, [2]: ValueNode<Int64Imm> 0, [3]: ValueNode<Int64Imm> 0}
#  38: @↓fastreid_modeling_backbones_meta_dynamic_router_resnet_ResNet_construct.85:[CNode]185{[0]: ValueNode<DoSignaturePrimitive> S-Prim-getitem, [1]: x_normalized, [2]: [CNode]184}
#  39: @↓fastreid_modeling_backbones_meta_dynamic_router_resnet_ResNet_construct.85:out_features{[0]: [CNode]183, [1]: [CNode]185}
#  40: @↓fastreid_modeling_backbones_meta_dynamic_router_resnet_ResNet_construct.85:[CNode]150{[0]: ValueNode<DoSignaturePrimitive> S-Prim-inner_len, [1]: NL_1_idx}
#  41: @↓fastreid_modeling_backbones_meta_dynamic_router_resnet_ResNet_construct.85:[CNode]151{[0]: ValueNode<DoSignaturePrimitive> S-Prim-equal, [1]: [CNode]150, [2]: ValueNode<Int64Imm> 0}
#  42: @↓fastreid_modeling_backbones_meta_dynamic_router_resnet_ResNet_construct.85:[CNode]152{[0]: ValueNode<Primitive> Cond, [1]: [CNode]151, [2]: ValueNode<BoolImm> false}
#  43: @↓fastreid_modeling_backbones_meta_dynamic_router_resnet_ResNet_construct.85:[CNode]153{[0]: ValueNode<Primitive> Switch, [1]: [CNode]152, [2]: ValueNode<FuncGraph> ✓↓fastreid_modeling_backbones_meta_dynamic_router_resnet_ResNet_construct.154, [3]: ValueNode<FuncGraph> ✗↓fastreid_modeling_backbones_meta_dynamic_router_resnet_ResNet_construct.155}
#  44: @↓fastreid_modeling_backbones_meta_dynamic_router_resnet_ResNet_construct.85:[CNode]156{[0]: [CNode]153}
#  45: @↓fastreid_modeling_backbones_meta_dynamic_router_resnet_ResNet_construct.85:[CNode]186{[0]: ValueNode<Primitive> Return, [1]: [CNode]157}


subgraph attr:
training : 0
subgraph instance: mindspore_nn_layer_container_SequentialCell_construct.86 : 0x86678d90
# In file /home/yuming/miniconda3/envs/reid/lib/python3.9/site-packages/mindspore/nn/layer/container.py:279/    def construct(self, input_data):/
subgraph @mindspore_nn_layer_container_SequentialCell_construct.86 parent: [subgraph @fastreid_modeling_backbones_meta_dynamic_router_resnet_ResNet_construct.83](%para442_input_data) {

#------------------------> 3
  %1([CNode]187) = call @↵mindspore_nn_layer_container_SequentialCell_construct.87(I64(0), %para442_input_data)
      : (<Int64, NoShape>, <Any(Tensor)[Float32], (-2)>) -> (<null>)
      #scope: (Default/layer1-SequentialCell)
      # In file /home/yuming/miniconda3/envs/reid/lib/python3.9/site-packages/mindspore/nn/layer/container.py:280/        for cell in self.cell_list:/
  Return(%1)
      : (<null>)
      #scope: (Default/layer1-SequentialCell)
      # In file /home/yuming/miniconda3/envs/reid/lib/python3.9/site-packages/mindspore/nn/layer/container.py:280/        for cell in self.cell_list:/
}
# Order:
#   1: @mindspore_nn_layer_container_SequentialCell_construct.86:[CNode]188{[0]: ValueNode<FuncGraph> ms_len_with_iterable_check.189, [1]: [CNode]190}
#   2: @mindspore_nn_layer_container_SequentialCell_construct.86:[CNode]187{[0]: ValueNode<FuncGraph> ↵mindspore_nn_layer_container_SequentialCell_construct.87, [1]: ValueNode<Int64Imm> 0, [2]: input_data}
#   3: @mindspore_nn_layer_container_SequentialCell_construct.86:[CNode]191{[0]: ValueNode<Primitive> Return, [1]: [CNode]187}


subgraph attr:
training : 0
subgraph instance: ↵mindspore_nn_layer_container_SequentialCell_construct.87 : 0x865ed2a0
# In file /home/yuming/miniconda3/envs/reid/lib/python3.9/site-packages/mindspore/nn/layer/container.py:280/        for cell in self.cell_list:/
subgraph @↵mindspore_nn_layer_container_SequentialCell_construct.87 parent: [subgraph @mindspore_nn_layer_container_SequentialCell_construct.86](%para443_, %para444_) {
  %1([CNode]190) = $(mindspore_nn_layer_container_SequentialCell_construct.86):MakeTuple(call @fastreid_modeling_backbones_meta_dynamic_router_resnet_Bottleneck_construct.192, call @fastreid_modeling_backbones_meta_dynamic_router_resnet_Bottleneck_construct.193)
      : (<Func, NoShape>, <Func, NoShape>) -> (<Tuple[Func*2], TupleShape(NoShape, NoShape)>)
      #scope: (Default/layer1-SequentialCell)
      # In file /home/yuming/miniconda3/envs/reid/lib/python3.9/site-packages/mindspore/nn/layer/container.py:280/        for cell in self.cell_list:/
  %2([CNode]188) = $(mindspore_nn_layer_container_SequentialCell_construct.86):call @ms_len_with_iterable_check.189(%1)
      : (<Tuple[Func*2], TupleShape(NoShape, NoShape)>) -> (<Int64, NoShape>)
      #scope: (Default/layer1-SequentialCell)
      # In file /home/yuming/miniconda3/envs/reid/lib/python3.9/site-packages/mindspore/nn/layer/container.py:280/        for cell in self.cell_list:/
  %3([CNode]194) = MultitypeFuncGraph-less{(List, List), (Tensor, Number), (Tensor, Tensor), (Tuple, Tuple), (Number, Tensor), (String, String), (Number, Number)}(%para443_@[CNode]88, %2)
      : (<Int64, NoShape>, <Int64, NoShape>) -> (<Bool, NoShape>)
      #scope: (Default/layer1-SequentialCell)
      # In file /home/yuming/miniconda3/envs/reid/lib/python3.9/site-packages/mindspore/nn/layer/container.py:280/        for cell in self.cell_list:/
  %4([CNode]195) = Switch(%3, call @↻mindspore_nn_layer_container_SequentialCell_construct.89, call @↓mindspore_nn_layer_container_SequentialCell_construct.196)
      : (<Bool, NoShape>, <Func, NoShape>, <Func, NoShape>) -> (<Func, NoShape>)
      #scope: (Default/layer1-SequentialCell)
      # In file /home/yuming/miniconda3/envs/reid/lib/python3.9/site-packages/mindspore/nn/layer/container.py:280/        for cell in self.cell_list:/

#------------------------> 4
  %5([CNode]197) = %4()
      #scope: (Default/layer1-SequentialCell)
      # In file /home/yuming/miniconda3/envs/reid/lib/python3.9/site-packages/mindspore/nn/layer/container.py:280/        for cell in self.cell_list:/
  Return(%5)
      : (<null>)
      #scope: (Default/layer1-SequentialCell)
      # In file /home/yuming/miniconda3/envs/reid/lib/python3.9/site-packages/mindspore/nn/layer/container.py:280/        for cell in self.cell_list:/
}
# Order:
#   1: @↵mindspore_nn_layer_container_SequentialCell_construct.87:[CNode]194{[0]: ValueNode<MultitypeFuncGraph> MetaFuncGraph-less.198, [1]: @[CNode]88, [2]: [CNode]188}
#   2: @↵mindspore_nn_layer_container_SequentialCell_construct.87:[CNode]195{[0]: ValueNode<Primitive> Switch, [1]: [CNode]194, [2]: ValueNode<FuncGraph> ↻mindspore_nn_layer_container_SequentialCell_construct.89, [3]: ValueNode<FuncGraph> ↓mindspore_nn_layer_container_SequentialCell_construct.196}
#   3: @↵mindspore_nn_layer_container_SequentialCell_construct.87:[CNode]197{[0]: [CNode]195}
#   4: @↵mindspore_nn_layer_container_SequentialCell_construct.87:[CNode]199{[0]: ValueNode<Primitive> Return, [1]: [CNode]197}


subgraph attr:
training : 0
subgraph instance: ↻mindspore_nn_layer_container_SequentialCell_construct.89 : 0x865f03f0
# In file /home/yuming/miniconda3/envs/reid/lib/python3.9/site-packages/mindspore/nn/layer/container.py:280/        for cell in self.cell_list:/
subgraph @↻mindspore_nn_layer_container_SequentialCell_construct.89 parent: [subgraph @↵mindspore_nn_layer_container_SequentialCell_construct.87]() {
  %1([CNode]88) = MultitypeFuncGraph-add{(COOTensor, COOTensor), (CSRTensor, CSRTensor), (Number, Number), (String, String), (Tensor, List), (Tuple, Tuple), (Tensor, Number), (Number, Tensor), (Tuple, Tensor), (Tensor, Tuple), (COOTensor, Tensor), (List, List), (Tensor, COOTensor), (Tensor, Tensor), (List, Tensor), (RowTensor, Tensor), (NoneType, NoneType)}(%para443_@[CNode]88, I64(1))
      : (<Int64, NoShape>, <Int64, NoShape>) -> (<Int64, NoShape>)
      #scope: (Default/layer1-SequentialCell)
      # In file /home/yuming/miniconda3/envs/reid/lib/python3.9/site-packages/mindspore/nn/layer/container.py:280/        for cell in self.cell_list:/
  %2([CNode]200) = StopGradient(%1)
      : (<Int64, NoShape>) -> (<Int64, NoShape>)
      #scope: (Default/layer1-SequentialCell)
      # In file /home/yuming/ACL-DGReID-mindspore/fastreid/modeling/backbones/meta_dynamic_router_resnet.py:486/        x = self.layer1(x)/
  %3([CNode]190) = $(mindspore_nn_layer_container_SequentialCell_construct.86):MakeTuple(call @fastreid_modeling_backbones_meta_dynamic_router_resnet_Bottleneck_construct.192, call @fastreid_modeling_backbones_meta_dynamic_router_resnet_Bottleneck_construct.193)
      : (<Func, NoShape>, <Func, NoShape>) -> (<Tuple[Func*2], TupleShape(NoShape, NoShape)>)
      #scope: (Default/layer1-SequentialCell)
      # In file /home/yuming/miniconda3/envs/reid/lib/python3.9/site-packages/mindspore/nn/layer/container.py:280/        for cell in self.cell_list:/
  %4([CNode]202) = call @ms_iter.201(%3)
      : (<Tuple[Func*2], TupleShape(NoShape, NoShape)>) -> (<Tuple[Func*2], TupleShape(NoShape, NoShape)>)
      #scope: (Default/layer1-SequentialCell)
      # In file /home/yuming/miniconda3/envs/reid/lib/python3.9/site-packages/mindspore/nn/layer/container.py:280/        for cell in self.cell_list:/
  %5(cell) = S-Prim-getitem(%4, %para443_@[CNode]88)
      : (<Tuple[Func*2], TupleShape(NoShape, NoShape)>, <Int64, NoShape>) -> (<Func, NoShape>)
      #scope: (Default/layer1-SequentialCell)
      # In file /home/yuming/miniconda3/envs/reid/lib/python3.9/site-packages/mindspore/nn/layer/container.py:280/        for cell in self.cell_list:/

#------------------------> 5
  %6(input_data) = %5(%para444_фinput_data)
      : (<Any(Tensor)[Float32], (-2)>) -> (<null>)
      #scope: (Default/layer1-SequentialCell)
      # In file /home/yuming/miniconda3/envs/reid/lib/python3.9/site-packages/mindspore/nn/layer/container.py:281/            input_data = cell(input_data)/
  %7([CNode]203) = call @↵mindspore_nn_layer_container_SequentialCell_construct.87(%1, %6)
      : (<Int64, NoShape>, <null>) -> (<null>)
      #scope: (Default/layer1-SequentialCell)
      # In file /home/yuming/miniconda3/envs/reid/lib/python3.9/site-packages/mindspore/nn/layer/container.py:280/        for cell in self.cell_list:/
  %8([CNode]204) = Depend[side_effect_propagate: I64(1)](%7, %2)
      : (<null>, <Int64, NoShape>) -> (<null>)
      #scope: (Default/layer1-SequentialCell)
      # In file /home/yuming/miniconda3/envs/reid/lib/python3.9/site-packages/mindspore/nn/layer/container.py:280/        for cell in self.cell_list:/
  Return(%8)
      : (<null>)
      #scope: (Default/layer1-SequentialCell)
      # In file /home/yuming/miniconda3/envs/reid/lib/python3.9/site-packages/mindspore/nn/layer/container.py:280/        for cell in self.cell_list:/
}
# Order:
#   1: @↻mindspore_nn_layer_container_SequentialCell_construct.89:[CNode]202{[0]: ValueNode<FuncGraph> ms_iter.201, [1]: [CNode]190}
#   2: @↻mindspore_nn_layer_container_SequentialCell_construct.89:cell{[0]: ValueNode<DoSignaturePrimitive> S-Prim-getitem, [1]: [CNode]202, [2]: @[CNode]88}
#   3: @↻mindspore_nn_layer_container_SequentialCell_construct.89:[CNode]88{[0]: ValueNode<MultitypeFuncGraph> MetaFuncGraph-add.73, [1]: @[CNode]88, [2]: ValueNode<Int64Imm> 1}
#   4: @↻mindspore_nn_layer_container_SequentialCell_construct.89:input_data{[0]: cell, [1]: фinput_data}
#   5: @↻mindspore_nn_layer_container_SequentialCell_construct.89:[CNode]203{[0]: ValueNode<FuncGraph> ↵mindspore_nn_layer_container_SequentialCell_construct.87, [1]: [CNode]88, [2]: input_data}
#   6: @↻mindspore_nn_layer_container_SequentialCell_construct.89:[CNode]205{[0]: ValueNode<Primitive> Return, [1]: [CNode]204}


subgraph attr:
training : 0
subgraph instance: fastreid_modeling_backbones_meta_dynamic_router_resnet_Bottleneck_construct.90 : 0x86ec4360
# In file /home/yuming/ACL-DGReID-mindspore/fastreid/modeling/backbones/meta_dynamic_router_resnet.py:241/    def construct(self, x, opt=-1):/
subgraph @fastreid_modeling_backbones_meta_dynamic_router_resnet_Bottleneck_construct.90 parent: [subgraph @fastreid_modeling_backbones_meta_dynamic_router_resnet_ResNet_construct.83](%para445_x) {
  %1([CNode]206) = S-Prim-equal(None, None)
      : (<None, NoShape>, <None, NoShape>) -> (<Bool, NoShape>)
      #scope: (Default/layer1-SequentialCell/0-Bottleneck)
      # In file /home/yuming/ACL-DGReID-mindspore/fastreid/modeling/backbones/meta_dynamic_router_resnet.py:242/        if opt == None:/
  %2([CNode]207) = Cond(%1, Bool(0))
      : (<Bool, NoShape>, <Bool, NoShape>) -> (<Bool, NoShape>)
      #scope: (Default/layer1-SequentialCell/0-Bottleneck)
      # In file /home/yuming/ACL-DGReID-mindspore/fastreid/modeling/backbones/meta_dynamic_router_resnet.py:242/        if opt == None:/
  %3([CNode]208) = Switch(%2, call @✓fastreid_modeling_backbones_meta_dynamic_router_resnet_Bottleneck_construct.91, call @✗fastreid_modeling_backbones_meta_dynamic_router_resnet_Bottleneck_construct.209)
      : (<Bool, NoShape>, <Func, NoShape>, <Func, NoShape>) -> (<Func, NoShape>)
      #scope: (Default/layer1-SequentialCell/0-Bottleneck)
      # In file /home/yuming/ACL-DGReID-mindspore/fastreid/modeling/backbones/meta_dynamic_router_resnet.py:242/        if opt == None:/

#------------------------> 6
  %4([CNode]210) = %3()
      #scope: (Default/layer1-SequentialCell/0-Bottleneck)
      # In file /home/yuming/ACL-DGReID-mindspore/fastreid/modeling/backbones/meta_dynamic_router_resnet.py:242/        if opt == None:/
  %5([CNode]211) = TupleGetItem(%4, I64(0))
      : (<null>, <null>) -> (<null>)
      #scope: (Default/layer1-SequentialCell)
      # In file /home/yuming/miniconda3/envs/reid/lib/python3.9/site-packages/mindspore/nn/layer/container.py:280/        for cell in self.cell_list:/
  %6([CNode]212) = TupleGetItem(%4, I64(1))
      : (<null>, <null>) -> (<null>)
      #scope: (Default/layer1-SequentialCell)
      # In file /home/yuming/miniconda3/envs/reid/lib/python3.9/site-packages/mindspore/nn/layer/container.py:280/        for cell in self.cell_list:/
  %7([CNode]214) = call @↓fastreid_modeling_backbones_meta_dynamic_router_resnet_Bottleneck_construct.213(%5, %6)
      : (<null>, <null>) -> (<null>)
      #scope: (Default/layer1-SequentialCell)
      # In file /home/yuming/miniconda3/envs/reid/lib/python3.9/site-packages/mindspore/nn/layer/container.py:280/        for cell in self.cell_list:/
  Return(%7)
      : (<null>)
      #scope: (Default/layer1-SequentialCell/0-Bottleneck)
      # In file /home/yuming/ACL-DGReID-mindspore/fastreid/modeling/backbones/meta_dynamic_router_resnet.py:242/        if opt == None:/
}
# Order:
#   1: @fastreid_modeling_backbones_meta_dynamic_router_resnet_Bottleneck_construct.90:[CNode]206{[0]: ValueNode<DoSignaturePrimitive> S-Prim-equal, [1]: ValueNode<None> None, [2]: ValueNode<None> None}
#   2: @fastreid_modeling_backbones_meta_dynamic_router_resnet_Bottleneck_construct.90:[CNode]207{[0]: ValueNode<Primitive> Cond, [1]: [CNode]206, [2]: ValueNode<BoolImm> false}
#   3: @fastreid_modeling_backbones_meta_dynamic_router_resnet_Bottleneck_construct.90:[CNode]208{[0]: ValueNode<Primitive> Switch, [1]: [CNode]207, [2]: ValueNode<FuncGraph> ✓fastreid_modeling_backbones_meta_dynamic_router_resnet_Bottleneck_construct.91, [3]: ValueNode<FuncGraph> ✗fastreid_modeling_backbones_meta_dynamic_router_resnet_Bottleneck_construct.209}
#   4: @fastreid_modeling_backbones_meta_dynamic_router_resnet_Bottleneck_construct.90:[CNode]210{[0]: [CNode]208}
#   5: @fastreid_modeling_backbones_meta_dynamic_router_resnet_Bottleneck_construct.90:[CNode]214{[0]: ValueNode<FuncGraph> ↓fastreid_modeling_backbones_meta_dynamic_router_resnet_Bottleneck_construct.213, [1]: [CNode]211, [2]: [CNode]212}
#   6: @fastreid_modeling_backbones_meta_dynamic_router_resnet_Bottleneck_construct.90:[CNode]215{[0]: ValueNode<Primitive> Return, [1]: [CNode]214}
#   7: @fastreid_modeling_backbones_meta_dynamic_router_resnet_Bottleneck_construct.90:[CNode]211{[0]: ValueNode<Primitive> TupleGetItem, [1]: [CNode]210, [2]: ValueNode<Int64Imm> 0}
#   8: @fastreid_modeling_backbones_meta_dynamic_router_resnet_Bottleneck_construct.90:[CNode]212{[0]: ValueNode<Primitive> TupleGetItem, [1]: [CNode]210, [2]: ValueNode<Int64Imm> 1}


subgraph attr:
training : 0
subgraph instance: ✓fastreid_modeling_backbones_meta_dynamic_router_resnet_Bottleneck_construct.91 : 0x85a61740
# In file /home/yuming/ACL-DGReID-mindspore/fastreid/modeling/backbones/meta_dynamic_router_resnet.py:242/        if opt == None:/
subgraph @✓fastreid_modeling_backbones_meta_dynamic_router_resnet_Bottleneck_construct.91 parent: [subgraph @fastreid_modeling_backbones_meta_dynamic_router_resnet_Bottleneck_construct.90]() {
  %1([CNode]216) = S-Prim-is_not(call @fastreid_modeling_backbones_meta_dynamic_router_resnet_Sequential_ext_construct.217, None)
      : (<Func, NoShape>, <None, NoShape>) -> (<Bool, NoShape>)
      #scope: (Default/layer1-SequentialCell/0-Bottleneck)
      # In file /home/yuming/ACL-DGReID-mindspore/fastreid/modeling/backbones/meta_dynamic_router_resnet.py:257/            if self.downsample is not None:/
  %2([CNode]218) = Cond(%1, Bool(0))
      : (<Bool, NoShape>, <Bool, NoShape>) -> (<Bool, NoShape>)
      #scope: (Default/layer1-SequentialCell/0-Bottleneck)
      # In file /home/yuming/ACL-DGReID-mindspore/fastreid/modeling/backbones/meta_dynamic_router_resnet.py:257/            if self.downsample is not None:/
  %3([CNode]219) = Switch(%2, call @✓✓fastreid_modeling_backbones_meta_dynamic_router_resnet_Bottleneck_construct.220, call @✗✓fastreid_modeling_backbones_meta_dynamic_router_resnet_Bottleneck_construct.221)
      : (<Bool, NoShape>, <Func, NoShape>, <Func, NoShape>) -> (<Func, NoShape>)
      #scope: (Default/layer1-SequentialCell/0-Bottleneck)
      # In file /home/yuming/ACL-DGReID-mindspore/fastreid/modeling/backbones/meta_dynamic_router_resnet.py:257/            if self.downsample is not None:/
  %4([CNode]222) = %3()
      #scope: (Default/layer1-SequentialCell/0-Bottleneck)
      # In file /home/yuming/ACL-DGReID-mindspore/fastreid/modeling/backbones/meta_dynamic_router_resnet.py:257/            if self.downsample is not None:/

#------------------------> 7
  %5([CNode]223) = call @↓✓fastreid_modeling_backbones_meta_dynamic_router_resnet_Bottleneck_construct.92(%4)
      : (<Any(Tensor)[Float64], (-2)>) -> (<null>)
      #scope: (Default/layer1-SequentialCell)
      # In file /home/yuming/miniconda3/envs/reid/lib/python3.9/site-packages/mindspore/nn/layer/container.py:280/        for cell in self.cell_list:/
  Return(%5)
      : (<null>)
      #scope: (Default/layer1-SequentialCell/0-Bottleneck)
      # In file /home/yuming/ACL-DGReID-mindspore/fastreid/modeling/backbones/meta_dynamic_router_resnet.py:257/            if self.downsample is not None:/
}
# Order:
#   1: @✓fastreid_modeling_backbones_meta_dynamic_router_resnet_Bottleneck_construct.91:out{[0]: ValueNode<FuncGraph> fastreid_modeling_ops_MetaConv2d_construct.224, [1]: residual}
#   2: @✓fastreid_modeling_backbones_meta_dynamic_router_resnet_Bottleneck_construct.91:out{[0]: ValueNode<FuncGraph> fastreid_modeling_ops_MetaIBNNorm_construct.225, [1]: out}
#   3: @✓fastreid_modeling_backbones_meta_dynamic_router_resnet_Bottleneck_construct.91:out{[0]: ValueNode<FuncGraph> mindspore_nn_layer_activation_ReLU_construct.226, [1]: out}
#   4: @✓fastreid_modeling_backbones_meta_dynamic_router_resnet_Bottleneck_construct.91:out{[0]: ValueNode<FuncGraph> fastreid_modeling_ops_MetaConv2d_construct.227, [1]: out}
#   5: @✓fastreid_modeling_backbones_meta_dynamic_router_resnet_Bottleneck_construct.91:out{[0]: ValueNode<FuncGraph> fastreid_modeling_ops_MetaBNNorm_construct.228, [1]: out}
#   6: @✓fastreid_modeling_backbones_meta_dynamic_router_resnet_Bottleneck_construct.91:out{[0]: ValueNode<FuncGraph> mindspore_nn_layer_activation_ReLU_construct.226, [1]: out}
#   7: @✓fastreid_modeling_backbones_meta_dynamic_router_resnet_Bottleneck_construct.91:out{[0]: ValueNode<FuncGraph> fastreid_modeling_ops_MetaConv2d_construct.229, [1]: out}
#   8: @✓fastreid_modeling_backbones_meta_dynamic_router_resnet_Bottleneck_construct.91:out{[0]: ValueNode<FuncGraph> fastreid_modeling_ops_MetaBNNorm_construct.230, [1]: out}
#   9: @✓fastreid_modeling_backbones_meta_dynamic_router_resnet_Bottleneck_construct.91:out{[0]: ValueNode<FuncGraph> mindspore_nn_layer_basic_Identity_construct.231, [1]: out}
#  10: @✓fastreid_modeling_backbones_meta_dynamic_router_resnet_Bottleneck_construct.91:[CNode]216{[0]: ValueNode<DoSignaturePrimitive> S-Prim-is_not, [1]: ValueNode<FuncGraph> fastreid_modeling_backbones_meta_dynamic_router_resnet_Sequential_ext_construct.217, [2]: ValueNode<None> None}
#  11: @✓fastreid_modeling_backbones_meta_dynamic_router_resnet_Bottleneck_construct.91:[CNode]218{[0]: ValueNode<Primitive> Cond, [1]: [CNode]216, [2]: ValueNode<BoolImm> false}
#  12: @✓fastreid_modeling_backbones_meta_dynamic_router_resnet_Bottleneck_construct.91:[CNode]219{[0]: ValueNode<Primitive> Switch, [1]: [CNode]218, [2]: ValueNode<FuncGraph> ✓✓fastreid_modeling_backbones_meta_dynamic_router_resnet_Bottleneck_construct.220, [3]: ValueNode<FuncGraph> ✗✓fastreid_modeling_backbones_meta_dynamic_router_resnet_Bottleneck_construct.221}
#  13: @✓fastreid_modeling_backbones_meta_dynamic_router_resnet_Bottleneck_construct.91:[CNode]222{[0]: [CNode]219}
#  14: @✓fastreid_modeling_backbones_meta_dynamic_router_resnet_Bottleneck_construct.91:[CNode]223{[0]: ValueNode<FuncGraph> ↓✓fastreid_modeling_backbones_meta_dynamic_router_resnet_Bottleneck_construct.92, [1]: [CNode]222}
#  15: @✓fastreid_modeling_backbones_meta_dynamic_router_resnet_Bottleneck_construct.91:[CNode]232{[0]: ValueNode<Primitive> Return, [1]: [CNode]223}


subgraph attr:
after_block : 1
training : 0
subgraph instance: ↓✓fastreid_modeling_backbones_meta_dynamic_router_resnet_Bottleneck_construct.92 : 0x88e75360
# In file /home/yuming/ACL-DGReID-mindspore/fastreid/modeling/backbones/meta_dynamic_router_resnet.py:257/            if self.downsample is not None:/
subgraph @↓✓fastreid_modeling_backbones_meta_dynamic_router_resnet_Bottleneck_construct.92 parent: [subgraph @✓fastreid_modeling_backbones_meta_dynamic_router_resnet_Bottleneck_construct.91](%para446_) {
  %1(out) = $(✓fastreid_modeling_backbones_meta_dynamic_router_resnet_Bottleneck_construct.91):call @fastreid_modeling_ops_MetaConv2d_construct.224(%para445_residual)
      : (<Any(Tensor)[Float32], (-2)>) -> (<Any(Tensor)[Float64], (-2)>)
      #scope: (Default/layer1-SequentialCell/0-Bottleneck)
      # In file /home/yuming/ACL-DGReID-mindspore/fastreid/modeling/backbones/meta_dynamic_router_resnet.py:245/            out = self.conv1(x)/

#------------------------> 8
  %2(out) = $(✓fastreid_modeling_backbones_meta_dynamic_router_resnet_Bottleneck_construct.91):call @fastreid_modeling_ops_MetaIBNNorm_construct.225(%1)
      : (<Any(Tensor)[Float64], (-2)>) -> (<null>)
      #scope: (Default/layer1-SequentialCell/0-Bottleneck)
      # In file /home/yuming/ACL-DGReID-mindspore/fastreid/modeling/backbones/meta_dynamic_router_resnet.py:246/            out = self.bn1(out)/
  %3(out) = $(✓fastreid_modeling_backbones_meta_dynamic_router_resnet_Bottleneck_construct.91):call @mindspore_nn_layer_activation_ReLU_construct.226(%2)
      : (<null>) -> (<null>)
      #scope: (Default/layer1-SequentialCell/0-Bottleneck)
      # In file /home/yuming/ACL-DGReID-mindspore/fastreid/modeling/backbones/meta_dynamic_router_resnet.py:247/            out = self.relu(out)/
  %4(out) = $(✓fastreid_modeling_backbones_meta_dynamic_router_resnet_Bottleneck_construct.91):call @fastreid_modeling_ops_MetaConv2d_construct.227(%3)
      : (<null>) -> (<null>)
      #scope: (Default/layer1-SequentialCell/0-Bottleneck)
      # In file /home/yuming/ACL-DGReID-mindspore/fastreid/modeling/backbones/meta_dynamic_router_resnet.py:249/            out = self.conv2(out)/
  %5(out) = $(✓fastreid_modeling_backbones_meta_dynamic_router_resnet_Bottleneck_construct.91):call @fastreid_modeling_ops_MetaBNNorm_construct.228(%4)
      : (<null>) -> (<null>)
      #scope: (Default/layer1-SequentialCell/0-Bottleneck)
      # In file /home/yuming/ACL-DGReID-mindspore/fastreid/modeling/backbones/meta_dynamic_router_resnet.py:250/            out = self.bn2(out)/
  %6(out) = $(✓fastreid_modeling_backbones_meta_dynamic_router_resnet_Bottleneck_construct.91):call @mindspore_nn_layer_activation_ReLU_construct.226(%5)
      : (<null>) -> (<null>)
      #scope: (Default/layer1-SequentialCell/0-Bottleneck)
      # In file /home/yuming/ACL-DGReID-mindspore/fastreid/modeling/backbones/meta_dynamic_router_resnet.py:251/            out = self.relu(out)/
  %7(out) = $(✓fastreid_modeling_backbones_meta_dynamic_router_resnet_Bottleneck_construct.91):call @fastreid_modeling_ops_MetaConv2d_construct.229(%6)
      : (<null>) -> (<null>)
      #scope: (Default/layer1-SequentialCell/0-Bottleneck)
      # In file /home/yuming/ACL-DGReID-mindspore/fastreid/modeling/backbones/meta_dynamic_router_resnet.py:253/            out = self.conv3(out)/
  %8(out) = $(✓fastreid_modeling_backbones_meta_dynamic_router_resnet_Bottleneck_construct.91):call @fastreid_modeling_ops_MetaBNNorm_construct.230(%7)
      : (<null>) -> (<null>)
      #scope: (Default/layer1-SequentialCell/0-Bottleneck)
      # In file /home/yuming/ACL-DGReID-mindspore/fastreid/modeling/backbones/meta_dynamic_router_resnet.py:254/            out = self.bn3(out)/
  %9(out) = $(✓fastreid_modeling_backbones_meta_dynamic_router_resnet_Bottleneck_construct.91):call @mindspore_nn_layer_basic_Identity_construct.231(%8)
      : (<null>) -> (<null>)
      #scope: (Default/layer1-SequentialCell/0-Bottleneck)
      # In file /home/yuming/ACL-DGReID-mindspore/fastreid/modeling/backbones/meta_dynamic_router_resnet.py:255/            out = self.se(out)/
  %10([CNode]233) = MakeTuple(%para446_фresidual, %9)
      : (<null>, <null>) -> (<null>)
      #scope: (Default/layer1-SequentialCell/0-Bottleneck)
      # In file /home/yuming/ACL-DGReID-mindspore/fastreid/modeling/backbones/meta_dynamic_router_resnet.py:243/            residual = x/
  Return(%10)
      : (<null>)
      #scope: (Default/layer1-SequentialCell/0-Bottleneck)
      # In file /home/yuming/ACL-DGReID-mindspore/fastreid/modeling/backbones/meta_dynamic_router_resnet.py:243/            residual = x/
}
# Order:
#   1: @↓✓fastreid_modeling_backbones_meta_dynamic_router_resnet_Bottleneck_construct.92:[CNode]233{[0]: ValueNode<Primitive> MakeTuple, [1]: фresidual, [2]: out}
#   2: @↓✓fastreid_modeling_backbones_meta_dynamic_router_resnet_Bottleneck_construct.92:[CNode]234{[0]: ValueNode<Primitive> Return, [1]: [CNode]233}


subgraph attr:
training : 0
subgraph instance: fastreid_modeling_ops_MetaIBNNorm_construct.93 : 0x860f0b00
# In file /home/yuming/ACL-DGReID-mindspore/fastreid/modeling/ops.py:198/    def construct(self, inputs, opt=-1):/
subgraph @fastreid_modeling_ops_MetaIBNNorm_construct.93 parent: [subgraph @fastreid_modeling_backbones_meta_dynamic_router_resnet_ResNet_construct.83](%para447_inputs) {
  %1([CNode]235) = getattr(%para447_inputs, "dim")
      : (<Any(Tensor)[Float64], (-2)>, <String, NoShape>) -> (<Any(Tensor)[Float64], (-2)>)
      #scope: (Default/layer1-SequentialCell/0-Bottleneck/bn1-MetaIBNNorm)
      # In file /home/yuming/ACL-DGReID-mindspore/fastreid/modeling/ops.py:199/        if inputs.dim() != 4:/
  %2([CNode]236) = %1()
      #scope: (Default/layer1-SequentialCell/0-Bottleneck/bn1-MetaIBNNorm)
      # In file /home/yuming/ACL-DGReID-mindspore/fastreid/modeling/ops.py:199/        if inputs.dim() != 4:/
  %3([CNode]237) = S-Prim-not_equal(%2, I64(4))
      : (<Any(Tensor)[Float64], (-2)>, <Int64, NoShape>) -> (<Any(Tensor)[Float64], (-2)>)
      #scope: (Default/layer1-SequentialCell/0-Bottleneck/bn1-MetaIBNNorm)
      # In file /home/yuming/ACL-DGReID-mindspore/fastreid/modeling/ops.py:199/        if inputs.dim() != 4:/
  %4([CNode]238) = Cond(%3, Bool(0))
      : (<Any(Tensor)[Float64], (-2)>, <Bool, NoShape>) -> (<Tensor[Bool], (-1)>)
      #scope: (Default/layer1-SequentialCell/0-Bottleneck/bn1-MetaIBNNorm)
      # In file /home/yuming/ACL-DGReID-mindspore/fastreid/modeling/ops.py:199/        if inputs.dim() != 4:/
  %5([CNode]239) = Switch(%4, call @✓fastreid_modeling_ops_MetaIBNNorm_construct.78, call @✗fastreid_modeling_ops_MetaIBNNorm_construct.79)
      : (<Tensor[Bool], (-1)>, <Func, NoShape>, <Func, NoShape>) -> (<Func, NoShape>)
      #scope: (Default/layer1-SequentialCell/0-Bottleneck/bn1-MetaIBNNorm)
      # In file /home/yuming/ACL-DGReID-mindspore/fastreid/modeling/ops.py:199/        if inputs.dim() != 4:/

#------------------------> 9
  %6([CNode]240) = %5()
      #scope: (Default/layer1-SequentialCell/0-Bottleneck/bn1-MetaIBNNorm)
      # In file /home/yuming/ACL-DGReID-mindspore/fastreid/modeling/ops.py:199/        if inputs.dim() != 4:/
  Return(%6)
      : (<null>)
      #scope: (Default/layer1-SequentialCell/0-Bottleneck/bn1-MetaIBNNorm)
      # In file /home/yuming/ACL-DGReID-mindspore/fastreid/modeling/ops.py:199/        if inputs.dim() != 4:/
}
# Order:
#   1: @fastreid_modeling_ops_MetaIBNNorm_construct.93:[CNode]235{[0]: ValueNode<Primitive> getattr, [1]: inputs, [2]: ValueNode<StringImm> dim}
#   2: @fastreid_modeling_ops_MetaIBNNorm_construct.93:[CNode]236{[0]: [CNode]235}
#   3: @fastreid_modeling_ops_MetaIBNNorm_construct.93:[CNode]237{[0]: ValueNode<DoSignaturePrimitive> S-Prim-not_equal, [1]: [CNode]236, [2]: ValueNode<Int64Imm> 4}
#   4: @fastreid_modeling_ops_MetaIBNNorm_construct.93:[CNode]238{[0]: ValueNode<Primitive> Cond, [1]: [CNode]237, [2]: ValueNode<BoolImm> false}
#   5: @fastreid_modeling_ops_MetaIBNNorm_construct.93:[CNode]239{[0]: ValueNode<Primitive> Switch, [1]: [CNode]238, [2]: ValueNode<FuncGraph> ✓fastreid_modeling_ops_MetaIBNNorm_construct.78, [3]: ValueNode<FuncGraph> ✗fastreid_modeling_ops_MetaIBNNorm_construct.79}
#   6: @fastreid_modeling_ops_MetaIBNNorm_construct.93:[CNode]240{[0]: [CNode]239}
#   7: @fastreid_modeling_ops_MetaIBNNorm_construct.93:[CNode]241{[0]: ValueNode<Primitive> Return, [1]: [CNode]240}


subgraph attr:
training : 0
subgraph instance: ✗fastreid_modeling_ops_MetaIBNNorm_construct.79 : 0x7f52f5f0
# In file /home/yuming/ACL-DGReID-mindspore/fastreid/modeling/ops.py:199/        if inputs.dim() != 4:/
subgraph @✗fastreid_modeling_ops_MetaIBNNorm_construct.79 parent: [subgraph @fastreid_modeling_ops_MetaIBNNorm_construct.93]() {

#------------------------> 10
  %1([CNode]242) = call @↓fastreid_modeling_ops_MetaIBNNorm_construct.94()
      #scope: (Default/layer1-SequentialCell/0-Bottleneck/bn1-MetaIBNNorm)
      # In file /home/yuming/ACL-DGReID-mindspore/fastreid/modeling/ops.py:199/        if inputs.dim() != 4:/
  Return(%1)
      : (<null>)
      #scope: (Default/layer1-SequentialCell/0-Bottleneck/bn1-MetaIBNNorm)
      # In file /home/yuming/ACL-DGReID-mindspore/fastreid/modeling/ops.py:199/        if inputs.dim() != 4:/
}
# Order:
#   1: @✗fastreid_modeling_ops_MetaIBNNorm_construct.79:[CNode]242{[0]: ValueNode<FuncGraph> ↓fastreid_modeling_ops_MetaIBNNorm_construct.94}
#   2: @✗fastreid_modeling_ops_MetaIBNNorm_construct.79:[CNode]243{[0]: ValueNode<Primitive> Return, [1]: [CNode]242}


subgraph attr:
after_block : 1
training : 0
subgraph instance: ↓fastreid_modeling_ops_MetaIBNNorm_construct.94 : 0x7f52fac0
# In file /home/yuming/ACL-DGReID-mindspore/fastreid/modeling/ops.py:199/        if inputs.dim() != 4:/
subgraph @↓fastreid_modeling_ops_MetaIBNNorm_construct.94 parent: [subgraph @fastreid_modeling_ops_MetaIBNNorm_construct.93]() {

#------------------------> 11
  %1(split) = call @split.244(%para447_inputs, I64(32), I64(1))
      : (<Any(Tensor)[Float64], (-2)>, <Int64, NoShape>, <Int64, NoShape>) -> (<null>)
      #scope: (Default/layer1-SequentialCell/0-Bottleneck/bn1-MetaIBNNorm)
      # In file /home/yuming/ACL-DGReID-mindspore/fastreid/modeling/ops.py:203/        split = mindspore.ops.split(inputs, self.half, 1)/
  %2([CNode]245) = S-Prim-getitem(%1, I64(0))
      : (<null>, <null>) -> (<null>)
      #scope: (Default/layer1-SequentialCell/0-Bottleneck/bn1-MetaIBNNorm)
      # In file /home/yuming/ACL-DGReID-mindspore/fastreid/modeling/ops.py:204/        out1 = self.IN(split[0], opt)/
  %3(out1) = call @fastreid_modeling_ops_MetaINNorm_construct.246(%2, None)
      : (<null>, <null>) -> (<null>)
      #scope: (Default/layer1-SequentialCell/0-Bottleneck/bn1-MetaIBNNorm)
      # In file /home/yuming/ACL-DGReID-mindspore/fastreid/modeling/ops.py:204/        out1 = self.IN(split[0], opt)/
  %4([CNode]247) = S-Prim-getitem(%1, I64(1))
      : (<null>, <null>) -> (<null>)
      #scope: (Default/layer1-SequentialCell/0-Bottleneck/bn1-MetaIBNNorm)
      # In file /home/yuming/ACL-DGReID-mindspore/fastreid/modeling/ops.py:205/        out2 = self.BN(split[1])/
  %5(out2) = call @fastreid_modeling_ops_MetaBNNorm_construct.248(%4)
      : (<null>) -> (<null>)
      #scope: (Default/layer1-SequentialCell/0-Bottleneck/bn1-MetaIBNNorm)
      # In file /home/yuming/ACL-DGReID-mindspore/fastreid/modeling/ops.py:205/        out2 = self.BN(split[1])/
  %6([CNode]249) = S-Prim-MakeTuple(%3, %5)
      : (<null>, <null>) -> (<null>)
      #scope: (Default/layer1-SequentialCell/0-Bottleneck/bn1-MetaIBNNorm)
      # In file /home/yuming/ACL-DGReID-mindspore/fastreid/modeling/ops.py:209/        out = mindspore.ops.cat((out1, out2), 1)/
  %7(out) = call @cat.250(%6, I64(1))
      : (<null>, <null>) -> (<null>)
      #scope: (Default/layer1-SequentialCell/0-Bottleneck/bn1-MetaIBNNorm)
      # In file /home/yuming/ACL-DGReID-mindspore/fastreid/modeling/ops.py:209/        out = mindspore.ops.cat((out1, out2), 1)/
  Return(%7)
      : (<null>)
      #scope: (Default/layer1-SequentialCell/0-Bottleneck/bn1-MetaIBNNorm)
      # In file /home/yuming/ACL-DGReID-mindspore/fastreid/modeling/ops.py:210/        return out/
}
# Order:
#   1: @↓fastreid_modeling_ops_MetaIBNNorm_construct.94:split{[0]: ValueNode<FuncGraph> split.244, [1]: inputs, [2]: ValueNode<Int64Imm> 32, [3]: ValueNode<Int64Imm> 1}
#   2: @↓fastreid_modeling_ops_MetaIBNNorm_construct.94:[CNode]245{[0]: ValueNode<DoSignaturePrimitive> S-Prim-getitem, [1]: split, [2]: ValueNode<Int64Imm> 0}
#   3: @↓fastreid_modeling_ops_MetaIBNNorm_construct.94:out1{[0]: ValueNode<FuncGraph> fastreid_modeling_ops_MetaINNorm_construct.246, [1]: [CNode]245, [2]: ValueNode<None> None}
#   4: @↓fastreid_modeling_ops_MetaIBNNorm_construct.94:[CNode]247{[0]: ValueNode<DoSignaturePrimitive> S-Prim-getitem, [1]: split, [2]: ValueNode<Int64Imm> 1}
#   5: @↓fastreid_modeling_ops_MetaIBNNorm_construct.94:out2{[0]: ValueNode<FuncGraph> fastreid_modeling_ops_MetaBNNorm_construct.248, [1]: [CNode]247}
#   6: @↓fastreid_modeling_ops_MetaIBNNorm_construct.94:[CNode]249{[0]: ValueNode<DoSignaturePrimitive> S-Prim-MakeTuple, [1]: out1, [2]: out2}
#   7: @↓fastreid_modeling_ops_MetaIBNNorm_construct.94:out{[0]: ValueNode<FuncGraph> cat.250, [1]: [CNode]249, [2]: ValueNode<Int64Imm> 1}
#   8: @↓fastreid_modeling_ops_MetaIBNNorm_construct.94:[CNode]251{[0]: ValueNode<Primitive> Return, [1]: out}


subgraph attr:
subgraph instance: split.95 : 0x7fd438020480
# In file /home/yuming/miniconda3/envs/reid/lib/python3.9/site-packages/mindspore/ops/function/array_func.py:5622/def split(tensor, split_size_or_sections, axis=0):/
subgraph @split.95(%para448_tensor, %para449_split_size_or_sections, %para450_axis) {
  %1([CNode]252) = S-Prim-isinstance(%para448_tensor, ClassType)
      : (<Any(Tensor)[Float64], (-2)>, <TypeType, NoShape>) -> (<Any(Tensor)[Float64], (-2)>)
      #scope: (Default/layer1-SequentialCell/0-Bottleneck/bn1-MetaIBNNorm)
      # In file /home/yuming/miniconda3/envs/reid/lib/python3.9/site-packages/mindspore/ops/function/array_func.py:5660/    if not isinstance(tensor, Tensor):/
  %2([CNode]253) = S-Prim-logical_not(%1)
      : (<Any(Tensor)[Float64], (-2)>) -> (<Any(Tensor)[Float64], (-2)>)
      #scope: (Default/layer1-SequentialCell/0-Bottleneck/bn1-MetaIBNNorm)
      # In file /home/yuming/miniconda3/envs/reid/lib/python3.9/site-packages/mindspore/ops/function/array_func.py:5660/    if not isinstance(tensor, Tensor):/
  %3([CNode]254) = Cond(%2, Bool(0))
      : (<Any(Tensor)[Float64], (-2)>, <Bool, NoShape>) -> (<Tensor[Bool], (-1)>)
      #scope: (Default/layer1-SequentialCell/0-Bottleneck/bn1-MetaIBNNorm)
      # In file /home/yuming/miniconda3/envs/reid/lib/python3.9/site-packages/mindspore/ops/function/array_func.py:5660/    if not isinstance(tensor, Tensor):/
  %4([CNode]255) = Switch(%3, call @✓split.80, call @✗split.81)
      : (<Tensor[Bool], (-1)>, <Func, NoShape>, <Func, NoShape>) -> (<Func, NoShape>)
      #scope: (Default/layer1-SequentialCell/0-Bottleneck/bn1-MetaIBNNorm)
      # In file /home/yuming/miniconda3/envs/reid/lib/python3.9/site-packages/mindspore/ops/function/array_func.py:5660/    if not isinstance(tensor, Tensor):/

#------------------------> 12
  %5([CNode]256) = %4()
      #scope: (Default/layer1-SequentialCell/0-Bottleneck/bn1-MetaIBNNorm)
      # In file /home/yuming/miniconda3/envs/reid/lib/python3.9/site-packages/mindspore/ops/function/array_func.py:5660/    if not isinstance(tensor, Tensor):/
  Return(%5)
      : (<null>)
      #scope: (Default/layer1-SequentialCell/0-Bottleneck/bn1-MetaIBNNorm)
      # In file /home/yuming/miniconda3/envs/reid/lib/python3.9/site-packages/mindspore/ops/function/array_func.py:5660/    if not isinstance(tensor, Tensor):/
}
# Order:
#   1: @split.95:[CNode]252{[0]: ValueNode<DoSignaturePrimitive> S-Prim-isinstance, [1]: tensor, [2]: ValueNode<ClassType> class 'mindspore.common.tensor.Tensor'}
#   2: @split.95:[CNode]253{[0]: ValueNode<DoSignaturePrimitive> S-Prim-logical_not, [1]: [CNode]252}
#   3: @split.95:[CNode]254{[0]: ValueNode<Primitive> Cond, [1]: [CNode]253, [2]: ValueNode<BoolImm> false}
#   4: @split.95:[CNode]255{[0]: ValueNode<Primitive> Switch, [1]: [CNode]254, [2]: ValueNode<FuncGraph> ✓split.80, [3]: ValueNode<FuncGraph> ✗split.81}
#   5: @split.95:[CNode]256{[0]: [CNode]255}
#   6: @split.95:[CNode]257{[0]: ValueNode<Primitive> Return, [1]: [CNode]256}


subgraph attr:
subgraph instance: ✗split.81 : 0x7fd438009fe0
# In file /home/yuming/miniconda3/envs/reid/lib/python3.9/site-packages/mindspore/ops/function/array_func.py:5660/    if not isinstance(tensor, Tensor):/
subgraph @✗split.81 parent: [subgraph @split.95]() {

#------------------------> 13
  %1([CNode]258) = call @↓split.96()
      #scope: (Default/layer1-SequentialCell/0-Bottleneck/bn1-MetaIBNNorm)
      # In file /home/yuming/miniconda3/envs/reid/lib/python3.9/site-packages/mindspore/ops/function/array_func.py:5660/    if not isinstance(tensor, Tensor):/
  Return(%1)
      : (<null>)
      #scope: (Default/layer1-SequentialCell/0-Bottleneck/bn1-MetaIBNNorm)
      # In file /home/yuming/miniconda3/envs/reid/lib/python3.9/site-packages/mindspore/ops/function/array_func.py:5660/    if not isinstance(tensor, Tensor):/
}
# Order:
#   1: @✗split.81:[CNode]258{[0]: ValueNode<FuncGraph> ↓split.96}
#   2: @✗split.81:[CNode]259{[0]: ValueNode<Primitive> Return, [1]: [CNode]258}


subgraph attr:
after_block : 1
subgraph instance: ↓split.96 : 0x7fd43801e400
# In file /home/yuming/miniconda3/envs/reid/lib/python3.9/site-packages/mindspore/ops/function/array_func.py:5660/    if not isinstance(tensor, Tensor):/
subgraph @↓split.96 parent: [subgraph @split.95]() {
  %1([CNode]260) = S-Prim-MakeTuple("axis")
      : (<String, NoShape>) -> (<Tuple[String], TupleShape(NoShape)>)
      #scope: (Default/layer1-SequentialCell/0-Bottleneck/bn1-MetaIBNNorm)
      # In file /home/yuming/miniconda3/envs/reid/lib/python3.9/site-packages/mindspore/ops/function/array_func.py:5662/    if type(axis) is not int:/
  %2([CNode]261) = S-Prim-MakeTuple(%para450_axis)
      : (<Int64, NoShape>) -> (<Tuple[Int64], TupleShape(NoShape)>)
      #scope: (Default/layer1-SequentialCell/0-Bottleneck/bn1-MetaIBNNorm)
      # In file /home/yuming/miniconda3/envs/reid/lib/python3.9/site-packages/mindspore/ops/function/array_func.py:5662/    if type(axis) is not int:/
  %3([CNode]262) = S-Prim-make_dict(%1, %2)
      : (<Tuple[String], TupleShape(NoShape)>, <Tuple[Int64], TupleShape(NoShape)>) -> (<Dictionary[[axis,],[Int64]], NoShape>)
      #scope: (Default/layer1-SequentialCell/0-Bottleneck/bn1-MetaIBNNorm)
      # In file /home/yuming/miniconda3/envs/reid/lib/python3.9/site-packages/mindspore/ops/function/array_func.py:5662/    if type(axis) is not int:/
  %4([CNode]263) = PyInterpret[side_effect_io: Bool(1)](Script['bool(type(axis) is not int)'], {"isinstance": InterpretedObject, "Tensor": ClassType, "type": ClassType, "int": ClassType}, %3)
      : (<String, NoShape>, <Dictionary[[isinstance,Tensor,type,int,],[External,TypeType*3]], NoShape>, <Dictionary[[axis,],[Int64]], NoShape>) -> (<Bool, NoShape>)
      #scope: (Default/layer1-SequentialCell/0-Bottleneck/bn1-MetaIBNNorm)
      # In file /home/yuming/miniconda3/envs/reid/lib/python3.9/site-packages/mindspore/ops/function/array_func.py:5662/    if type(axis) is not int:/
  %5([CNode]264) = Switch(%4, call @✓↓split.265, call @✗↓split.97)
      : (<Bool, NoShape>, <Func, NoShape>, <Func, NoShape>) -> (<Func, NoShape>)
      #scope: (Default/layer1-SequentialCell/0-Bottleneck/bn1-MetaIBNNorm)
      # In file /home/yuming/miniconda3/envs/reid/lib/python3.9/site-packages/mindspore/ops/function/array_func.py:5662/    if type(axis) is not int:/

#------------------------> 14
  %6([CNode]266) = %5()
      #scope: (Default/layer1-SequentialCell/0-Bottleneck/bn1-MetaIBNNorm)
      # In file /home/yuming/miniconda3/envs/reid/lib/python3.9/site-packages/mindspore/ops/function/array_func.py:5662/    if type(axis) is not int:/
  Return(%6)
      : (<null>)
      #scope: (Default/layer1-SequentialCell/0-Bottleneck/bn1-MetaIBNNorm)
      # In file /home/yuming/miniconda3/envs/reid/lib/python3.9/site-packages/mindspore/ops/function/array_func.py:5662/    if type(axis) is not int:/
}
# Order:
#   1: @↓split.96:[CNode]260{[0]: ValueNode<DoSignaturePrimitive> S-Prim-MakeTuple, [1]: ValueNode<StringImm> axis}
#   2: @↓split.96:[CNode]261{[0]: ValueNode<DoSignaturePrimitive> S-Prim-MakeTuple, [1]: axis}
#   3: @↓split.96:[CNode]262{[0]: ValueNode<DoSignaturePrimitive> S-Prim-make_dict, [1]: [CNode]260, [2]: [CNode]261}
#   4: @↓split.96:[CNode]263{[0]: ValueNode<Primitive> PyInterpret, [1]: ValueNode<Script> 'bool(type(axis) is not int)', [2]: ValueNode<ValueDictionary> {'isinstance': PythonObject(type: <class 'builtin_function_or_method'>, value: <built-in function isinstance>), 'Tensor': class 'mindspore.common.tensor.Tensor', 'type': class 'type', 'int': class 'int'}, [3]: [CNode]262}
#   5: @↓split.96:[CNode]264{[0]: ValueNode<Primitive> Switch, [1]: [CNode]263, [2]: ValueNode<FuncGraph> ✓↓split.265, [3]: ValueNode<FuncGraph> ✗↓split.97}
#   6: @↓split.96:[CNode]266{[0]: [CNode]264}
#   7: @↓split.96:[CNode]267{[0]: ValueNode<Primitive> Return, [1]: [CNode]266}


subgraph attr:
subgraph instance: ✗↓split.97 : 0x7fd438037680
# In file /home/yuming/miniconda3/envs/reid/lib/python3.9/site-packages/mindspore/ops/function/array_func.py:5662/    if type(axis) is not int:/
subgraph @✗↓split.97 parent: [subgraph @split.95]() {

#------------------------> 15
  %1([CNode]268) = call @↓↓split.98()
      #scope: (Default/layer1-SequentialCell/0-Bottleneck/bn1-MetaIBNNorm)
      # In file /home/yuming/miniconda3/envs/reid/lib/python3.9/site-packages/mindspore/ops/function/array_func.py:5662/    if type(axis) is not int:/
  Return(%1)
      : (<null>)
      #scope: (Default/layer1-SequentialCell/0-Bottleneck/bn1-MetaIBNNorm)
      # In file /home/yuming/miniconda3/envs/reid/lib/python3.9/site-packages/mindspore/ops/function/array_func.py:5662/    if type(axis) is not int:/
}
# Order:
#   1: @✗↓split.97:[CNode]268{[0]: ValueNode<FuncGraph> ↓↓split.98}
#   2: @✗↓split.97:[CNode]269{[0]: ValueNode<Primitive> Return, [1]: [CNode]268}


subgraph attr:
after_block : 1
subgraph instance: ↓↓split.98 : 0x7fd43803ce90
# In file /home/yuming/miniconda3/envs/reid/lib/python3.9/site-packages/mindspore/ops/function/array_func.py:5662/    if type(axis) is not int:/
subgraph @↓↓split.98 parent: [subgraph @split.95]() {
  %1([CNode]270) = S-Prim-MakeTuple("split_size_or_sections")
      : (<String, NoShape>) -> (<Tuple[String], TupleShape(NoShape)>)
      #scope: (Default/layer1-SequentialCell/0-Bottleneck/bn1-MetaIBNNorm)
      # In file /home/yuming/miniconda3/envs/reid/lib/python3.9/site-packages/mindspore/ops/function/array_func.py:5666/    if type(split_size_or_sections) is int:/
  %2([CNode]271) = S-Prim-MakeTuple(%para449_split_size_or_sections)
      : (<Int64, NoShape>) -> (<Tuple[Int64], TupleShape(NoShape)>)
      #scope: (Default/layer1-SequentialCell/0-Bottleneck/bn1-MetaIBNNorm)
      # In file /home/yuming/miniconda3/envs/reid/lib/python3.9/site-packages/mindspore/ops/function/array_func.py:5666/    if type(split_size_or_sections) is int:/
  %3([CNode]272) = S-Prim-make_dict(%1, %2)
      : (<Tuple[String], TupleShape(NoShape)>, <Tuple[Int64], TupleShape(NoShape)>) -> (<Dictionary[[split_size_or_sections,],[Int64]], NoShape>)
      #scope: (Default/layer1-SequentialCell/0-Bottleneck/bn1-MetaIBNNorm)
      # In file /home/yuming/miniconda3/envs/reid/lib/python3.9/site-packages/mindspore/ops/function/array_func.py:5666/    if type(split_size_or_sections) is int:/
  %4([CNode]273) = PyInterpret[side_effect_io: Bool(1)](Script['bool(type(split_size_or_sections) is int)'], {"isinstance": InterpretedObject, "Tensor": ClassType, "type": ClassType, "int": ClassType, "_canonicalize_axis": _canonicalize_axis[constexpr_prim: Bool(1)]}, %3)
      : (<String, NoShape>, <Dictionary[[isinstance,Tensor,type,int,_canonicalize_axis,],[External,TypeType*3,Func]], NoShape>, <Dictionary[[split_size_or_sections,],[Int64]], NoShape>) -> (<Bool, NoShape>)
      #scope: (Default/layer1-SequentialCell/0-Bottleneck/bn1-MetaIBNNorm)
      # In file /home/yuming/miniconda3/envs/reid/lib/python3.9/site-packages/mindspore/ops/function/array_func.py:5666/    if type(split_size_or_sections) is int:/
  %5([CNode]274) = Switch(%4, call @✓↓↓split.99, call @✗↓↓split.275)
      : (<Bool, NoShape>, <Func, NoShape>, <Func, NoShape>) -> (<Func, NoShape>)
      #scope: (Default/layer1-SequentialCell/0-Bottleneck/bn1-MetaIBNNorm)
      # In file /home/yuming/miniconda3/envs/reid/lib/python3.9/site-packages/mindspore/ops/function/array_func.py:5666/    if type(split_size_or_sections) is int:/

#------------------------> 16
  %6([CNode]276) = %5()
      #scope: (Default/layer1-SequentialCell/0-Bottleneck/bn1-MetaIBNNorm)
      # In file /home/yuming/miniconda3/envs/reid/lib/python3.9/site-packages/mindspore/ops/function/array_func.py:5666/    if type(split_size_or_sections) is int:/
  %7([CNode]278) = call @↓↓↓split.277(%6)
      : (<null>) -> (<null>)
      #scope: (Default/layer1-SequentialCell/0-Bottleneck/bn1-MetaIBNNorm)
      # In file /home/yuming/ACL-DGReID-mindspore/fastreid/modeling/ops.py:203/        split = mindspore.ops.split(inputs, self.half, 1)/
  Return(%7)
      : (<null>)
      #scope: (Default/layer1-SequentialCell/0-Bottleneck/bn1-MetaIBNNorm)
      # In file /home/yuming/miniconda3/envs/reid/lib/python3.9/site-packages/mindspore/ops/function/array_func.py:5666/    if type(split_size_or_sections) is int:/
}
# Order:
#   1: @↓↓split.98:[CNode]279{[0]: ValueNode<Primitive> getattr, [1]: tensor, [2]: ValueNode<StringImm> ndim}
#   2: @↓↓split.98:arr_axis{[0]: ValueNode<DoSignaturePrimitive> S-Prim-_canonicalize_axis, [1]: axis, [2]: [CNode]279}
#   3: @↓↓split.98:[CNode]270{[0]: ValueNode<DoSignaturePrimitive> S-Prim-MakeTuple, [1]: ValueNode<StringImm> split_size_or_sections}
#   4: @↓↓split.98:[CNode]271{[0]: ValueNode<DoSignaturePrimitive> S-Prim-MakeTuple, [1]: split_size_or_sections}
#   5: @↓↓split.98:[CNode]272{[0]: ValueNode<DoSignaturePrimitive> S-Prim-make_dict, [1]: [CNode]270, [2]: [CNode]271}
#   6: @↓↓split.98:[CNode]273{[0]: ValueNode<Primitive> PyInterpret, [1]: ValueNode<Script> 'bool(type(split_size_or_sections) is int)', [2]: ValueNode<ValueDictionary> {'isinstance': PythonObject(type: <class 'builtin_function_or_method'>, value: <built-in function isinstance>), 'Tensor': class 'mindspore.common.tensor.Tensor', 'type': class 'type', 'int': class 'int', '_canonicalize_axis': _canonicalize_axis}, [3]: [CNode]272}
#   7: @↓↓split.98:[CNode]274{[0]: ValueNode<Primitive> Switch, [1]: [CNode]273, [2]: ValueNode<FuncGraph> ✓↓↓split.99, [3]: ValueNode<FuncGraph> ✗↓↓split.275}
#   8: @↓↓split.98:[CNode]276{[0]: [CNode]274}
#   9: @↓↓split.98:[CNode]278{[0]: ValueNode<FuncGraph> ↓↓↓split.277, [1]: [CNode]276}
#  10: @↓↓split.98:[CNode]280{[0]: ValueNode<Primitive> Return, [1]: [CNode]278}


subgraph attr:
subgraph instance: ✓↓↓split.99 : 0x7fd4381a5230
# In file /home/yuming/miniconda3/envs/reid/lib/python3.9/site-packages/mindspore/ops/function/array_func.py:5666/    if type(split_size_or_sections) is int:/
subgraph @✓↓↓split.99 parent: [subgraph @↓↓split.98]() {
  %1([CNode]281) = S-Prim-greater(%para449_split_size_or_sections, I64(0))
      : (<Int64, NoShape>, <Int64, NoShape>) -> (<Bool, NoShape>)
      #scope: (Default/layer1-SequentialCell/0-Bottleneck/bn1-MetaIBNNorm)
      # In file /home/yuming/miniconda3/envs/reid/lib/python3.9/site-packages/mindspore/ops/function/array_func.py:5667/        if split_size_or_sections > 0:/
  %2([CNode]282) = Cond(%1, Bool(0))
      : (<Bool, NoShape>, <Bool, NoShape>) -> (<Bool, NoShape>)
      #scope: (Default/layer1-SequentialCell/0-Bottleneck/bn1-MetaIBNNorm)
      # In file /home/yuming/miniconda3/envs/reid/lib/python3.9/site-packages/mindspore/ops/function/array_func.py:5667/        if split_size_or_sections > 0:/
  %3([CNode]283) = Switch(%2, call @✓✓↓↓split.100, call @✗✓↓↓split.284)
      : (<Bool, NoShape>, <Func, NoShape>, <Func, NoShape>) -> (<Func, NoShape>)
      #scope: (Default/layer1-SequentialCell/0-Bottleneck/bn1-MetaIBNNorm)
      # In file /home/yuming/miniconda3/envs/reid/lib/python3.9/site-packages/mindspore/ops/function/array_func.py:5667/        if split_size_or_sections > 0:/

#------------------------> 17
  %4([CNode]285) = %3()
      #scope: (Default/layer1-SequentialCell/0-Bottleneck/bn1-MetaIBNNorm)
      # In file /home/yuming/miniconda3/envs/reid/lib/python3.9/site-packages/mindspore/ops/function/array_func.py:5667/        if split_size_or_sections > 0:/
  Return(%4)
      : (<null>)
      #scope: (Default/layer1-SequentialCell/0-Bottleneck/bn1-MetaIBNNorm)
      # In file /home/yuming/miniconda3/envs/reid/lib/python3.9/site-packages/mindspore/ops/function/array_func.py:5667/        if split_size_or_sections > 0:/
}
# Order:
#   1: @✓↓↓split.99:[CNode]281{[0]: ValueNode<DoSignaturePrimitive> S-Prim-greater, [1]: split_size_or_sections, [2]: ValueNode<Int64Imm> 0}
#   2: @✓↓↓split.99:[CNode]282{[0]: ValueNode<Primitive> Cond, [1]: [CNode]281, [2]: ValueNode<BoolImm> false}
#   3: @✓↓↓split.99:[CNode]283{[0]: ValueNode<Primitive> Switch, [1]: [CNode]282, [2]: ValueNode<FuncGraph> ✓✓↓↓split.100, [3]: ValueNode<FuncGraph> ✗✓↓↓split.284}
#   4: @✓↓↓split.99:[CNode]285{[0]: [CNode]283}
#   5: @✓↓↓split.99:[CNode]286{[0]: ValueNode<Primitive> Return, [1]: [CNode]285}


subgraph attr:
subgraph instance: ✓✓↓↓split.100 : 0x7fd4381a8900
# In file /home/yuming/miniconda3/envs/reid/lib/python3.9/site-packages/mindspore/ops/function/array_func.py:5667/        if split_size_or_sections > 0:/
subgraph @✓✓↓↓split.100 parent: [subgraph @↓↓split.98]() {

#------------------------> 18
  %1([CNode]287) = call @↓✓↓↓split.101()
      #scope: (Default/layer1-SequentialCell/0-Bottleneck/bn1-MetaIBNNorm)
      # In file /home/yuming/miniconda3/envs/reid/lib/python3.9/site-packages/mindspore/ops/function/array_func.py:5668/            res = _split_int(tensor, split_size_or_sections, arr_axis)/
  Return(%1)
      : (<null>)
      #scope: (Default/layer1-SequentialCell/0-Bottleneck/bn1-MetaIBNNorm)
      # In file /home/yuming/miniconda3/envs/reid/lib/python3.9/site-packages/mindspore/ops/function/array_func.py:5668/            res = _split_int(tensor, split_size_or_sections, arr_axis)/
}
# Order:
#   1: @✓✓↓↓split.100:res{[0]: ValueNode<FuncGraph> _split_int.288, [1]: tensor, [2]: split_size_or_sections, [3]: arr_axis}
#   2: @✓✓↓↓split.100:[CNode]287{[0]: ValueNode<FuncGraph> ↓✓↓↓split.101}
#   3: @✓✓↓↓split.100:[CNode]289{[0]: ValueNode<Primitive> Return, [1]: [CNode]287}


subgraph attr:
after_block : 1
subgraph instance: ↓✓↓↓split.101 : 0x7fd4381aa390
# In file /home/yuming/miniconda3/envs/reid/lib/python3.9/site-packages/mindspore/ops/function/array_func.py:5667/        if split_size_or_sections > 0:/
subgraph @↓✓↓↓split.101 parent: [subgraph @✓✓↓↓split.100]() {
  %1([CNode]279) = $(↓↓split.98):getattr(%para448_tensor, "ndim")
      : (<Any(Tensor)[Float64], (-2)>, <String, NoShape>) -> (<Any(Tensor)[Float64], (-2)>)
      #scope: (Default/layer1-SequentialCell/0-Bottleneck/bn1-MetaIBNNorm)
      # In file /home/yuming/miniconda3/envs/reid/lib/python3.9/site-packages/mindspore/ops/function/array_func.py:5664/    arr_axis = _canonicalize_axis(axis, tensor.ndim)/

#------------------------> 19
  %2(arr_axis) = $(↓↓split.98):S-Prim-_canonicalize_axis[constexpr_prim: Bool(1)](%para450_axis, %1)
      : (<Int64, NoShape>, <Any(Tensor)[Float64], (-2)>) -> (<null>)
      #scope: (Default/layer1-SequentialCell/0-Bottleneck/bn1-MetaIBNNorm)
      # In file /home/yuming/miniconda3/envs/reid/lib/python3.9/site-packages/mindspore/ops/function/array_func.py:5664/    arr_axis = _canonicalize_axis(axis, tensor.ndim)/
  %3(res) = $(✓✓↓↓split.100):call @_split_int.288(%para448_tensor, %para449_split_size_or_sections, %2)
      : (<Any(Tensor)[Float64], (-2)>, <Int64, NoShape>, <null>) -> (<null>)
      #scope: (Default/layer1-SequentialCell/0-Bottleneck/bn1-MetaIBNNorm)
      # In file /home/yuming/miniconda3/envs/reid/lib/python3.9/site-packages/mindspore/ops/function/array_func.py:5668/            res = _split_int(tensor, split_size_or_sections, arr_axis)/
  Return(%3)
      : (<null>)
      #scope: (Default/layer1-SequentialCell/0-Bottleneck/bn1-MetaIBNNorm)
      # In file /home/yuming/miniconda3/envs/reid/lib/python3.9/site-packages/mindspore/ops/function/array_func.py:5667/        if split_size_or_sections > 0:/
}
# Order:
#   1: @↓✓↓↓split.101:[CNode]290{[0]: ValueNode<Primitive> Return, [1]: res}


#===============================================================================
# num of function graphs in stack: 20/21 (Ignored 1 internal frames).
