# 1.This file shows the parsed IR info when graph evaluating failed to help find the problem.
# 2.You can search the last `------------------------>` to the node which is inferred failed.
# 3.Refer to https://www.mindspore.cn/search?inputValue=analyze_fail.ir to get more instructions.
# ===============================================================================

subgraph attr:
training : 0
subgraph instance: construct.Default.19 : 0x561b8f230600
# In file /home/yuming/ACL-DGReID-mindspore/fastreid/modeling/backbones/meta_dynamic_router_resnet.py:437/    def construct(self, x, epoch, opt=None):/
subgraph @construct.Default.19(%para1_x, %para2_epoch, %para3_NL_1_idx, %para4_conv1.weight, %para5_router1.fc_classifier.weight, %para6_layer1.0.conv3.weight, %para7_layer1.1.conv3.weight, %para8_layer2.0.conv3.weight, %para9_layer2.1.conv3.weight, %para10_layer2.2.conv3.weight, %para11_layer3.0.conv3.weight, %para12_layer3.1.conv3.weight, %para13_layer3.2.conv3.weight, %para14_layer3.3.conv3.weight, %para15_layer3.4.conv3.weight, %para16_layer4.0.conv3.weight, %para17_layer4.1.conv3.weight, %para18_router1.fc2.weight, %para19_layer1.0.conv2.weight, %para20_layer1.1.conv2.weight, %para21_layer2.0.conv2.weight, %para22_layer2.1.conv2.weight, %para23_layer2.2.conv2.weight, %para24_layer3.0.conv2.weight, %para25_layer3.1.conv2.weight, %para26_layer3.2.conv2.weight, %para27_layer3.3.conv2.weight, %para28_layer3.4.conv2.weight, %para29_layer4.0.conv2.weight, %para30_layer4.1.conv2.weight, %para31_router1.fc1.weight, %para32_layer1.0.conv1.weight, %para33_layer1.1.conv1.weight, %para34_layer2.0.conv1.weight, %para35_layer2.1.conv1.weight, %para36_layer2.2.conv1.weight, %para37_layer3.0.conv1.weight, %para38_layer3.1.conv1.weight, %para39_layer3.2.conv1.weight, %para40_layer3.3.conv1.weight, %para41_layer3.4.conv1.weight, %para42_layer4.0.conv1.weight, %para43_layer4.1.conv1.weight, %para44_router2.fc_classifier.weight, %para45_meta_fuse1.gate, %para46_bn1.gamma, %para47_bn1.beta, %para48_bn1.moving_mean, %para49_bn1.moving_variance, %para50_router2.fc2.weight, %para51_layer1.0.bn3.gamma, %para52_layer1.0.bn3.beta, %para53_layer1.1.bn3.gamma, %para54_layer1.1.bn3.beta, %para55_layer2.0.bn3.gamma, %para56_layer2.0.bn3.beta, %para57_layer2.1.bn3.gamma, %para58_layer2.1.bn3.beta, %para59_layer2.2.bn3.gamma, %para60_layer2.2.bn3.beta, %para61_layer3.0.bn3.gamma, %para62_layer3.0.bn3.beta, %para63_layer3.1.bn3.gamma, %para64_layer3.1.bn3.beta, %para65_layer3.2.bn3.gamma, %para66_layer3.2.bn3.beta, %para67_layer3.3.bn3.gamma, %para68_layer3.3.bn3.beta, %para69_layer3.4.bn3.gamma, %para70_layer3.4.bn3.beta, %para71_layer4.0.bn3.gamma, %para72_layer4.0.bn3.beta, %para73_layer4.1.bn3.gamma, %para74_layer4.1.bn3.beta, %para75_layer1.0.bn3.moving_mean, %para76_layer1.0.bn3.moving_variance, %para77_layer1.1.bn3.moving_mean, %para78_layer1.1.bn3.moving_variance, %para79_layer2.0.bn3.moving_mean, %para80_layer2.0.bn3.moving_variance, %para81_layer2.1.bn3.moving_mean, %para82_layer2.1.bn3.moving_variance, %para83_layer2.2.bn3.moving_mean, %para84_layer2.2.bn3.moving_variance, %para85_layer3.0.bn3.moving_mean, %para86_layer3.0.bn3.moving_variance, %para87_layer3.1.bn3.moving_mean, %para88_layer3.1.bn3.moving_variance, %para89_layer3.2.bn3.moving_mean, %para90_layer3.2.bn3.moving_variance, %para91_layer3.3.bn3.moving_mean, %para92_layer3.3.bn3.moving_variance, %para93_layer3.4.bn3.moving_mean, %para94_layer3.4.bn3.moving_variance, %para95_layer4.0.bn3.moving_mean, %para96_layer4.0.bn3.moving_variance, %para97_layer4.1.bn3.moving_mean, %para98_layer4.1.bn3.moving_variance, %para99_router2.fc1.weight, %para100_meta_se1.fc2.weight, %para101_layer1.0.bn2.gamma, %para102_layer1.0.bn2.beta, %para103_layer1.1.bn2.gamma, %para104_layer1.1.bn2.beta, %para105_layer2.0.bn2.gamma, %para106_layer2.0.bn2.beta, %para107_layer2.1.bn2.gamma, %para108_layer2.1.bn2.beta, %para109_layer2.2.bn2.gamma, %para110_layer2.2.bn2.beta, %para111_layer3.0.bn2.gamma, %para112_layer3.0.bn2.beta, %para113_layer3.1.bn2.gamma, %para114_layer3.1.bn2.beta, %para115_layer3.2.bn2.gamma, %para116_layer3.2.bn2.beta, %para117_layer3.3.bn2.gamma, %para118_layer3.3.bn2.beta, %para119_layer3.4.bn2.gamma, %para120_layer3.4.bn2.beta, %para121_layer4.0.bn2.gamma, %para122_layer4.0.bn2.beta, %para123_layer4.1.bn2.gamma, %para124_layer4.1.bn2.beta, %para125_adaptor1_base.conv3.weight, %para126_meta_se1.fc1.weight, %para127_layer1.0.bn2.moving_mean, %para128_layer1.0.bn2.moving_variance, %para129_layer1.1.bn2.moving_mean, %para130_layer1.1.bn2.moving_variance, %para131_layer2.0.bn2.moving_mean, %para132_layer2.0.bn2.moving_variance, %para133_layer2.1.bn2.moving_mean, %para134_layer2.1.bn2.moving_variance, %para135_layer2.2.bn2.moving_mean, %para136_layer2.2.bn2.moving_variance, %para137_layer3.0.bn2.moving_mean, %para138_layer3.0.bn2.moving_variance, %para139_layer3.1.bn2.moving_mean, %para140_layer3.1.bn2.moving_variance, %para141_layer3.2.bn2.moving_mean, %para142_layer3.2.bn2.moving_variance, %para143_layer3.3.bn2.moving_mean, %para144_layer3.3.bn2.moving_variance, %para145_layer3.4.bn2.moving_mean, %para146_layer3.4.bn2.moving_variance, %para147_layer4.0.bn2.moving_mean, %para148_layer4.0.bn2.moving_variance, %para149_layer4.1.bn2.moving_mean, %para150_layer4.1.bn2.moving_variance, %para151_layer4.0.bn1.gamma, %para152_layer4.0.bn1.beta, %para153_layer4.1.bn1.gamma, %para154_layer4.1.bn1.beta, %para155_adaptor1_base.conv2.weight, %para156_layer4.0.bn1.moving_mean, %para157_layer4.0.bn1.moving_variance, %para158_layer4.1.bn1.moving_mean, %para159_layer4.1.bn1.moving_variance, %para160_adaptor1_sub.conv3.weight, %para161_router3.fc_classifier.weight, %para162_meta_fuse2.gate, %para163_router4.fc_classifier.weight, %para164_meta_fuse3.gate, %para165_adaptor1_base.conv1.weight, %para166_adaptor2_sub.conv3.weight, %para167_adaptor3_sub.conv3.weight, %para168_adaptor4_sub.conv3.weight, %para169_invariant_norm1.gamma, %para170_invariant_norm1.beta, %para171_specific_norm1.gamma, %para172_specific_norm1.beta, %para173_adaptor1_sub.conv2.weight, %para174_adaptor2_base.conv3.weight, %para175_adaptor3_base.conv3.weight, %para176_adaptor4_base.conv3.weight, %para177_router3.fc2.weight, %para178_router4.fc2.weight, %para179_invariant_norm1.moving_mean, %para180_invariant_norm1.moving_variance, %para181_specific_norm1.moving_mean, %para182_specific_norm1.moving_variance, %para183_adaptor2_sub.conv2.weight, %para184_adaptor3_sub.conv2.weight, %para185_adaptor4_sub.conv2.weight, %para186_adaptor1_sub.conv1.weight, %para187_adaptor2_base.conv2.weight, %para188_adaptor3_base.conv2.weight, %para189_adaptor4_base.conv2.weight, %para190_router3.fc1.weight, %para191_meta_se2.fc2.weight, %para192_router4.fc1.weight, %para193_meta_se3.fc2.weight, %para194_adaptor2_sub.conv1.weight, %para195_adaptor3_sub.conv1.weight, %para196_adaptor4_sub.conv1.weight, %para197_adaptor2_base.conv1.weight, %para198_meta_se2.fc1.weight, %para199_adaptor3_base.conv1.weight, %para200_meta_se3.fc1.weight, %para201_adaptor4_base.conv1.weight, %para202_layer1.0.bn1.BN.gamma, %para203_layer1.0.bn1.BN.beta, %para204_layer1.1.bn1.BN.gamma, %para205_layer1.1.bn1.BN.beta, %para206_layer2.0.bn1.BN.gamma, %para207_layer2.0.bn1.BN.beta, %para208_layer2.1.bn1.BN.gamma, %para209_layer2.1.bn1.BN.beta, %para210_layer2.2.bn1.BN.gamma, %para211_layer2.2.bn1.BN.beta, %para212_layer3.0.bn1.BN.gamma, %para213_layer3.0.bn1.BN.beta, %para214_layer3.1.bn1.BN.gamma, %para215_layer3.1.bn1.BN.beta, %para216_layer3.2.bn1.BN.gamma, %para217_layer3.2.bn1.BN.beta, %para218_layer3.3.bn1.BN.gamma, %para219_layer3.3.bn1.BN.beta, %para220_layer3.4.bn1.BN.gamma, %para221_layer3.4.bn1.BN.beta, %para222_layer1.0.bn1.IN.gamma, %para223_layer1.0.bn1.IN.beta, %para224_layer1.1.bn1.IN.gamma, %para225_layer1.1.bn1.IN.beta, %para226_layer2.0.bn1.IN.gamma, %para227_layer2.0.bn1.IN.beta, %para228_layer2.1.bn1.IN.gamma, %para229_layer2.1.bn1.IN.beta, %para230_layer2.2.bn1.IN.gamma, %para231_layer2.2.bn1.IN.beta, %para232_layer3.0.bn1.IN.gamma, %para233_layer3.0.bn1.IN.beta, %para234_layer3.1.bn1.IN.gamma, %para235_layer3.1.bn1.IN.beta, %para236_layer3.2.bn1.IN.gamma, %para237_layer3.2.bn1.IN.beta, %para238_layer3.3.bn1.IN.gamma, %para239_layer3.3.bn1.IN.beta, %para240_layer3.4.bn1.IN.gamma, %para241_layer3.4.bn1.IN.beta, %para242_layer1.0.bn1.BN.moving_mean, %para243_layer1.0.bn1.BN.moving_variance, %para244_layer1.1.bn1.BN.moving_mean, %para245_layer1.1.bn1.BN.moving_variance, %para246_layer2.0.bn1.BN.moving_mean, %para247_layer2.0.bn1.BN.moving_variance, %para248_layer2.1.bn1.BN.moving_mean, %para249_layer2.1.bn1.BN.moving_variance, %para250_layer2.2.bn1.BN.moving_mean, %para251_layer2.2.bn1.BN.moving_variance, %para252_layer3.0.bn1.BN.moving_mean, %para253_layer3.0.bn1.BN.moving_variance, %para254_layer3.1.bn1.BN.moving_mean, %para255_layer3.1.bn1.BN.moving_variance, %para256_layer3.2.bn1.BN.moving_mean, %para257_layer3.2.bn1.BN.moving_variance, %para258_layer3.3.bn1.BN.moving_mean, %para259_layer3.3.bn1.BN.moving_variance, %para260_layer3.4.bn1.BN.moving_mean, %para261_layer3.4.bn1.BN.moving_variance, %para262_meta_fuse4.gate, %para263_adaptor1_base.bn3.gamma, %para264_adaptor1_base.bn3.beta, %para265_invariant_norm2.gamma, %para266_invariant_norm2.beta, %para267_specific_norm2.gamma, %para268_specific_norm2.beta, %para269_invariant_norm3.gamma, %para270_invariant_norm3.beta, %para271_specific_norm3.gamma, %para272_specific_norm3.beta, %para273_adaptor1_base.bn2.gamma, %para274_adaptor1_base.bn2.beta, %para275_adaptor1_sub.bn3.gamma, %para276_adaptor1_sub.bn3.beta, %para277_invariant_norm2.moving_mean, %para278_invariant_norm2.moving_variance, %para279_specific_norm2.moving_mean, %para280_specific_norm2.moving_variance, %para281_invariant_norm3.moving_mean, %para282_invariant_norm3.moving_variance, %para283_specific_norm3.moving_mean, %para284_specific_norm3.moving_variance, %para285_adaptor1_base.bn1.gamma, %para286_adaptor1_base.bn1.beta, %para287_adaptor1_sub.bn3.moving_mean, %para288_adaptor1_sub.bn3.moving_variance, %para289_adaptor2_sub.bn3.gamma, %para290_adaptor2_sub.bn3.beta, %para291_adaptor3_sub.bn3.gamma, %para292_adaptor3_sub.bn3.beta, %para293_adaptor4_sub.bn3.gamma, %para294_adaptor4_sub.bn3.beta, %para295_meta_se4.fc2.weight, %para296_adaptor1_sub.bn2.gamma, %para297_adaptor1_sub.bn2.beta, %para298_adaptor2_sub.bn3.moving_mean, %para299_adaptor2_sub.bn3.moving_variance, %para300_adaptor2_base.bn3.gamma, %para301_adaptor2_base.bn3.beta, %para302_adaptor3_sub.bn3.moving_mean, %para303_adaptor3_sub.bn3.moving_variance, %para304_adaptor3_base.bn3.gamma, %para305_adaptor3_base.bn3.beta, %para306_adaptor4_sub.bn3.moving_mean, %para307_adaptor4_sub.bn3.moving_variance, %para308_adaptor4_base.bn3.gamma, %para309_adaptor4_base.bn3.beta, %para310_meta_se4.fc1.weight, %para311_adaptor1_sub.bn2.moving_mean, %para312_adaptor1_sub.bn2.moving_variance, %para313_adaptor2_sub.bn2.gamma, %para314_adaptor2_sub.bn2.beta, %para315_adaptor3_sub.bn2.gamma, %para316_adaptor3_sub.bn2.beta, %para317_adaptor4_sub.bn2.gamma, %para318_adaptor4_sub.bn2.beta, %para319_adaptor2_sub.bn2.moving_mean, %para320_adaptor2_sub.bn2.moving_variance, %para321_adaptor2_base.bn2.gamma, %para322_adaptor2_base.bn2.beta, %para323_adaptor3_sub.bn2.moving_mean, %para324_adaptor3_sub.bn2.moving_variance, %para325_adaptor3_base.bn2.gamma, %para326_adaptor3_base.bn2.beta, %para327_adaptor4_sub.bn2.moving_mean, %para328_adaptor4_sub.bn2.moving_variance, %para329_adaptor4_base.bn2.gamma, %para330_adaptor4_base.bn2.beta, %para331_adaptor2_base.bn1.gamma, %para332_adaptor2_base.bn1.beta, %para333_adaptor3_base.bn1.gamma, %para334_adaptor3_base.bn1.beta, %para335_adaptor4_base.bn1.gamma, %para336_adaptor4_base.bn1.beta, %para337_invariant_norm4.gamma, %para338_invariant_norm4.beta, %para339_specific_norm4.gamma, %para340_specific_norm4.beta, %para341_map4.gamma, %para342_map4.beta, %para343_invariant_norm4.moving_mean, %para344_invariant_norm4.moving_variance, %para345_specific_norm4.moving_mean, %para346_specific_norm4.moving_variance, %para347_map3.gamma, %para348_map3.beta, %para349_map4.moving_mean, %para350_map4.moving_variance, %para351_map2.gamma, %para352_map2.beta, %para353_map3.moving_mean, %para354_map3.moving_variance, %para355_adaptor1_sub.bn1.BN.gamma, %para356_adaptor1_sub.bn1.BN.beta, %para357_map1.gamma, %para358_map1.beta, %para359_map2.moving_mean, %para360_map2.moving_variance, %para361_adaptor1_sub.bn1.IN.gamma, %para362_adaptor1_sub.bn1.IN.beta, %para363_adaptor1_sub.bn1.BN.moving_mean, %para364_adaptor1_sub.bn1.BN.moving_variance, %para365_adaptor2_sub.bn1.BN.gamma, %para366_adaptor2_sub.bn1.BN.beta, %para367_adaptor3_sub.bn1.BN.gamma, %para368_adaptor3_sub.bn1.BN.beta, %para369_adaptor4_sub.bn1.BN.gamma, %para370_adaptor4_sub.bn1.BN.beta, %para371_map1.moving_mean, %para372_map1.moving_variance, %para373_adaptor2_sub.bn1.IN.gamma, %para374_adaptor2_sub.bn1.IN.beta, %para375_adaptor3_sub.bn1.IN.gamma, %para376_adaptor3_sub.bn1.IN.beta, %para377_adaptor4_sub.bn1.IN.gamma, %para378_adaptor4_sub.bn1.IN.beta, %para379_adaptor2_sub.bn1.BN.moving_mean, %para380_adaptor2_sub.bn1.BN.moving_variance, %para381_adaptor3_sub.bn1.BN.moving_mean, %para382_adaptor3_sub.bn1.BN.moving_variance, %para383_adaptor4_sub.bn1.BN.moving_mean, %para384_adaptor4_sub.bn1.BN.moving_variance) {
  %1([CNode]37) = call @print_.36(I64(4))
      : (<Int64, NoShape>) -> (<Tensor[Int32], (1)>)
      #scope: (Default)
      # In file /home/yuming/ACL-DGReID-mindspore/fastreid/modeling/backbones/meta_dynamic_router_resnet.py:441/        print(4)/
  %2([CNode]38) = StopGradient(%1)
      : (<Tensor[Int32], (1)>) -> (<Tensor[Int32], (1)>)
      #scope: (Default)
  %3([CNode]40) = call @ms_len.39(%para3_NL_1_idx)
      : (<Ref[Tensor[Int64]], (1)>) -> (<Int64, NoShape>)
      #scope: (Default)
      # In file /home/yuming/ACL-DGReID-mindspore/fastreid/modeling/backbones/meta_dynamic_router_resnet.py:453/        if len(self.NL_1_idx) == 0:/
  %4([CNode]41) = S-Prim-equal(%3, I64(0))
      : (<Int64, NoShape>, <Int64, NoShape>) -> (<Bool, NoShape>)
      #scope: (Default)
      # In file /home/yuming/ACL-DGReID-mindspore/fastreid/modeling/backbones/meta_dynamic_router_resnet.py:453/        if len(self.NL_1_idx) == 0:/
  %5([CNode]42) = call @bool_.4(%4)
      : (<Bool, NoShape>) -> (<Bool, NoShape>)
      #scope: (Default)
      # In file /home/yuming/ACL-DGReID-mindspore/fastreid/modeling/backbones/meta_dynamic_router_resnet.py:453/        if len(self.NL_1_idx) == 0:/
  %6([CNode]43) = Switch(%5, call @✓construct.Default.44, call @✗construct.Default.20)
      : (<Bool, NoShape>, <Func, NoShape>, <Func, NoShape>) -> (<Func, NoShape>)
      #scope: (Default)
      # In file /home/yuming/ACL-DGReID-mindspore/fastreid/modeling/backbones/meta_dynamic_router_resnet.py:453/        if len(self.NL_1_idx) == 0:/

#------------------------> 0
  %7([CNode]45) = %6()
      #scope: (Default)
      # In file /home/yuming/ACL-DGReID-mindspore/fastreid/modeling/backbones/meta_dynamic_router_resnet.py:453/        if len(self.NL_1_idx) == 0:/
  %8([CNode]46) = Depend[side_effect_propagate=I64(1)](%7, %2)
      : (<null>, <Tensor[Int32], (1)>) -> (<null>)
      #scope: (Default)
  Return(%8)
      : (<null>)
      #scope: (Default)
      # In file /home/yuming/ACL-DGReID-mindspore/fastreid/modeling/backbones/meta_dynamic_router_resnet.py:453/        if len(self.NL_1_idx) == 0:/
}
# Order:
#   1: @construct.Default.19:[CNode]37{[0]: ValueNode<FuncGraph> print_.36, [1]: ValueNode<Int64Imm> 4}
#   2: @construct.Default.19:x{[0]: ValueNode<FuncGraph> construct.MetaConv2d.47, [1]: x, [2]: ValueNode<None> None}
#   3: @construct.Default.19:x{[0]: ValueNode<FuncGraph> construct.MetaBNNorm.48, [1]: x, [2]: ValueNode<None> None}
#   4: @construct.Default.19:x{[0]: ValueNode<FuncGraph> construct.ReLU.49, [1]: x}
#   5: @construct.Default.19:фx{[0]: ValueNode<FuncGraph> construct.MaxPool2d.50, [1]: x}
#   6: @construct.Default.19:[CNode]40{[0]: ValueNode<FuncGraph> ms_len.39, [1]: NL_1_idx}
#   7: @construct.Default.19:[CNode]41{[0]: ValueNode<DoSignaturePrimitive> S-Prim-equal, [1]: [CNode]40, [2]: ValueNode<Int64Imm> 0}
#   8: @construct.Default.19:[CNode]42{[0]: ValueNode<FuncGraph> bool_.4, [1]: [CNode]41}
#   9: @construct.Default.19:[CNode]43{[0]: ValueNode<Primitive> Switch, [1]: [CNode]42, [2]: ValueNode<FuncGraph> ✓construct.Default.44, [3]: ValueNode<FuncGraph> ✗construct.Default.20}
#  10: @construct.Default.19:[CNode]45{[0]: [CNode]43}
#  11: @construct.Default.19:[CNode]51{[0]: ValueNode<Primitive> Return, [1]: [CNode]46}


subgraph attr:
training : 0
subgraph instance: ✗construct.Default.20 : 0x561ba320f5a0
# In file /home/yuming/ACL-DGReID-mindspore/fastreid/modeling/backbones/meta_dynamic_router_resnet.py:453/        if len(self.NL_1_idx) == 0:/
subgraph @✗construct.Default.20 parent: [subgraph @construct.Default.19]() {

#------------------------> 1
  %1([CNode]52) = call @↓construct.Default.21()
      #scope: (Default)
  Return(%1)
      : (<null>)
      #scope: (Default)
      # In file /home/yuming/ACL-DGReID-mindspore/fastreid/modeling/backbones/meta_dynamic_router_resnet.py:453/        if len(self.NL_1_idx) == 0:/
}
# Order:
#   1: @✗construct.Default.20:[CNode]53{[0]: ValueNode<Primitive> Return, [1]: [CNode]52}
#   2: @✗construct.Default.20:[CNode]52{[0]: ValueNode<FuncGraph> ↓construct.Default.21}


subgraph attr:
after_block : 1
training : 0
subgraph instance: ↓construct.Default.21 : 0x561ba883d6a0
# In file /home/yuming/ACL-DGReID-mindspore/fastreid/modeling/backbones/meta_dynamic_router_resnet.py:453/        if len(self.NL_1_idx) == 0:/
subgraph @↓construct.Default.21 parent: [subgraph @construct.Default.19]() {

#------------------------> 2
  %1([CNode]54) = call @↵↓construct.Default.22(I64(0), I64(0))
      : (<Int64, NoShape>, <Int64, NoShape>) -> (<null>)
      #scope: (Default)
  Return(%1)
      : (<null>)
      #scope: (Default)
      # In file /home/yuming/ACL-DGReID-mindspore/fastreid/modeling/backbones/meta_dynamic_router_resnet.py:457/        for i in range(len(self.layer1)):/
}
# Order:
#   1: @↓construct.Default.21:x{[0]: ValueNode<FuncGraph> construct.SequentialCell.25, [1]: фx}
#   2: @↓construct.Default.21:[CNode]55{[0]: ValueNode<FuncGraph> ms_len.39, [1]: ValueNode<FuncGraph> construct.SequentialCell.25}
#   3: @↓construct.Default.21:[CNode]56{[0]: ValueNode<DoSignaturePrimitive> S-Prim-make_range, [1]: [CNode]55}
#   4: @↓construct.Default.21:[CNode]57{[0]: ValueNode<FuncGraph> ms_len_with_iterable_check.58, [1]: [CNode]56}
#   5: @↓construct.Default.21:[CNode]59{[0]: ValueNode<Primitive> Return, [1]: [CNode]54}
#   6: @↓construct.Default.21:[CNode]54{[0]: ValueNode<FuncGraph> ↵↓construct.Default.22, [1]: ValueNode<Int64Imm> 0, [2]: ValueNode<Int64Imm> 0}


subgraph attr:
training : 0
subgraph instance: ↵↓construct.Default.22 : 0x561ba81b2c30
# In file /home/yuming/ACL-DGReID-mindspore/fastreid/modeling/backbones/meta_dynamic_router_resnet.py:457/        for i in range(len(self.layer1)):/
subgraph @↵↓construct.Default.22 parent: [subgraph @↓construct.Default.21](%para385_, %para386_) {
  %1([CNode]55) = $(↓construct.Default.21):call @ms_len.39(call @construct.SequentialCell.25)
      : (<Func, NoShape>) -> (<Int64, NoShape>)
      #scope: (Default)
      # In file /home/yuming/ACL-DGReID-mindspore/fastreid/modeling/backbones/meta_dynamic_router_resnet.py:457/        for i in range(len(self.layer1)):/
  %2([CNode]56) = $(↓construct.Default.21):S-Prim-make_range(%1)
      : (<Int64, NoShape>) -> (<Tuple[Int64*2], TupleShape(NoShape, NoShape)>)
      #scope: (Default)
      # In file /home/yuming/ACL-DGReID-mindspore/fastreid/modeling/backbones/meta_dynamic_router_resnet.py:457/        for i in range(len(self.layer1)):/
  %3([CNode]57) = $(↓construct.Default.21):call @ms_len_with_iterable_check.58(%2)
      : (<Tuple[Int64*2], TupleShape(NoShape, NoShape)>) -> (<Int64, NoShape>)
      #scope: (Default)
      # In file /home/yuming/ACL-DGReID-mindspore/fastreid/modeling/backbones/meta_dynamic_router_resnet.py:457/        for i in range(len(self.layer1)):/
  %4([CNode]60) = MultitypeFuncGraph-less{(List, List), (Tensor, Number), (Tensor, Tensor), (Tuple, Tuple), (Number, Tensor), (String, String), (Number, Number)}(%para385_@[CNode]23, %3)
      : (<Int64, NoShape>, <Int64, NoShape>) -> (<Bool, NoShape>)
      #scope: (Default)
      # In file /home/yuming/ACL-DGReID-mindspore/fastreid/modeling/backbones/meta_dynamic_router_resnet.py:457/        for i in range(len(self.layer1)):/
  %5([CNode]61) = Switch(%4, call @↻↓construct.Default.24, call @↓↓construct.Default.62)
      : (<Bool, NoShape>, <Func, NoShape>, <Func, NoShape>) -> (<Func, NoShape>)
      #scope: (Default)
      # In file /home/yuming/ACL-DGReID-mindspore/fastreid/modeling/backbones/meta_dynamic_router_resnet.py:457/        for i in range(len(self.layer1)):/

#------------------------> 3
  %6([CNode]63) = %5()
      #scope: (Default)
      # In file /home/yuming/ACL-DGReID-mindspore/fastreid/modeling/backbones/meta_dynamic_router_resnet.py:457/        for i in range(len(self.layer1)):/
  Return(%6)
      : (<null>)
      #scope: (Default)
      # In file /home/yuming/ACL-DGReID-mindspore/fastreid/modeling/backbones/meta_dynamic_router_resnet.py:457/        for i in range(len(self.layer1)):/
}
# Order:
#   1: @↵↓construct.Default.22:[CNode]60{[0]: ValueNode<MultitypeFuncGraph> MetaFuncGraph-less.9, [1]: @[CNode]23, [2]: [CNode]57}
#   2: @↵↓construct.Default.22:[CNode]61{[0]: ValueNode<Primitive> Switch, [1]: [CNode]60, [2]: ValueNode<FuncGraph> ↻↓construct.Default.24, [3]: ValueNode<FuncGraph> ↓↓construct.Default.62}
#   3: @↵↓construct.Default.22:[CNode]63{[0]: [CNode]61}
#   4: @↵↓construct.Default.22:[CNode]64{[0]: ValueNode<Primitive> Return, [1]: [CNode]63}


subgraph attr:
training : 0
subgraph instance: ↻↓construct.Default.24 : 0x561b95a79250
# In file /home/yuming/ACL-DGReID-mindspore/fastreid/modeling/backbones/meta_dynamic_router_resnet.py:457/        for i in range(len(self.layer1)):/
subgraph @↻↓construct.Default.24 parent: [subgraph @↵↓construct.Default.22]() {
  %1([CNode]23) = MultitypeFuncGraph-add{(COOTensor, COOTensor), (CSRTensor, CSRTensor), (Number, Number), (String, String), (Tensor, List), (Tuple, Tuple), (Tensor, Number), (Number, Tensor), (Tuple, Tensor), (Tensor, Tuple), (COOTensor, Tensor), (List, List), (Tensor, COOTensor), (Tensor, Tensor), (List, Tensor), (RowTensor, Tensor), (NoneType, NoneType)}(%para385_@[CNode]23, I64(1))
      : (<Int64, NoShape>, <Int64, NoShape>) -> (<Int64, NoShape>)
      #scope: (Default)
      # In file /home/yuming/ACL-DGReID-mindspore/fastreid/modeling/backbones/meta_dynamic_router_resnet.py:457/        for i in range(len(self.layer1)):/
  %2([CNode]65) = StopGradient(%1)
      : (<Int64, NoShape>) -> (<Int64, NoShape>)
      #scope: (Default)
  %3([CNode]55) = $(↓construct.Default.21):call @ms_len.39(call @construct.SequentialCell.25)
      : (<Func, NoShape>) -> (<Int64, NoShape>)
      #scope: (Default)
      # In file /home/yuming/ACL-DGReID-mindspore/fastreid/modeling/backbones/meta_dynamic_router_resnet.py:457/        for i in range(len(self.layer1)):/
  %4([CNode]56) = $(↓construct.Default.21):S-Prim-make_range(%3)
      : (<Int64, NoShape>) -> (<Tuple[Int64*2], TupleShape(NoShape, NoShape)>)
      #scope: (Default)
      # In file /home/yuming/ACL-DGReID-mindspore/fastreid/modeling/backbones/meta_dynamic_router_resnet.py:457/        for i in range(len(self.layer1)):/
  %5([CNode]67) = call @ms_iter.66(%4)
      : (<Tuple[Int64*2], TupleShape(NoShape, NoShape)>) -> (<Tuple[Int64*2], TupleShape(NoShape, NoShape)>)
      #scope: (Default)
      # In file /home/yuming/ACL-DGReID-mindspore/fastreid/modeling/backbones/meta_dynamic_router_resnet.py:457/        for i in range(len(self.layer1)):/
  %6(i) = S-Prim-getitem(%5, %para385_@[CNode]23)
      : (<Tuple[Int64*2], TupleShape(NoShape, NoShape)>, <Int64, NoShape>) -> (<Int64, NoShape>)
      #scope: (Default)
      # In file /home/yuming/ACL-DGReID-mindspore/fastreid/modeling/backbones/meta_dynamic_router_resnet.py:457/        for i in range(len(self.layer1)):/
  %7([CNode]68) = S-Prim-getitem(%para3_NL_1_idx, %para386_фNL1_counter)
      : (<Ref[Tensor[Int64]], (1)>, <Int64, NoShape>) -> (<Tensor[Int64], ()>)
      #scope: (Default)
      # In file /home/yuming/ACL-DGReID-mindspore/fastreid/modeling/backbones/meta_dynamic_router_resnet.py:459/            if i == self.NL_1_idx[NL1_counter]:/
  %8([CNode]69) = S-Prim-equal(%6, %7)
      : (<Int64, NoShape>, <Tensor[Int64], ()>) -> (<Tensor[Bool], ()>)
      #scope: (Default)
      # In file /home/yuming/ACL-DGReID-mindspore/fastreid/modeling/backbones/meta_dynamic_router_resnet.py:459/            if i == self.NL_1_idx[NL1_counter]:/
  %9([CNode]70) = call @bool_.4(%8)
      : (<Tensor[Bool], ()>) -> (<Tensor[Bool], ()>)
      #scope: (Default)
      # In file /home/yuming/ACL-DGReID-mindspore/fastreid/modeling/backbones/meta_dynamic_router_resnet.py:459/            if i == self.NL_1_idx[NL1_counter]:/
  %10([CNode]71) = Switch(%9, call @✓↻↓construct.Default.15, call @✗↻↓construct.Default.72)
      : (<Tensor[Bool], ()>, <Func, NoShape>, <Func, NoShape>) -> (<Func, NoShape>)
      #scope: (Default)
      # In file /home/yuming/ACL-DGReID-mindspore/fastreid/modeling/backbones/meta_dynamic_router_resnet.py:459/            if i == self.NL_1_idx[NL1_counter]:/

#------------------------> 4
  %11([CNode]73) = %10()
      #scope: (Default)
      # In file /home/yuming/ACL-DGReID-mindspore/fastreid/modeling/backbones/meta_dynamic_router_resnet.py:459/            if i == self.NL_1_idx[NL1_counter]:/
  %12([CNode]75) = call @↓↻↓construct.Default.74(%11)
      : (<null>) -> (<null>)
      #scope: (Default)
  %13([CNode]76) = Depend[side_effect_propagate=I64(1)](%12, %2)
      : (<null>, <Int64, NoShape>) -> (<null>)
      #scope: (Default)
  Return(%13)
      : (<null>)
      #scope: (Default)
      # In file /home/yuming/ACL-DGReID-mindspore/fastreid/modeling/backbones/meta_dynamic_router_resnet.py:459/            if i == self.NL_1_idx[NL1_counter]:/
}
# Order:
#   1: @↻↓construct.Default.24:[CNode]67{[0]: ValueNode<FuncGraph> ms_iter.66, [1]: [CNode]56}
#   2: @↻↓construct.Default.24:i{[0]: ValueNode<DoSignaturePrimitive> S-Prim-getitem, [1]: [CNode]67, [2]: @[CNode]23}
#   3: @↻↓construct.Default.24:[CNode]23{[0]: ValueNode<MultitypeFuncGraph> MetaFuncGraph-add.12, [1]: @[CNode]23, [2]: ValueNode<Int64Imm> 1}
#   4: @↻↓construct.Default.24:[CNode]68{[0]: ValueNode<DoSignaturePrimitive> S-Prim-getitem, [1]: NL_1_idx, [2]: фNL1_counter}
#   5: @↻↓construct.Default.24:[CNode]69{[0]: ValueNode<DoSignaturePrimitive> S-Prim-equal, [1]: i, [2]: [CNode]68}
#   6: @↻↓construct.Default.24:[CNode]70{[0]: ValueNode<FuncGraph> bool_.4, [1]: [CNode]69}
#   7: @↻↓construct.Default.24:[CNode]71{[0]: ValueNode<Primitive> Switch, [1]: [CNode]70, [2]: ValueNode<FuncGraph> ✓↻↓construct.Default.15, [3]: ValueNode<FuncGraph> ✗↻↓construct.Default.72}
#   8: @↻↓construct.Default.24:[CNode]73{[0]: [CNode]71}
#   9: @↻↓construct.Default.24:[CNode]75{[0]: ValueNode<FuncGraph> ↓↻↓construct.Default.74, [1]: [CNode]73}
#  10: @↻↓construct.Default.24:[CNode]76{[0]: ValueNode<Primitive> Depend, [1]: [CNode]75, [2]: [CNode]65}
#  11: @↻↓construct.Default.24:[CNode]77{[0]: ValueNode<Primitive> Return, [1]: [CNode]76}


subgraph attr:
training : 0
subgraph instance: ✓↻↓construct.Default.15 : 0x561b95aa7620
# In file /home/yuming/ACL-DGReID-mindspore/fastreid/modeling/backbones/meta_dynamic_router_resnet.py:459/            if i == self.NL_1_idx[NL1_counter]:/
subgraph @✓↻↓construct.Default.15 parent: [subgraph @↵↓construct.Default.22]() {
  %1(NL1_counter) = S-Prim-add(%para386_фNL1_counter, I64(1))
      : (<null>, <Int64, NoShape>) -> (<null>)
      #scope: (Default)
      # In file /home/yuming/ACL-DGReID-mindspore/fastreid/modeling/backbones/meta_dynamic_router_resnet.py:462/                NL1_counter += 1/
  %2(x) = $(construct.Default.19):call @construct.MetaConv2d.47(%para1_x, None)
      : (<Tensor[Float32], (8, 3, 16, 16)>, <None, NoShape>) -> (<Tensor[Float32], (8, 64, 8, 8)>)
      #scope: (Default)
      # In file /home/yuming/ACL-DGReID-mindspore/fastreid/modeling/backbones/meta_dynamic_router_resnet.py:443/        x = self.conv1(x, opt)/
  %3(x) = $(construct.Default.19):call @construct.MetaBNNorm.48(%2, None)
      : (<Tensor[Float32], (8, 64, 8, 8)>, <None, NoShape>) -> (<Tensor[Float32], (8, 64, 8, 8)>)
      #scope: (Default)
      # In file /home/yuming/ACL-DGReID-mindspore/fastreid/modeling/backbones/meta_dynamic_router_resnet.py:444/        x = self.bn1(x, opt)/
  %4(x) = $(construct.Default.19):call @construct.ReLU.49(%3)
      : (<Tensor[Float32], (8, 64, 8, 8)>) -> (<Tensor[Float32], (8, 64, 8, 8)>)
      #scope: (Default)
      # In file /home/yuming/ACL-DGReID-mindspore/fastreid/modeling/backbones/meta_dynamic_router_resnet.py:445/        x = self.relu(x)/
  %5(фx) = $(construct.Default.19):call @construct.MaxPool2d.50(%4)
      : (<Tensor[Float32], (8, 64, 8, 8)>) -> (<Tensor[Float32], (8, 64, 4, 4)>)
      #scope: (Default)
      # In file /home/yuming/ACL-DGReID-mindspore/fastreid/modeling/backbones/meta_dynamic_router_resnet.py:456/        x = self.layer1(x)/

#------------------------> 5
  %6(x) = $(↓construct.Default.21):call @construct.SequentialCell.25(%5)
      : (<Tensor[Float32], (8, 64, 4, 4)>) -> (<null>)
      #scope: (Default)
      # In file /home/yuming/ACL-DGReID-mindspore/fastreid/modeling/backbones/meta_dynamic_router_resnet.py:456/        x = self.layer1(x)/
  %7([CNode]78) = getattr(%6, "shape")
      : (<null>, <null>) -> (<null>)
      #scope: (Default)
      # In file /home/yuming/ACL-DGReID-mindspore/fastreid/modeling/backbones/meta_dynamic_router_resnet.py:460/                _, C, H, W = x.shape/
  %8(C) = S-Prim-getitem(%7, I64(1))
      : (<null>, <null>) -> (<null>)
      #scope: (Default)
      # In file /home/yuming/ACL-DGReID-mindspore/fastreid/modeling/backbones/meta_dynamic_router_resnet.py:460/                _, C, H, W = x.shape/
  %9(H) = S-Prim-getitem(%7, I64(2))
      : (<null>, <null>) -> (<null>)
      #scope: (Default)
      # In file /home/yuming/ACL-DGReID-mindspore/fastreid/modeling/backbones/meta_dynamic_router_resnet.py:460/                _, C, H, W = x.shape/
  %10(W) = S-Prim-getitem(%7, I64(3))
      : (<null>, <null>) -> (<null>)
      #scope: (Default)
      # In file /home/yuming/ACL-DGReID-mindspore/fastreid/modeling/backbones/meta_dynamic_router_resnet.py:460/                _, C, H, W = x.shape/
  %11([CNode]79) = MakeTuple(%8, %9, %10)
      : (<null>, <null>, <null>) -> (<null>)
      #scope: (Default)
  %12([CNode]80) = StopGradient(%11)
      : (<null>) -> (<null>)
      #scope: (Default)
  %13([CNode]81) = Depend[side_effect_propagate=I64(1)](%1, %12)
      : (<null>, <null>) -> (<null>)
      #scope: (Default)
  Return(%13)
      : (<null>)
      #scope: (Default)
      # In file /home/yuming/ACL-DGReID-mindspore/fastreid/modeling/backbones/meta_dynamic_router_resnet.py:459/            if i == self.NL_1_idx[NL1_counter]:/
}
# Order:
#   1: @✓↻↓construct.Default.15:[CNode]78{[0]: ValueNode<Primitive> getattr, [1]: x, [2]: ValueNode<StringImm> shape}
#   2: @✓↻↓construct.Default.15:C{[0]: ValueNode<DoSignaturePrimitive> S-Prim-getitem, [1]: [CNode]78, [2]: ValueNode<Int64Imm> 1}
#   3: @✓↻↓construct.Default.15:H{[0]: ValueNode<DoSignaturePrimitive> S-Prim-getitem, [1]: [CNode]78, [2]: ValueNode<Int64Imm> 2}
#   4: @✓↻↓construct.Default.15:W{[0]: ValueNode<DoSignaturePrimitive> S-Prim-getitem, [1]: [CNode]78, [2]: ValueNode<Int64Imm> 3}
#   5: @✓↻↓construct.Default.15:NL1_counter{[0]: ValueNode<DoSignaturePrimitive> S-Prim-add, [1]: фNL1_counter, [2]: ValueNode<Int64Imm> 1}
#   6: @✓↻↓construct.Default.15:[CNode]82{[0]: ValueNode<Primitive> Return, [1]: [CNode]81}


subgraph attr:
training : 0
subgraph instance: construct.SequentialCell.25 : 0x561b92a69c00
# In file /home/yuming/miniconda3/envs/reid/lib/python3.9/site-packages/mindspore/nn/layer/container.py:285/    def construct(self, input_data):/
subgraph @construct.SequentialCell.25 parent: [subgraph @construct.Default.19](%para387_input_data) {

#------------------------> 6
  %1([CNode]83) = call @↵construct.SequentialCell.26(I64(0), %para387_input_data)
      : (<Int64, NoShape>, <Tensor[Float32], (8, 64, 4, 4)>) -> (<null>)
      #scope: (Default/layer1-SequentialCell)
      # In file /home/yuming/miniconda3/envs/reid/lib/python3.9/site-packages/mindspore/nn/layer/container.py:286/        for cell in self.cell_list:/
  Return(%1)
      : (<null>)
      #scope: (Default/layer1-SequentialCell)
      # In file /home/yuming/miniconda3/envs/reid/lib/python3.9/site-packages/mindspore/nn/layer/container.py:286/        for cell in self.cell_list:/
}
# Order:
#   1: @construct.SequentialCell.25:[CNode]84{[0]: ValueNode<FuncGraph> ms_len_with_iterable_check.85, [1]: [CNode]86}
#   2: @construct.SequentialCell.25:[CNode]83{[0]: ValueNode<FuncGraph> ↵construct.SequentialCell.26, [1]: ValueNode<Int64Imm> 0, [2]: input_data}
#   3: @construct.SequentialCell.25:[CNode]87{[0]: ValueNode<Primitive> Return, [1]: [CNode]83}


subgraph attr:
training : 0
subgraph instance: ↵construct.SequentialCell.26 : 0x561ba7cb1920
# In file /home/yuming/miniconda3/envs/reid/lib/python3.9/site-packages/mindspore/nn/layer/container.py:286/        for cell in self.cell_list:/
subgraph @↵construct.SequentialCell.26 parent: [subgraph @construct.SequentialCell.25](%para388_, %para389_) {
  %1([CNode]86) = $(construct.SequentialCell.25):MakeTuple(call @construct.Bottleneck.88, call @construct.Bottleneck.89)
      : (<Func, NoShape>, <Func, NoShape>) -> (<Tuple[Func*2], TupleShape(NoShape, NoShape)>)
      #scope: (Default/layer1-SequentialCell)
      # In file /home/yuming/miniconda3/envs/reid/lib/python3.9/site-packages/mindspore/nn/layer/container.py:286/        for cell in self.cell_list:/
  %2([CNode]84) = $(construct.SequentialCell.25):call @ms_len_with_iterable_check.85(%1)
      : (<Tuple[Func*2], TupleShape(NoShape, NoShape)>) -> (<Int64, NoShape>)
      #scope: (Default/layer1-SequentialCell)
      # In file /home/yuming/miniconda3/envs/reid/lib/python3.9/site-packages/mindspore/nn/layer/container.py:286/        for cell in self.cell_list:/
  %3([CNode]90) = MultitypeFuncGraph-less{(List, List), (Tensor, Number), (Tensor, Tensor), (Tuple, Tuple), (Number, Tensor), (String, String), (Number, Number)}(%para388_@[CNode]27, %2)
      : (<Int64, NoShape>, <Int64, NoShape>) -> (<Bool, NoShape>)
      #scope: (Default/layer1-SequentialCell)
      # In file /home/yuming/miniconda3/envs/reid/lib/python3.9/site-packages/mindspore/nn/layer/container.py:286/        for cell in self.cell_list:/
  %4([CNode]91) = Switch(%3, call @↻construct.SequentialCell.28, call @↓construct.SequentialCell.92)
      : (<Bool, NoShape>, <Func, NoShape>, <Func, NoShape>) -> (<Func, NoShape>)
      #scope: (Default/layer1-SequentialCell)
      # In file /home/yuming/miniconda3/envs/reid/lib/python3.9/site-packages/mindspore/nn/layer/container.py:286/        for cell in self.cell_list:/

#------------------------> 7
  %5([CNode]93) = %4()
      #scope: (Default/layer1-SequentialCell)
      # In file /home/yuming/miniconda3/envs/reid/lib/python3.9/site-packages/mindspore/nn/layer/container.py:286/        for cell in self.cell_list:/
  Return(%5)
      : (<null>)
      #scope: (Default/layer1-SequentialCell)
      # In file /home/yuming/miniconda3/envs/reid/lib/python3.9/site-packages/mindspore/nn/layer/container.py:286/        for cell in self.cell_list:/
}
# Order:
#   1: @↵construct.SequentialCell.26:[CNode]90{[0]: ValueNode<MultitypeFuncGraph> MetaFuncGraph-less.9, [1]: @[CNode]27, [2]: [CNode]84}
#   2: @↵construct.SequentialCell.26:[CNode]91{[0]: ValueNode<Primitive> Switch, [1]: [CNode]90, [2]: ValueNode<FuncGraph> ↻construct.SequentialCell.28, [3]: ValueNode<FuncGraph> ↓construct.SequentialCell.92}
#   3: @↵construct.SequentialCell.26:[CNode]93{[0]: [CNode]91}
#   4: @↵construct.SequentialCell.26:[CNode]94{[0]: ValueNode<Primitive> Return, [1]: [CNode]93}


subgraph attr:
training : 0
subgraph instance: ↻construct.SequentialCell.28 : 0x561ba857fa80
# In file /home/yuming/miniconda3/envs/reid/lib/python3.9/site-packages/mindspore/nn/layer/container.py:286/        for cell in self.cell_list:/
subgraph @↻construct.SequentialCell.28 parent: [subgraph @↵construct.SequentialCell.26]() {
  %1([CNode]27) = MultitypeFuncGraph-add{(COOTensor, COOTensor), (CSRTensor, CSRTensor), (Number, Number), (String, String), (Tensor, List), (Tuple, Tuple), (Tensor, Number), (Number, Tensor), (Tuple, Tensor), (Tensor, Tuple), (COOTensor, Tensor), (List, List), (Tensor, COOTensor), (Tensor, Tensor), (List, Tensor), (RowTensor, Tensor), (NoneType, NoneType)}(%para388_@[CNode]27, I64(1))
      : (<Int64, NoShape>, <Int64, NoShape>) -> (<Int64, NoShape>)
      #scope: (Default/layer1-SequentialCell)
      # In file /home/yuming/miniconda3/envs/reid/lib/python3.9/site-packages/mindspore/nn/layer/container.py:286/        for cell in self.cell_list:/
  %2([CNode]95) = StopGradient(%1)
      : (<Int64, NoShape>) -> (<Int64, NoShape>)
      #scope: (Default/layer1-SequentialCell)
      # In file /home/yuming/ACL-DGReID-mindspore/fastreid/modeling/backbones/meta_dynamic_router_resnet.py:457/        for i in range(len(self.layer1)):/
  %3([CNode]86) = $(construct.SequentialCell.25):MakeTuple(call @construct.Bottleneck.88, call @construct.Bottleneck.89)
      : (<Func, NoShape>, <Func, NoShape>) -> (<Tuple[Func*2], TupleShape(NoShape, NoShape)>)
      #scope: (Default/layer1-SequentialCell)
      # In file /home/yuming/miniconda3/envs/reid/lib/python3.9/site-packages/mindspore/nn/layer/container.py:286/        for cell in self.cell_list:/
  %4([CNode]96) = call @ms_iter.66(%3)
      : (<Tuple[Func*2], TupleShape(NoShape, NoShape)>) -> (<Tuple[Func*2], TupleShape(NoShape, NoShape)>)
      #scope: (Default/layer1-SequentialCell)
      # In file /home/yuming/miniconda3/envs/reid/lib/python3.9/site-packages/mindspore/nn/layer/container.py:286/        for cell in self.cell_list:/
  %5(cell) = S-Prim-getitem(%4, %para388_@[CNode]27)
      : (<Tuple[Func*2], TupleShape(NoShape, NoShape)>, <Int64, NoShape>) -> (<Func, NoShape>)
      #scope: (Default/layer1-SequentialCell)
      # In file /home/yuming/miniconda3/envs/reid/lib/python3.9/site-packages/mindspore/nn/layer/container.py:286/        for cell in self.cell_list:/

#------------------------> 8
  %6(input_data) = %5(%para389_фinput_data)
      : (<Tensor[Float32], (8, 64, 4, 4)>) -> (<null>)
      #scope: (Default/layer1-SequentialCell)
      # In file /home/yuming/miniconda3/envs/reid/lib/python3.9/site-packages/mindspore/nn/layer/container.py:287/            input_data = cell(input_data)/
  %7([CNode]97) = call @↵construct.SequentialCell.26(%1, %6)
      : (<Int64, NoShape>, <null>) -> (<null>)
      #scope: (Default/layer1-SequentialCell)
      # In file /home/yuming/miniconda3/envs/reid/lib/python3.9/site-packages/mindspore/nn/layer/container.py:286/        for cell in self.cell_list:/
  %8([CNode]98) = Depend[side_effect_propagate=I64(1)](%7, %2)
      : (<null>, <Int64, NoShape>) -> (<null>)
      #scope: (Default/layer1-SequentialCell)
      # In file /home/yuming/ACL-DGReID-mindspore/fastreid/modeling/backbones/meta_dynamic_router_resnet.py:457/        for i in range(len(self.layer1)):/
  Return(%8)
      : (<null>)
      #scope: (Default/layer1-SequentialCell)
      # In file /home/yuming/miniconda3/envs/reid/lib/python3.9/site-packages/mindspore/nn/layer/container.py:286/        for cell in self.cell_list:/
}
# Order:
#   1: @↻construct.SequentialCell.28:[CNode]96{[0]: ValueNode<FuncGraph> ms_iter.66, [1]: [CNode]86}
#   2: @↻construct.SequentialCell.28:cell{[0]: ValueNode<DoSignaturePrimitive> S-Prim-getitem, [1]: [CNode]96, [2]: @[CNode]27}
#   3: @↻construct.SequentialCell.28:[CNode]27{[0]: ValueNode<MultitypeFuncGraph> MetaFuncGraph-add.12, [1]: @[CNode]27, [2]: ValueNode<Int64Imm> 1}
#   4: @↻construct.SequentialCell.28:input_data{[0]: cell, [1]: фinput_data}
#   5: @↻construct.SequentialCell.28:[CNode]97{[0]: ValueNode<FuncGraph> ↵construct.SequentialCell.26, [1]: [CNode]27, [2]: input_data}
#   6: @↻construct.SequentialCell.28:[CNode]99{[0]: ValueNode<Primitive> Return, [1]: [CNode]98}


subgraph attr:
training : 0
subgraph instance: construct.Bottleneck.29 : 0x7fcd682bdbf0
# In file /home/yuming/ACL-DGReID-mindspore/fastreid/modeling/backbones/meta_dynamic_router_resnet.py:238/    def construct(self, x, opt=None):/
subgraph @construct.Bottleneck.29 parent: [subgraph @construct.Default.19](%para390_x) {
  %1([CNode]100) = S-Prim-is_not(call @construct.Sequential_ext.101, None)
      : (<Func, NoShape>, <None, NoShape>) -> (<Bool, NoShape>)
      #scope: (Default/layer1-SequentialCell/0-Bottleneck)
      # In file /home/yuming/ACL-DGReID-mindspore/fastreid/modeling/backbones/meta_dynamic_router_resnet.py:253/        if self.downsample is not None:/
  %2([CNode]103) = call @bool_.102(%1)
      : (<Bool, NoShape>) -> (<Bool, NoShape>)
      #scope: (Default/layer1-SequentialCell/0-Bottleneck)
      # In file /home/yuming/ACL-DGReID-mindspore/fastreid/modeling/backbones/meta_dynamic_router_resnet.py:253/        if self.downsample is not None:/
  %3([CNode]104) = Switch(%2, call @✓construct.Bottleneck.30, call @✗construct.Bottleneck.105)
      : (<Bool, NoShape>, <Func, NoShape>, <Func, NoShape>) -> (<Func, NoShape>)
      #scope: (Default/layer1-SequentialCell/0-Bottleneck)
      # In file /home/yuming/ACL-DGReID-mindspore/fastreid/modeling/backbones/meta_dynamic_router_resnet.py:253/        if self.downsample is not None:/

#------------------------> 9
  %4([CNode]106) = %3()
      #scope: (Default/layer1-SequentialCell/0-Bottleneck)
      # In file /home/yuming/ACL-DGReID-mindspore/fastreid/modeling/backbones/meta_dynamic_router_resnet.py:253/        if self.downsample is not None:/
  %5([CNode]108) = call @↓construct.Bottleneck.107(%4)
      : (<null>) -> (<null>)
      #scope: (Default/layer1-SequentialCell)
      # In file /home/yuming/miniconda3/envs/reid/lib/python3.9/site-packages/mindspore/nn/layer/container.py:286/        for cell in self.cell_list:/
  Return(%5)
      : (<null>)
      #scope: (Default/layer1-SequentialCell/0-Bottleneck)
      # In file /home/yuming/ACL-DGReID-mindspore/fastreid/modeling/backbones/meta_dynamic_router_resnet.py:253/        if self.downsample is not None:/
}
# Order:
#   1: @construct.Bottleneck.29:out{[0]: ValueNode<FuncGraph> construct.MetaConv2d.109, [1]: residual, [2]: ValueNode<None> None}
#   2: @construct.Bottleneck.29:out{[0]: ValueNode<FuncGraph> construct.MetaIBNNorm.110, [1]: out, [2]: ValueNode<None> None}
#   3: @construct.Bottleneck.29:out{[0]: ValueNode<FuncGraph> construct.ReLU.111, [1]: out}
#   4: @construct.Bottleneck.29:out{[0]: ValueNode<FuncGraph> construct.MetaConv2d.112, [1]: out, [2]: ValueNode<None> None}
#   5: @construct.Bottleneck.29:out{[0]: ValueNode<FuncGraph> construct.MetaBNNorm.113, [1]: out, [2]: ValueNode<None> None}
#   6: @construct.Bottleneck.29:out{[0]: ValueNode<FuncGraph> construct.ReLU.111, [1]: out}
#   7: @construct.Bottleneck.29:out{[0]: ValueNode<FuncGraph> construct.MetaConv2d.114, [1]: out, [2]: ValueNode<None> None}
#   8: @construct.Bottleneck.29:out{[0]: ValueNode<FuncGraph> construct.MetaBNNorm.115, [1]: out, [2]: ValueNode<None> None}
#   9: @construct.Bottleneck.29:фout{[0]: ValueNode<FuncGraph> construct.Identity.116, [1]: out}
#  10: @construct.Bottleneck.29:[CNode]100{[0]: ValueNode<DoSignaturePrimitive> S-Prim-is_not, [1]: ValueNode<FuncGraph> construct.Sequential_ext.101, [2]: ValueNode<None> None}
#  11: @construct.Bottleneck.29:[CNode]103{[0]: ValueNode<FuncGraph> bool_.102, [1]: [CNode]100}
#  12: @construct.Bottleneck.29:[CNode]104{[0]: ValueNode<Primitive> Switch, [1]: [CNode]103, [2]: ValueNode<FuncGraph> ✓construct.Bottleneck.30, [3]: ValueNode<FuncGraph> ✗construct.Bottleneck.105}
#  13: @construct.Bottleneck.29:[CNode]106{[0]: [CNode]104}
#  14: @construct.Bottleneck.29:[CNode]108{[0]: ValueNode<FuncGraph> ↓construct.Bottleneck.107, [1]: [CNode]106}
#  15: @construct.Bottleneck.29:[CNode]117{[0]: ValueNode<Primitive> Return, [1]: [CNode]108}


subgraph attr:
training : 0
subgraph instance: ✓construct.Bottleneck.30 : 0x7fcd6831a000
# In file /home/yuming/ACL-DGReID-mindspore/fastreid/modeling/backbones/meta_dynamic_router_resnet.py:253/        if self.downsample is not None:/
subgraph @✓construct.Bottleneck.30 parent: [subgraph @construct.Bottleneck.29]() {

#------------------------> 10
  %1(residual) = call @construct.Sequential_ext.101(%para390_residual, None)
      : (<Tensor[Float32], (8, 64, 4, 4)>, <None, NoShape>) -> (<null>)
      #scope: (Default/layer1-SequentialCell/0-Bottleneck)
      # In file /home/yuming/ACL-DGReID-mindspore/fastreid/modeling/backbones/meta_dynamic_router_resnet.py:254/            residual = self.downsample(x, opt)/
  Return(%1)
      : (<null>)
      #scope: (Default/layer1-SequentialCell/0-Bottleneck)
      # In file /home/yuming/ACL-DGReID-mindspore/fastreid/modeling/backbones/meta_dynamic_router_resnet.py:253/        if self.downsample is not None:/
}
# Order:
#   1: @✓construct.Bottleneck.30:residual{[0]: ValueNode<FuncGraph> construct.Sequential_ext.101, [1]: residual, [2]: ValueNode<None> None}
#   2: @✓construct.Bottleneck.30:[CNode]118{[0]: ValueNode<Primitive> Return, [1]: residual}


subgraph attr:
training : 0
subgraph instance: construct.Sequential_ext.31 : 0x7fcd682debb0
# In file /home/yuming/ACL-DGReID-mindspore/fastreid/modeling/backbones/meta_dynamic_router_resnet.py:80/    def construct(self, input, opt=None):/
subgraph @construct.Sequential_ext.31(%para391_input, %para392_opt) {

#------------------------> 11
  %1([CNode]119) = call @↵construct.Sequential_ext.32(I64(0), %para391_input)
      : (<Int64, NoShape>, <Tensor[Float32], (8, 64, 4, 4)>) -> (<null>)
      #scope: (Default/layer1-SequentialCell/0-Bottleneck)
      # In file /home/yuming/ACL-DGReID-mindspore/fastreid/modeling/backbones/meta_dynamic_router_resnet.py:253/        if self.downsample is not None:/
  Return(%1)
      : (<null>)
      #scope: (Default/layer1-SequentialCell/0-Bottleneck/downsample-Sequential_ext)
      # In file /home/yuming/ACL-DGReID-mindspore/fastreid/modeling/backbones/meta_dynamic_router_resnet.py:81/        for i, module in enumerate(self._cells.values()):/
}
# Order:
#   1: @construct.Sequential_ext.31:[CNode]120{[0]: [CNode]121}
#   2: @construct.Sequential_ext.31:[CNode]122{[0]: ValueNode<FuncGraph> enumerate_.123, [1]: [CNode]120}
#   3: @construct.Sequential_ext.31:[CNode]124{[0]: ValueNode<FuncGraph> ms_len_with_iterable_check.125, [1]: [CNode]122}
#   4: @construct.Sequential_ext.31:[CNode]126{[0]: ValueNode<Primitive> Return, [1]: [CNode]119}
#   5: @construct.Sequential_ext.31:[CNode]119{[0]: ValueNode<FuncGraph> ↵construct.Sequential_ext.32, [1]: ValueNode<Int64Imm> 0, [2]: input}
#   6: @construct.Sequential_ext.31:[CNode]121{[0]: ValueNode<Primitive> getattr, [1]: ValueNode<ValueDictionary> {'0': construct.MetaConv2d.127, '1': construct.MetaBNNorm.128}, [2]: ValueNode<StringImm> values}


subgraph attr:
training : 0
subgraph instance: ↵construct.Sequential_ext.32 : 0x7fcd68229ee0
# In file /home/yuming/ACL-DGReID-mindspore/fastreid/modeling/backbones/meta_dynamic_router_resnet.py:81/        for i, module in enumerate(self._cells.values()):/
subgraph @↵construct.Sequential_ext.32 parent: [subgraph @construct.Sequential_ext.31](%para393_, %para394_) {
  %1([CNode]121) = $(construct.Sequential_ext.31):getattr({"0x561ba9b733e0": FuncGraph[construct.MetaConv2d.127], "0x561b936c3710": FuncGraph[construct.MetaBNNorm.128]}, "values")
      : (<Dictionary[[0,1,],[Func*2]], NoShape>, <String, NoShape>) -> (<Func, NoShape>)
      #scope: (Default/layer1-SequentialCell/0-Bottleneck/downsample-Sequential_ext)
      # In file /home/yuming/ACL-DGReID-mindspore/fastreid/modeling/backbones/meta_dynamic_router_resnet.py:81/        for i, module in enumerate(self._cells.values()):/
  %2([CNode]120) = $(construct.Sequential_ext.31):%1()
      #scope: (Default/layer1-SequentialCell/0-Bottleneck/downsample-Sequential_ext)
      # In file /home/yuming/ACL-DGReID-mindspore/fastreid/modeling/backbones/meta_dynamic_router_resnet.py:81/        for i, module in enumerate(self._cells.values()):/
  %3([CNode]122) = $(construct.Sequential_ext.31):call @enumerate_.123(%2)
      : (<Tuple[Func*2], TupleShape(NoShape, NoShape)>) -> (<Tuple[Tuple[Int64,Func]*2], TupleShape(TupleShape(NoShape, NoShape), TupleShape(NoShape, NoShape))>)
      #scope: (Default/layer1-SequentialCell/0-Bottleneck/downsample-Sequential_ext)
      # In file /home/yuming/ACL-DGReID-mindspore/fastreid/modeling/backbones/meta_dynamic_router_resnet.py:81/        for i, module in enumerate(self._cells.values()):/
  %4([CNode]124) = $(construct.Sequential_ext.31):call @ms_len_with_iterable_check.125(%3)
      : (<Tuple[Tuple[Int64,Func]*2], TupleShape(TupleShape(NoShape, NoShape), TupleShape(NoShape, NoShape))>) -> (<Int64, NoShape>)
      #scope: (Default/layer1-SequentialCell/0-Bottleneck/downsample-Sequential_ext)
      # In file /home/yuming/ACL-DGReID-mindspore/fastreid/modeling/backbones/meta_dynamic_router_resnet.py:81/        for i, module in enumerate(self._cells.values()):/
  %5([CNode]129) = MultitypeFuncGraph-less{(List, List), (Tensor, Number), (Tensor, Tensor), (Tuple, Tuple), (Number, Tensor), (String, String), (Number, Number)}(%para393_@[CNode]33, %4)
      : (<Int64, NoShape>, <Int64, NoShape>) -> (<Bool, NoShape>)
      #scope: (Default/layer1-SequentialCell/0-Bottleneck/downsample-Sequential_ext)
      # In file /home/yuming/ACL-DGReID-mindspore/fastreid/modeling/backbones/meta_dynamic_router_resnet.py:81/        for i, module in enumerate(self._cells.values()):/
  %6([CNode]130) = Switch(%5, call @↻construct.Sequential_ext.34, call @↓construct.Sequential_ext.131)
      : (<Bool, NoShape>, <Func, NoShape>, <Func, NoShape>) -> (<Func, NoShape>)
      #scope: (Default/layer1-SequentialCell/0-Bottleneck/downsample-Sequential_ext)
      # In file /home/yuming/ACL-DGReID-mindspore/fastreid/modeling/backbones/meta_dynamic_router_resnet.py:81/        for i, module in enumerate(self._cells.values()):/

#------------------------> 12
  %7([CNode]132) = %6()
      #scope: (Default/layer1-SequentialCell/0-Bottleneck/downsample-Sequential_ext)
      # In file /home/yuming/ACL-DGReID-mindspore/fastreid/modeling/backbones/meta_dynamic_router_resnet.py:81/        for i, module in enumerate(self._cells.values()):/
  Return(%7)
      : (<null>)
      #scope: (Default/layer1-SequentialCell/0-Bottleneck/downsample-Sequential_ext)
      # In file /home/yuming/ACL-DGReID-mindspore/fastreid/modeling/backbones/meta_dynamic_router_resnet.py:81/        for i, module in enumerate(self._cells.values()):/
}
# Order:
#   1: @↵construct.Sequential_ext.32:[CNode]129{[0]: ValueNode<MultitypeFuncGraph> MetaFuncGraph-less.9, [1]: @[CNode]33, [2]: [CNode]124}
#   2: @↵construct.Sequential_ext.32:[CNode]130{[0]: ValueNode<Primitive> Switch, [1]: [CNode]129, [2]: ValueNode<FuncGraph> ↻construct.Sequential_ext.34, [3]: ValueNode<FuncGraph> ↓construct.Sequential_ext.131}
#   3: @↵construct.Sequential_ext.32:[CNode]132{[0]: [CNode]130}
#   4: @↵construct.Sequential_ext.32:[CNode]133{[0]: ValueNode<Primitive> Return, [1]: [CNode]132}


subgraph attr:
training : 0
subgraph instance: ↻construct.Sequential_ext.34 : 0x7fcd687134d0
# In file /home/yuming/ACL-DGReID-mindspore/fastreid/modeling/backbones/meta_dynamic_router_resnet.py:81/        for i, module in enumerate(self._cells.values()):/
subgraph @↻construct.Sequential_ext.34 parent: [subgraph @↵construct.Sequential_ext.32]() {
  %1([CNode]33) = MultitypeFuncGraph-add{(COOTensor, COOTensor), (CSRTensor, CSRTensor), (Number, Number), (String, String), (Tensor, List), (Tuple, Tuple), (Tensor, Number), (Number, Tensor), (Tuple, Tensor), (Tensor, Tuple), (COOTensor, Tensor), (List, List), (Tensor, COOTensor), (Tensor, Tensor), (List, Tensor), (RowTensor, Tensor), (NoneType, NoneType)}(%para393_@[CNode]33, I64(1))
      : (<Int64, NoShape>, <Int64, NoShape>) -> (<Int64, NoShape>)
      #scope: (Default/layer1-SequentialCell/0-Bottleneck/downsample-Sequential_ext)
      # In file /home/yuming/ACL-DGReID-mindspore/fastreid/modeling/backbones/meta_dynamic_router_resnet.py:81/        for i, module in enumerate(self._cells.values()):/
  %2([CNode]121) = $(construct.Sequential_ext.31):getattr({"0x561ba9b733e0": FuncGraph[construct.MetaConv2d.127], "0x561b936c3710": FuncGraph[construct.MetaBNNorm.128]}, "values")
      : (<Dictionary[[0,1,],[Func*2]], NoShape>, <String, NoShape>) -> (<Func, NoShape>)
      #scope: (Default/layer1-SequentialCell/0-Bottleneck/downsample-Sequential_ext)
      # In file /home/yuming/ACL-DGReID-mindspore/fastreid/modeling/backbones/meta_dynamic_router_resnet.py:81/        for i, module in enumerate(self._cells.values()):/
  %3([CNode]120) = $(construct.Sequential_ext.31):%2()
      #scope: (Default/layer1-SequentialCell/0-Bottleneck/downsample-Sequential_ext)
      # In file /home/yuming/ACL-DGReID-mindspore/fastreid/modeling/backbones/meta_dynamic_router_resnet.py:81/        for i, module in enumerate(self._cells.values()):/
  %4([CNode]122) = $(construct.Sequential_ext.31):call @enumerate_.123(%3)
      : (<Tuple[Func*2], TupleShape(NoShape, NoShape)>) -> (<Tuple[Tuple[Int64,Func]*2], TupleShape(TupleShape(NoShape, NoShape), TupleShape(NoShape, NoShape))>)
      #scope: (Default/layer1-SequentialCell/0-Bottleneck/downsample-Sequential_ext)
      # In file /home/yuming/ACL-DGReID-mindspore/fastreid/modeling/backbones/meta_dynamic_router_resnet.py:81/        for i, module in enumerate(self._cells.values()):/
  %5([CNode]135) = call @ms_iter.134(%4)
      : (<Tuple[Tuple[Int64,Func]*2], TupleShape(TupleShape(NoShape, NoShape), TupleShape(NoShape, NoShape))>) -> (<Tuple[Tuple[Int64,Func]*2], TupleShape(TupleShape(NoShape, NoShape), TupleShape(NoShape, NoShape))>)
      #scope: (Default/layer1-SequentialCell/0-Bottleneck/downsample-Sequential_ext)
      # In file /home/yuming/ACL-DGReID-mindspore/fastreid/modeling/backbones/meta_dynamic_router_resnet.py:81/        for i, module in enumerate(self._cells.values()):/
  %6([CNode]136) = S-Prim-getitem(%5, %para393_@[CNode]33)
      : (<Tuple[Tuple[Int64,Func]*2], TupleShape(TupleShape(NoShape, NoShape), TupleShape(NoShape, NoShape))>, <Int64, NoShape>) -> (<Tuple[Int64,Func], TupleShape(NoShape, NoShape)>)
      #scope: (Default/layer1-SequentialCell/0-Bottleneck/downsample-Sequential_ext)
      # In file /home/yuming/ACL-DGReID-mindspore/fastreid/modeling/backbones/meta_dynamic_router_resnet.py:81/        for i, module in enumerate(self._cells.values()):/
  %7(i) = S-Prim-getitem(%6, I64(0))
      : (<Tuple[Int64,Func], TupleShape(NoShape, NoShape)>, <Int64, NoShape>) -> (<Int64, NoShape>)
      #scope: (Default/layer1-SequentialCell/0-Bottleneck/downsample-Sequential_ext)
      # In file /home/yuming/ACL-DGReID-mindspore/fastreid/modeling/backbones/meta_dynamic_router_resnet.py:81/        for i, module in enumerate(self._cells.values()):/
  %8([CNode]137) = MakeTuple(%1, %7)
      : (<Int64, NoShape>, <Int64, NoShape>) -> (<Tuple[Int64*2], TupleShape(NoShape, NoShape)>)
      #scope: (Default/layer1-SequentialCell/0-Bottleneck/downsample-Sequential_ext)
      # In file /home/yuming/ACL-DGReID-mindspore/fastreid/modeling/backbones/meta_dynamic_router_resnet.py:253/        if self.downsample is not None:/
  %9([CNode]138) = StopGradient(%8)
      : (<Tuple[Int64*2], TupleShape(NoShape, NoShape)>) -> (<Tuple[Int64*2], TupleShape(NoShape, NoShape)>)
      #scope: (Default/layer1-SequentialCell/0-Bottleneck/downsample-Sequential_ext)
      # In file /home/yuming/ACL-DGReID-mindspore/fastreid/modeling/backbones/meta_dynamic_router_resnet.py:253/        if self.downsample is not None:/
  %10(module) = S-Prim-getitem(%6, I64(1))
      : (<Tuple[Int64,Func], TupleShape(NoShape, NoShape)>, <Int64, NoShape>) -> (<Func, NoShape>)
      #scope: (Default/layer1-SequentialCell/0-Bottleneck/downsample-Sequential_ext)
      # In file /home/yuming/ACL-DGReID-mindspore/fastreid/modeling/backbones/meta_dynamic_router_resnet.py:81/        for i, module in enumerate(self._cells.values()):/

#------------------------> 13
  %11(input) = %10(%para394_фinput, %para392_opt)
      : (<Tensor[Float32], (8, 64, 4, 4)>, <None, NoShape>) -> (<null>)
      #scope: (Default/layer1-SequentialCell/0-Bottleneck/downsample-Sequential_ext)
      # In file /home/yuming/ACL-DGReID-mindspore/fastreid/modeling/backbones/meta_dynamic_router_resnet.py:82/            input = module(input, opt)/
  %12([CNode]139) = call @↵construct.Sequential_ext.32(%1, %11)
      : (<Int64, NoShape>, <null>) -> (<null>)
      #scope: (Default/layer1-SequentialCell/0-Bottleneck)
      # In file /home/yuming/ACL-DGReID-mindspore/fastreid/modeling/backbones/meta_dynamic_router_resnet.py:253/        if self.downsample is not None:/
  %13([CNode]140) = Depend[side_effect_propagate=I64(1)](%12, %9)
      : (<null>, <Tuple[Int64*2], TupleShape(NoShape, NoShape)>) -> (<null>)
      #scope: (Default/layer1-SequentialCell/0-Bottleneck/downsample-Sequential_ext)
      # In file /home/yuming/ACL-DGReID-mindspore/fastreid/modeling/backbones/meta_dynamic_router_resnet.py:253/        if self.downsample is not None:/
  Return(%13)
      : (<null>)
      #scope: (Default/layer1-SequentialCell/0-Bottleneck/downsample-Sequential_ext)
      # In file /home/yuming/ACL-DGReID-mindspore/fastreid/modeling/backbones/meta_dynamic_router_resnet.py:81/        for i, module in enumerate(self._cells.values()):/
}
# Order:
#   1: @↻construct.Sequential_ext.34:[CNode]135{[0]: ValueNode<FuncGraph> ms_iter.134, [1]: [CNode]122}
#   2: @↻construct.Sequential_ext.34:[CNode]136{[0]: ValueNode<DoSignaturePrimitive> S-Prim-getitem, [1]: [CNode]135, [2]: @[CNode]33}
#   3: @↻construct.Sequential_ext.34:i{[0]: ValueNode<DoSignaturePrimitive> S-Prim-getitem, [1]: [CNode]136, [2]: ValueNode<Int64Imm> 0}
#   4: @↻construct.Sequential_ext.34:module{[0]: ValueNode<DoSignaturePrimitive> S-Prim-getitem, [1]: [CNode]136, [2]: ValueNode<Int64Imm> 1}
#   5: @↻construct.Sequential_ext.34:[CNode]33{[0]: ValueNode<MultitypeFuncGraph> MetaFuncGraph-add.12, [1]: @[CNode]33, [2]: ValueNode<Int64Imm> 1}
#   6: @↻construct.Sequential_ext.34:input{[0]: module, [1]: фinput, [2]: opt}
#   7: @↻construct.Sequential_ext.34:[CNode]141{[0]: ValueNode<Primitive> Return, [1]: [CNode]140}
#   8: @↻construct.Sequential_ext.34:[CNode]139{[0]: ValueNode<FuncGraph> ↵construct.Sequential_ext.32, [1]: [CNode]33, [2]: input}


subgraph attr:
training : 0
subgraph instance: construct.MetaConv2d.35 : 0x7fcd682eb700
# In file /home/yuming/ACL-DGReID-mindspore/fastreid/modeling/ops.py:89/    def construct(self, inputs, opt=None):/
subgraph @construct.MetaConv2d.35(%para395_inputs, %para396_opt) {

#------------------------> 14
  %1([CNode]143) = call @L-construct.MetaConv2d.142(%para395_inputs, %para396_opt)
      : (<Tensor[Float32], (8, 64, 4, 4)>, <None, NoShape>) -> (<null>)
      #scope: (Default)
  Return(%1)
      : (<null>)
      #scope: (Default/layer1-SequentialCell/0-Bottleneck/downsample-Sequential_ext/0-MetaConv2d)
      # In file /home/yuming/ACL-DGReID-mindspore/fastreid/modeling/ops.py:90/        if opt != None and opt['meta']:/
}
# Order:
#   1: @construct.MetaConv2d.127:[CNode]144{[0]: ValueNode<Primitive> resolve, [1]: ValueNode<NameSpace> Ast: 'Namespace:mindspore._extends.parse.trope', [2]: ValueNode<Symbol> ne}
#   2: @construct.MetaConv2d.127:[CNode]145{[0]: [CNode]144, [1]: opt, [2]: ValueNode<None> None}
#   3: @construct.MetaConv2d.127:[CNode]146{[0]: ValueNode<Primitive> resolve, [1]: ValueNode<NameSpace> CommonOPS: 'Namespace:mindspore._extends.parse.trope', [2]: ValueNode<Symbol> bool_}
#   4: @construct.MetaConv2d.127:[CNode]147{[0]: [CNode]146, [1]: [CNode]145}
#   5: @construct.MetaConv2d.127:[CNode]148{[0]: ValueNode<Primitive> Switch, [1]: [CNode]147, [2]: ValueNode<FuncGraph> ↰construct.MetaConv2d.149, [3]: ValueNode<FuncGraph> ↱construct.MetaConv2d.150}
#   6: @construct.MetaConv2d.127:[CNode]151{[0]: [CNode]148}
#   7: @construct.MetaConv2d.127:[CNode]152{[0]: ValueNode<Primitive> resolve, [1]: ValueNode<NameSpace> CommonOPS: 'Namespace:mindspore._extends.parse.trope', [2]: ValueNode<Symbol> bool_}
#   8: @construct.MetaConv2d.127:[CNode]153{[0]: [CNode]152, [1]: [CNode]151}
#   9: @construct.MetaConv2d.127:[CNode]154{[0]: ValueNode<Primitive> resolve, [1]: ValueNode<NameSpace> SymbolStr: 'Namespace:fastreid.modeling.ops', [2]: ValueNode<Symbol> update_parameter}
#  10: @construct.MetaConv2d.127:[CNode]155{[0]: ValueNode<Primitive> resolve, [1]: ValueNode<NameSpace> ClassMember: 'Namespace:fastreid.modeling.ops..<MetaConv2d::140525985190192>', [2]: ValueNode<Symbol> weight}
#  11: @construct.MetaConv2d.127:[CNode]156{[0]: ValueNode<Primitive> resolve, [1]: ValueNode<NameSpace> ClassMember: 'Namespace:fastreid.modeling.ops..<MetaConv2d::140525985190192>', [2]: ValueNode<Symbol> w_step_size}
#  12: @construct.MetaConv2d.127:[CNode]157{[0]: ValueNode<Primitive> resolve, [1]: ValueNode<NameSpace> ClassMember: 'Namespace:fastreid.modeling.ops..<MetaConv2d::140525985190192>', [2]: ValueNode<Symbol> bias}
#  13: @construct.MetaConv2d.127:[CNode]158{[0]: ValueNode<Primitive> resolve, [1]: ValueNode<NameSpace> ClassMember: 'Namespace:fastreid.modeling.ops..<MetaConv2d::140525985190192>', [2]: ValueNode<Symbol> b_step_size}
#  14: @construct.MetaConv2d.127:[CNode]159{[0]: ValueNode<Primitive> Switch, [1]: [CNode]153, [2]: ValueNode<FuncGraph> ✓construct.MetaConv2d.160, [3]: ValueNode<FuncGraph> ✗construct.MetaConv2d.161}
#  15: @construct.MetaConv2d.127:[CNode]162{[0]: [CNode]159}
#  16: @construct.MetaConv2d.35:[CNode]143{[0]: ValueNode<FuncGraph> L-construct.MetaConv2d.142, [1]: inputs, [2]: opt}
#  17: @construct.MetaConv2d.35:[CNode]163{[0]: ValueNode<Primitive> Return, [1]: [CNode]143}


subgraph attr:
training : 0
subgraph instance: L-construct.MetaConv2d.17 : 0x7fcd68510c50
# In file /home/yuming/ACL-DGReID-mindspore/fastreid/modeling/ops.py:89/    def construct(self, inputs, opt=None):/
subgraph @L-construct.MetaConv2d.17(%para397_inputs, %para398_opt) {
  %1([CNode]164) = S-Prim-not_equal(%para398_opt, None)
      : (<None, NoShape>, <None, NoShape>) -> (<Bool, NoShape>)
      #scope: (Default/layer1-SequentialCell/0-Bottleneck/conv3-MetaConv2d)
      # In file /home/yuming/ACL-DGReID-mindspore/fastreid/modeling/ops.py:90/        if opt != None and opt['meta']:/
  %2([CNode]166) = call @L-bool_.165(%1)
      : (<Bool, NoShape>) -> (<Bool, NoShape>)
      #scope: (Default/layer1-SequentialCell/0-Bottleneck/conv3-MetaConv2d)
      # In file /home/yuming/ACL-DGReID-mindspore/fastreid/modeling/ops.py:90/        if opt != None and opt['meta']:/
  %3([CNode]167) = Switch(%2, call @L-↰construct.MetaConv2d.168, call @L-↱construct.MetaConv2d.169)
      : (<Bool, NoShape>, <Func, NoShape>, <Func, NoShape>) -> (<Func, NoShape>)
      #scope: (Default/layer1-SequentialCell/0-Bottleneck/conv3-MetaConv2d)
      # In file /home/yuming/ACL-DGReID-mindspore/fastreid/modeling/ops.py:90/        if opt != None and opt['meta']:/
  %4([CNode]170) = %3()
      #scope: (Default/layer1-SequentialCell/0-Bottleneck/conv3-MetaConv2d)
      # In file /home/yuming/ACL-DGReID-mindspore/fastreid/modeling/ops.py:90/        if opt != None and opt['meta']:/
  %5([CNode]171) = call @L-bool_.165(%4)
      : (<Bool, NoShape>) -> (<Bool, NoShape>)
      #scope: (Default/layer1-SequentialCell/0-Bottleneck/conv3-MetaConv2d)
      # In file /home/yuming/ACL-DGReID-mindspore/fastreid/modeling/ops.py:90/        if opt != None and opt['meta']:/
  %6([CNode]172) = Switch(%5, call @L-✓construct.MetaConv2d.173, call @L-✗construct.MetaConv2d.18)
      : (<Bool, NoShape>, <Func, NoShape>, <Func, NoShape>) -> (<Func, NoShape>)
      #scope: (Default/layer1-SequentialCell/0-Bottleneck/conv3-MetaConv2d)
      # In file /home/yuming/ACL-DGReID-mindspore/fastreid/modeling/ops.py:90/        if opt != None and opt['meta']:/

#------------------------> 15
  %7([CNode]174) = %6()
      #scope: (Default/layer1-SequentialCell/0-Bottleneck/conv3-MetaConv2d)
      # In file /home/yuming/ACL-DGReID-mindspore/fastreid/modeling/ops.py:90/        if opt != None and opt['meta']:/
  Return(%7)
      : (<null>)
      #scope: (Default/layer1-SequentialCell/0-Bottleneck/conv3-MetaConv2d)
      # In file /home/yuming/ACL-DGReID-mindspore/fastreid/modeling/ops.py:90/        if opt != None and opt['meta']:/
}
# Order:
#   1: @L-construct.MetaConv2d.17:[CNode]164{[0]: ValueNode<DoSignaturePrimitive> S-Prim-not_equal, [1]: opt, [2]: ValueNode<None> None}
#   2: @L-construct.MetaConv2d.17:[CNode]166{[0]: ValueNode<FuncGraph> L-bool_.165, [1]: [CNode]164}
#   3: @L-construct.MetaConv2d.17:[CNode]167{[0]: ValueNode<Primitive> Switch, [1]: [CNode]166, [2]: ValueNode<FuncGraph> L-↰construct.MetaConv2d.168, [3]: ValueNode<FuncGraph> L-↱construct.MetaConv2d.169}
#   4: @L-construct.MetaConv2d.17:[CNode]170{[0]: [CNode]167}
#   5: @L-construct.MetaConv2d.17:[CNode]171{[0]: ValueNode<FuncGraph> L-bool_.165, [1]: [CNode]170}
#   6: @L-construct.MetaConv2d.17:[CNode]175{[0]: ValueNode<Primitive> resolve, [1]: ValueNode<NameSpace> ClassMember: 'Namespace:fastreid.modeling.ops..<MetaConv2d::140525985338448>', [2]: ValueNode<Symbol> w_step_size}
#   7: @L-construct.MetaConv2d.17:[CNode]176{[0]: ValueNode<Primitive> resolve, [1]: ValueNode<NameSpace> ClassMember: 'Namespace:fastreid.modeling.ops..<MetaConv2d::140525985338448>', [2]: ValueNode<Symbol> b_step_size}
#   8: @L-construct.MetaConv2d.17:[CNode]172{[0]: ValueNode<Primitive> Switch, [1]: [CNode]171, [2]: ValueNode<FuncGraph> L-✓construct.MetaConv2d.173, [3]: ValueNode<FuncGraph> L-✗construct.MetaConv2d.18}
#   9: @L-construct.MetaConv2d.17:[CNode]174{[0]: [CNode]172}
#  10: @L-construct.MetaConv2d.17:[CNode]177{[0]: ValueNode<Primitive> Return, [1]: [CNode]174}


subgraph attr:
training : 0
subgraph instance: L-✗construct.MetaConv2d.18 : 0x7fcd68480420
# In file /home/yuming/ACL-DGReID-mindspore/fastreid/modeling/ops.py:90/        if opt != None and opt['meta']:/
subgraph @L-✗construct.MetaConv2d.18 parent: [subgraph @L-construct.MetaConv2d.17]() {

#------------------------> 16
  %1(output) = S-Prim-Conv2D[kernel_size=(I64(1), I64(1)), stride=(I64(1), I64(1), I64(1), I64(1)), mode=I64(1), out_channel=I64(256), group=I64(1), input_names=["x", "w"], pad=(I64(0), I64(0), I64(0), I64(0)), dilation=(I64(1), I64(1), I64(1), I64(1)), pad_mode=I64(0), output_names=["output"], format="NCHW", groups=I64(1)](%para397_inputs, %para-1_L-layer1.0.conv3.weight)
      : (<Tensor[Float32], (8, 64, 4, 4)>, <null>) -> (<null>)
      #scope: (Default/layer1-SequentialCell/0-Bottleneck/conv3-MetaConv2d)
      # In file /home/yuming/ACL-DGReID-mindspore/fastreid/modeling/ops.py:99/            output = self.conv(inputs, self.weight)/
  Return(%1)
      : (<null>)
      #scope: (Default/layer1-SequentialCell/0-Bottleneck/conv3-MetaConv2d)
      # In file /home/yuming/ACL-DGReID-mindspore/fastreid/modeling/ops.py:100/            return output/
}
# Order:
#   1: @L-✗construct.MetaConv2d.18:output{[0]: ValueNode<DoSignaturePrimitive> S-Prim-Conv2D, [1]: inputs, [2]: L-layer1.0.conv3.weight}
#   2: @L-✗construct.MetaConv2d.18:[CNode]178{[0]: ValueNode<Primitive> Return, [1]: output}


#===============================================================================
# num of function graphs in stack: 17
